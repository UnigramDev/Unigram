// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLMessagesBotResults : TLObject 
	{
		[Flags]
		public enum Flag : int
		{
			Gallery = (1 << 0),
			NextOffset = (1 << 1),
			SwitchPm = (1 << 2),
		}

		public bool IsGallery { get { return Flags.HasFlag(Flag.Gallery); } set { Flags = value ? (Flags | Flag.Gallery) : (Flags & ~Flag.Gallery); } }
		public bool HasNextOffset { get { return Flags.HasFlag(Flag.NextOffset); } set { Flags = value ? (Flags | Flag.NextOffset) : (Flags & ~Flag.NextOffset); } }
		public bool HasSwitchPm { get { return Flags.HasFlag(Flag.SwitchPm); } set { Flags = value ? (Flags | Flag.SwitchPm) : (Flags & ~Flag.SwitchPm); } }

		public Flag Flags { get; set; }
		public Int64 QueryId { get; set; }
		public String NextOffset { get; set; }
		public TLInlineBotSwitchPM SwitchPm { get; set; }
		public TLVector<TLBotInlineResultBase> Results { get; set; }

		public TLMessagesBotResults() { }
		public TLMessagesBotResults(TLBinaryReader from, TLType type = TLType.MessagesBotResults)
		{
			Read(from, type);
		}

		public override TLType TypeId { get { return TLType.MessagesBotResults; } }

		public override void Read(TLBinaryReader from, TLType type = TLType.MessagesBotResults)
		{
			Flags = (Flag)from.ReadInt32();
			QueryId = from.ReadInt64();
			if (HasNextOffset) { NextOffset = from.ReadString(); }
			if (HasSwitchPm) { SwitchPm = TLFactory.Read<TLInlineBotSwitchPM>(from); }
			Results = TLFactory.Read<TLVector<TLBotInlineResultBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x256709A6);
			to.Write((Int32)Flags);
			to.Write(QueryId);
			if (HasNextOffset) to.Write(NextOffset);
			if (HasSwitchPm) to.WriteObject(SwitchPm);
			to.WriteObject(Results);
		}
	}
}