// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLUpdateShortChatMessage : TLUpdatesBase, ITLMultiPts 
	{
		[Flags]
		public enum Flag : int
		{
			Out = (1 << 1),
			Mentioned = (1 << 4),
			MediaUnread = (1 << 5),
			Silent = (1 << 13),
			FwdFrom = (1 << 2),
			ViaBotId = (1 << 11),
			ReplyToMsgId = (1 << 3),
			Entities = (1 << 7),
		}

		public bool IsOut { get { return Flags.HasFlag(Flag.Out); } set { Flags = value ? (Flags | Flag.Out) : (Flags & ~Flag.Out); } }
		public bool IsMentioned { get { return Flags.HasFlag(Flag.Mentioned); } set { Flags = value ? (Flags | Flag.Mentioned) : (Flags & ~Flag.Mentioned); } }
		public bool IsMediaUnread { get { return Flags.HasFlag(Flag.MediaUnread); } set { Flags = value ? (Flags | Flag.MediaUnread) : (Flags & ~Flag.MediaUnread); } }
		public bool IsSilent { get { return Flags.HasFlag(Flag.Silent); } set { Flags = value ? (Flags | Flag.Silent) : (Flags & ~Flag.Silent); } }
		public bool HasFwdFrom { get { return Flags.HasFlag(Flag.FwdFrom); } set { Flags = value ? (Flags | Flag.FwdFrom) : (Flags & ~Flag.FwdFrom); } }
		public bool HasViaBotId { get { return Flags.HasFlag(Flag.ViaBotId); } set { Flags = value ? (Flags | Flag.ViaBotId) : (Flags & ~Flag.ViaBotId); } }
		public bool HasReplyToMsgId { get { return Flags.HasFlag(Flag.ReplyToMsgId); } set { Flags = value ? (Flags | Flag.ReplyToMsgId) : (Flags & ~Flag.ReplyToMsgId); } }
		public bool HasEntities { get { return Flags.HasFlag(Flag.Entities); } set { Flags = value ? (Flags | Flag.Entities) : (Flags & ~Flag.Entities); } }

		public Flag Flags { get; set; }
		public Int32 FromId { get; set; }
		public Int32 ChatId { get; set; }

		public TLUpdateShortChatMessage() { }
		public TLUpdateShortChatMessage(TLBinaryReader from, TLType type = TLType.UpdateShortChatMessage)
		{
			Read(from, type);
		}

		public override TLType TypeId { get { return TLType.UpdateShortChatMessage; } }

		public override void Read(TLBinaryReader from, TLType type = TLType.UpdateShortChatMessage)
		{
			Flags = (Flag)from.ReadInt32();
			Id = from.ReadInt32();
			FromId = from.ReadInt32();
			ChatId = from.ReadInt32();
			Message = from.ReadString();
			Pts = from.ReadInt32();
			PtsCount = from.ReadInt32();
			Date = from.ReadInt32();
			if (HasFwdFrom) { FwdFrom = TLFactory.Read<TLMessageFwdHeader>(from); }
			if (HasViaBotId) { ViaBotId = from.ReadInt32(); }
			if (HasReplyToMsgId) { ReplyToMsgId = from.ReadInt32(); }
			if (HasEntities) { Entities = TLFactory.Read<TLVector<TLMessageEntityBase>>(from); }
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x16812688);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(FromId);
			to.Write(ChatId);
			to.Write(Message);
			to.Write(Pts);
			to.Write(PtsCount);
			to.Write(Date);
			if (HasFwdFrom) to.WriteObject(FwdFrom);
			if (HasViaBotId) to.Write(ViaBotId.Value);
			if (HasReplyToMsgId) to.Write(ReplyToMsgId.Value);
			if (HasEntities) to.WriteObject(Entities);
		}
	}
}