// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLMessageFwdHeader : TLObject 
	{
		[Flags]
		public enum Flag : Int32
		{
			FromId = (1 << 0),
			ChannelId = (1 << 1),
			ChannelPost = (1 << 2),
		}

		public bool HasFromId { get { return Flags.HasFlag(Flag.FromId); } set { Flags = value ? (Flags | Flag.FromId) : (Flags & ~Flag.FromId); } }
		public bool HasChannelId { get { return Flags.HasFlag(Flag.ChannelId); } set { Flags = value ? (Flags | Flag.ChannelId) : (Flags & ~Flag.ChannelId); } }
		public bool HasChannelPost { get { return Flags.HasFlag(Flag.ChannelPost); } set { Flags = value ? (Flags | Flag.ChannelPost) : (Flags & ~Flag.ChannelPost); } }

		public Flag Flags { get; set; }
		public Int32? FromId { get; set; }
		public Int32 Date { get; set; }
		public Int32? ChannelId { get; set; }
		public Int32? ChannelPost { get; set; }

		public TLMessageFwdHeader() { }
		public TLMessageFwdHeader(TLBinaryReader from, bool cache = false)
		{
			Read(from, cache);
		}

		public override TLType TypeId { get { return TLType.MessageFwdHeader; } }

		public override void Read(TLBinaryReader from, bool cache = false)
		{
			Flags = (Flag)from.ReadInt32();
			if (HasFromId) { FromId = from.ReadInt32(); }
			Date = from.ReadInt32();
			if (HasChannelId) { ChannelId = from.ReadInt32(); }
			if (HasChannelPost) { ChannelPost = from.ReadInt32(); }
			if (cache) ReadFromCache(from);
		}

		public override void Write(TLBinaryWriter to, bool cache = false)
		{
			to.Write(0xC786DDCB);
			to.Write((Int32)Flags);
			if (HasFromId) to.Write(FromId.Value);
			to.Write(Date);
			if (HasChannelId) to.Write(ChannelId.Value);
			if (HasChannelPost) to.Write(ChannelPost.Value);
			if (cache) WriteToCache(to);
		}
	}
}