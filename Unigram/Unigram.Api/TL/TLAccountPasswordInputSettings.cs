// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLAccountPasswordInputSettings : TLObject 
	{
		[Flags]
		public enum Flag : Int32
		{
			NewSalt = (1 << 0),
			NewPasswordHash = (1 << 0),
			Hint = (1 << 0),
			Email = (1 << 1),
		}

		public bool HasNewSalt { get { return Flags.HasFlag(Flag.NewSalt); } set { Flags = value ? (Flags | Flag.NewSalt) : (Flags & ~Flag.NewSalt); } }
		public bool HasNewPasswordHash { get { return Flags.HasFlag(Flag.NewPasswordHash); } set { Flags = value ? (Flags | Flag.NewPasswordHash) : (Flags & ~Flag.NewPasswordHash); } }
		public bool HasHint { get { return Flags.HasFlag(Flag.Hint); } set { Flags = value ? (Flags | Flag.Hint) : (Flags & ~Flag.Hint); } }
		public bool HasEmail { get { return Flags.HasFlag(Flag.Email); } set { Flags = value ? (Flags | Flag.Email) : (Flags & ~Flag.Email); } }

		public Flag Flags { get; set; }
		public Byte[] NewSalt { get; set; }
		public Byte[] NewPasswordHash { get; set; }
		public String Hint { get; set; }
		public String Email { get; set; }

		public TLAccountPasswordInputSettings() { }
		public TLAccountPasswordInputSettings(TLBinaryReader from, bool cache = false)
		{
			Read(from, cache);
		}

		public override TLType TypeId { get { return TLType.AccountPasswordInputSettings; } }

		public override void Read(TLBinaryReader from, bool cache = false)
		{
			Flags = (Flag)from.ReadInt32();
			if (HasNewSalt) { NewSalt = from.ReadByteArray(); }
			if (HasNewPasswordHash) { NewPasswordHash = from.ReadByteArray(); }
			if (HasHint) { Hint = from.ReadString(); }
			if (HasEmail) { Email = from.ReadString(); }
			if (cache) ReadFromCache(from);
		}

		public override void Write(TLBinaryWriter to, bool cache = false)
		{
			to.Write(0x86916DEB);
			to.Write((Int32)Flags);
			if (HasNewSalt) to.WriteByteArray(NewSalt);
			if (HasNewPasswordHash) to.WriteByteArray(NewPasswordHash);
			if (HasHint) to.Write(Hint);
			if (HasEmail) to.Write(Email);
			if (cache) WriteToCache(to);
		}
	}
}