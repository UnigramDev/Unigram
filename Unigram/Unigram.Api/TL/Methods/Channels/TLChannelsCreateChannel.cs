// <auto-generated/>
using System;

namespace Telegram.Api.TL.Methods.Channels
{
	/// <summary>
	/// RCP method channels.createChannel
	/// </summary>
	public partial class TLChannelsCreateChannel : TLObject
	{
		[Flags]
		public enum Flag : Int32
		{
			Broadcast = (1 << 0),
			Megagroup = (1 << 1),
		}

		public bool IsBroadcast { get { return Flags.HasFlag(Flag.Broadcast); } set { Flags = value ? (Flags | Flag.Broadcast) : (Flags & ~Flag.Broadcast); } }
		public bool IsMegagroup { get { return Flags.HasFlag(Flag.Megagroup); } set { Flags = value ? (Flags | Flag.Megagroup) : (Flags & ~Flag.Megagroup); } }

		public Flag Flags { get; set; }
		public String Title { get; set; }
		public String About { get; set; }

		public TLChannelsCreateChannel() { }
		public TLChannelsCreateChannel(TLBinaryReader from, bool cache = false)
		{
			Read(from, cache);
		}

		public override TLType TypeId { get { return TLType.ChannelsCreateChannel; } }

		public override void Read(TLBinaryReader from, bool cache = false)
		{
			Flags = (Flag)from.ReadInt32();
			Title = from.ReadString();
			About = from.ReadString();
			if (cache) ReadFromCache(from);
		}

		public override void Write(TLBinaryWriter to, bool cache = false)
		{
			UpdateFlags();

			to.Write(0xF4893D7F);
			to.Write((Int32)Flags);
			to.Write(Title);
			to.Write(About);
			if (cache) WriteToCache(to);
		}

		private void UpdateFlags()
		{
		}
	}
}