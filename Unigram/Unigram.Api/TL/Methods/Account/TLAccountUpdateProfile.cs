// <auto-generated/>
using System;

namespace Telegram.Api.TL.Methods.Account
{
	/// <summary>
	/// RCP method account.updateProfile
	/// </summary>
	public partial class TLAccountUpdateProfile : TLObject
	{
		[Flags]
		public enum Flag : Int32
		{
			FirstName = (1 << 0),
			LastName = (1 << 1),
			About = (1 << 2),
		}

		public bool HasFirstName { get { return Flags.HasFlag(Flag.FirstName); } set { Flags = value ? (Flags | Flag.FirstName) : (Flags & ~Flag.FirstName); } }
		public bool HasLastName { get { return Flags.HasFlag(Flag.LastName); } set { Flags = value ? (Flags | Flag.LastName) : (Flags & ~Flag.LastName); } }
		public bool HasAbout { get { return Flags.HasFlag(Flag.About); } set { Flags = value ? (Flags | Flag.About) : (Flags & ~Flag.About); } }

		public Flag Flags { get; set; }
		public String FirstName { get; set; }
		public String LastName { get; set; }
		public String About { get; set; }

		public TLAccountUpdateProfile() { }
		public TLAccountUpdateProfile(TLBinaryReader from, bool cache = false)
		{
			Read(from, cache);
		}

		public override TLType TypeId { get { return TLType.AccountUpdateProfile; } }

		public override void Read(TLBinaryReader from, bool cache = false)
		{
			Flags = (Flag)from.ReadInt32();
			if (HasFirstName) FirstName = from.ReadString();
			if (HasLastName) LastName = from.ReadString();
			if (HasAbout) About = from.ReadString();
			if (cache) ReadFromCache(from);
		}

		public override void Write(TLBinaryWriter to, bool cache = false)
		{
			UpdateFlags();

			to.Write(0x78515775);
			to.Write((Int32)Flags);
			if (HasFirstName) to.Write(FirstName);
			if (HasLastName) to.Write(LastName);
			if (HasAbout) to.Write(About);
			if (cache) WriteToCache(to);
		}

		private void UpdateFlags()
		{
			HasFirstName = FirstName != null;
			HasLastName = LastName != null;
			HasAbout = About != null;
		}
	}
}