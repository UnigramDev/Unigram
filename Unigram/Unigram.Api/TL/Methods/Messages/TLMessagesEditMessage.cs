// <auto-generated/>
using System;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.editMessage
	/// </summary>
	public partial class TLMessagesEditMessage : TLObject
	{
		[Flags]
		public enum Flag : int
		{
			NoWebpage = (1 << 1),
			Message = (1 << 11),
			ReplyMarkup = (1 << 2),
			Entities = (1 << 3),
		}

		public bool IsNoWebpage { get { return Flags.HasFlag(Flag.NoWebpage); } set { Flags = value ? (Flags | Flag.NoWebpage) : (Flags & ~Flag.NoWebpage); } }
		public bool HasMessage { get { return Flags.HasFlag(Flag.Message); } set { Flags = value ? (Flags | Flag.Message) : (Flags & ~Flag.Message); } }
		public bool HasReplyMarkup { get { return Flags.HasFlag(Flag.ReplyMarkup); } set { Flags = value ? (Flags | Flag.ReplyMarkup) : (Flags & ~Flag.ReplyMarkup); } }
		public bool HasEntities { get { return Flags.HasFlag(Flag.Entities); } set { Flags = value ? (Flags | Flag.Entities) : (Flags & ~Flag.Entities); } }

		public Flag Flags { get; set; }
		public TLInputPeerBase Peer { get; set; }
		public Int32 Id { get; set; }
		public String Message { get; set; }
		public TLReplyMarkupBase ReplyMarkup { get; set; }
		public TLVector<TLMessageEntityBase> Entities { get; set; }

		public TLMessagesEditMessage() { }
		public TLMessagesEditMessage(TLBinaryReader from, TLType type = TLType.MessagesEditMessage)
		{
			Read(from, type);
		}

		public override TLType TypeId { get { return TLType.MessagesEditMessage; } }

		public override void Read(TLBinaryReader from, TLType type = TLType.MessagesEditMessage)
		{
			Flags = (Flag)from.ReadInt32();
			Peer = TLFactory.Read<TLInputPeerBase>(from);
			Id = from.ReadInt32();
			if (HasMessage) { Message = from.ReadString(); }
			if (HasReplyMarkup) { ReplyMarkup = TLFactory.Read<TLReplyMarkupBase>(from); }
			if (HasEntities) { Entities = TLFactory.Read<TLVector<TLMessageEntityBase>>(from); }
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xCE91E4CA);
			to.Write((Int32)Flags);
			to.WriteObject(Peer);
			to.Write(Id);
			if (HasMessage) to.Write(Message);
			if (HasReplyMarkup) to.WriteObject(ReplyMarkup);
			if (HasEntities) to.WriteObject(Entities);
		}
	}
}