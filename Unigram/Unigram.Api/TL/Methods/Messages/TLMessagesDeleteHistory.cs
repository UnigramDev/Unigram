// <auto-generated/>
using System;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.deleteHistory
	/// </summary>
	public partial class TLMessagesDeleteHistory : TLObject
	{
		[Flags]
		public enum Flag : Int32
		{
			JustClear = (1 << 0),
		}

		public bool IsJustClear { get { return Flags.HasFlag(Flag.JustClear); } set { Flags = value ? (Flags | Flag.JustClear) : (Flags & ~Flag.JustClear); } }

		public Flag Flags { get; set; }
		public TLInputPeerBase Peer { get; set; }
		public Int32 MaxId { get; set; }

		public TLMessagesDeleteHistory() { }
		public TLMessagesDeleteHistory(TLBinaryReader from, bool cache = false)
		{
			Read(from, cache);
		}

		public override TLType TypeId { get { return TLType.MessagesDeleteHistory; } }

		public override void Read(TLBinaryReader from, bool cache = false)
		{
			Flags = (Flag)from.ReadInt32();
			Peer = TLFactory.Read<TLInputPeerBase>(from, cache);
			MaxId = from.ReadInt32();
			if (cache) ReadFromCache(from);
		}

		public override void Write(TLBinaryWriter to, bool cache = false)
		{
			to.Write(0x1C015B09);
			to.Write((Int32)Flags);
			to.WriteObject(Peer, cache);
			to.Write(MaxId);
			if (cache) WriteToCache(to);
		}
	}
}