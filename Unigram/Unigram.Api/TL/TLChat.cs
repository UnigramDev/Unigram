// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLChat : TLChatBase 
	{
		[Flags]
		public enum Flag : int
		{
			Creator = (1 << 0),
			Kicked = (1 << 1),
			Left = (1 << 2),
			AdminsEnabled = (1 << 3),
			Admin = (1 << 4),
			Deactivated = (1 << 5),
			MigratedTo = (1 << 6),
		}

		public bool IsCreator { get { return Flags.HasFlag(Flag.Creator); } set { Flags = value ? (Flags | Flag.Creator) : (Flags & ~Flag.Creator); } }
		public bool IsKicked { get { return Flags.HasFlag(Flag.Kicked); } set { Flags = value ? (Flags | Flag.Kicked) : (Flags & ~Flag.Kicked); } }
		public bool IsLeft { get { return Flags.HasFlag(Flag.Left); } set { Flags = value ? (Flags | Flag.Left) : (Flags & ~Flag.Left); } }
		public bool IsAdminsEnabled { get { return Flags.HasFlag(Flag.AdminsEnabled); } set { Flags = value ? (Flags | Flag.AdminsEnabled) : (Flags & ~Flag.AdminsEnabled); } }
		public bool IsAdmin { get { return Flags.HasFlag(Flag.Admin); } set { Flags = value ? (Flags | Flag.Admin) : (Flags & ~Flag.Admin); } }
		public bool IsDeactivated { get { return Flags.HasFlag(Flag.Deactivated); } set { Flags = value ? (Flags | Flag.Deactivated) : (Flags & ~Flag.Deactivated); } }
		public bool HasMigratedTo { get { return Flags.HasFlag(Flag.MigratedTo); } set { Flags = value ? (Flags | Flag.MigratedTo) : (Flags & ~Flag.MigratedTo); } }

		public Flag Flags { get; set; }
		public Int32 ParticipantsCount { get; set; }
		public TLInputChannelBase MigratedTo { get; set; }

		public TLChat() { }
		public TLChat(TLBinaryReader from, TLType type = TLType.Chat)
		{
			Read(from, type);
		}

		public override TLType TypeId { get { return TLType.Chat; } }

		public override void Read(TLBinaryReader from, TLType type = TLType.Chat)
		{
			Flags = (Flag)from.ReadInt32();
			Id = from.ReadInt32();
			Title = from.ReadString();
			Photo = TLFactory.Read<TLChatPhotoBase>(from);
			ParticipantsCount = from.ReadInt32();
			Date = from.ReadInt32();
			Version = from.ReadInt32();
			if (HasMigratedTo) { MigratedTo = TLFactory.Read<TLInputChannelBase>(from); }
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xD91CDD54);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(Title);
			to.WriteObject(Photo);
			to.Write(ParticipantsCount);
			to.Write(Date);
			to.Write(Version);
			if (HasMigratedTo) to.WriteObject(MigratedTo);
		}
	}
}