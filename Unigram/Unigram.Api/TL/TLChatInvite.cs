// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLChatInvite : TLChatInviteBase 
	{
		[Flags]
		public enum Flag : int
		{
			Channel = (1 << 0),
			Broadcast = (1 << 1),
			Public = (1 << 2),
			Megagroup = (1 << 3),
		}

		public bool IsChannel { get { return Flags.HasFlag(Flag.Channel); } set { Flags = value ? (Flags | Flag.Channel) : (Flags & ~Flag.Channel); } }
		public bool IsBroadcast { get { return Flags.HasFlag(Flag.Broadcast); } set { Flags = value ? (Flags | Flag.Broadcast) : (Flags & ~Flag.Broadcast); } }
		public bool IsPublic { get { return Flags.HasFlag(Flag.Public); } set { Flags = value ? (Flags | Flag.Public) : (Flags & ~Flag.Public); } }
		public bool IsMegagroup { get { return Flags.HasFlag(Flag.Megagroup); } set { Flags = value ? (Flags | Flag.Megagroup) : (Flags & ~Flag.Megagroup); } }

		public Flag Flags { get; set; }
		public String Title { get; set; }

		public TLChatInvite() { }
		public TLChatInvite(TLBinaryReader from, TLType type = TLType.ChatInvite)
		{
			Read(from, type);
		}

		public override TLType TypeId { get { return TLType.ChatInvite; } }

		public override void Read(TLBinaryReader from, TLType type = TLType.ChatInvite)
		{
			Flags = (Flag)from.ReadInt32();
			Title = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x93E99B60);
			to.Write((Int32)Flags);
			to.Write(Title);
		}
	}
}