// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLChannelFull : TLChatFullBase, ITLReadMaxId 
	{
		[Flags]
		public enum Flag : Int32
		{
			CanViewParticipants = (1 << 3),
			CanSetUsername = (1 << 6),
			ParticipantsCount = (1 << 0),
			AdminsCount = (1 << 1),
			KickedCount = (1 << 2),
			MigratedFromChatId = (1 << 4),
			MigratedFromMaxId = (1 << 4),
			PinnedMsgId = (1 << 5),
		}

		public bool IsCanViewParticipants { get { return Flags.HasFlag(Flag.CanViewParticipants); } set { Flags = value ? (Flags | Flag.CanViewParticipants) : (Flags & ~Flag.CanViewParticipants); } }
		public bool IsCanSetUsername { get { return Flags.HasFlag(Flag.CanSetUsername); } set { Flags = value ? (Flags | Flag.CanSetUsername) : (Flags & ~Flag.CanSetUsername); } }
		public bool HasParticipantsCount { get { return Flags.HasFlag(Flag.ParticipantsCount); } set { Flags = value ? (Flags | Flag.ParticipantsCount) : (Flags & ~Flag.ParticipantsCount); } }
		public bool HasAdminsCount { get { return Flags.HasFlag(Flag.AdminsCount); } set { Flags = value ? (Flags | Flag.AdminsCount) : (Flags & ~Flag.AdminsCount); } }
		public bool HasKickedCount { get { return Flags.HasFlag(Flag.KickedCount); } set { Flags = value ? (Flags | Flag.KickedCount) : (Flags & ~Flag.KickedCount); } }
		public bool HasMigratedFromChatId { get { return Flags.HasFlag(Flag.MigratedFromChatId); } set { Flags = value ? (Flags | Flag.MigratedFromChatId) : (Flags & ~Flag.MigratedFromChatId); } }
		public bool HasMigratedFromMaxId { get { return Flags.HasFlag(Flag.MigratedFromMaxId); } set { Flags = value ? (Flags | Flag.MigratedFromMaxId) : (Flags & ~Flag.MigratedFromMaxId); } }
		public bool HasPinnedMsgId { get { return Flags.HasFlag(Flag.PinnedMsgId); } set { Flags = value ? (Flags | Flag.PinnedMsgId) : (Flags & ~Flag.PinnedMsgId); } }

		public Flag Flags { get; set; }
		public String About { get; set; }
		public Int32? ParticipantsCount { get; set; }
		public Int32? AdminsCount { get; set; }
		public Int32? KickedCount { get; set; }
		public Int32 ReadInboxMaxId { get; set; }
		public Int32 ReadOutboxMaxId { get; set; }
		public Int32 UnreadCount { get; set; }
		public Int32? MigratedFromChatId { get; set; }
		public Int32? MigratedFromMaxId { get; set; }
		public Int32? PinnedMsgId { get; set; }

		public TLChannelFull() { }
		public TLChannelFull(TLBinaryReader from, bool cache = false)
		{
			Read(from, cache);
		}

		public override TLType TypeId { get { return TLType.ChannelFull; } }

		public override void Read(TLBinaryReader from, bool cache = false)
		{
			Flags = (Flag)from.ReadInt32();
			Id = from.ReadInt32();
			About = from.ReadString();
			if (HasParticipantsCount) { ParticipantsCount = from.ReadInt32(); }
			if (HasAdminsCount) { AdminsCount = from.ReadInt32(); }
			if (HasKickedCount) { KickedCount = from.ReadInt32(); }
			ReadInboxMaxId = from.ReadInt32();
			ReadOutboxMaxId = from.ReadInt32();
			UnreadCount = from.ReadInt32();
			ChatPhoto = TLFactory.Read<TLPhotoBase>(from, cache);
			NotifySettings = TLFactory.Read<TLPeerNotifySettingsBase>(from, cache);
			ExportedInvite = TLFactory.Read<TLExportedChatInviteBase>(from, cache);
			BotInfo = TLFactory.Read<TLVector<TLBotInfo>>(from, cache);
			if (HasMigratedFromChatId) { MigratedFromChatId = from.ReadInt32(); }
			if (HasMigratedFromMaxId) { MigratedFromMaxId = from.ReadInt32(); }
			if (HasPinnedMsgId) { PinnedMsgId = from.ReadInt32(); }
			if (cache) ReadFromCache(from);
		}

		public override void Write(TLBinaryWriter to, bool cache = false)
		{
			to.Write(0xC3D5512F);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(About);
			if (HasParticipantsCount) to.Write(ParticipantsCount.Value);
			if (HasAdminsCount) to.Write(AdminsCount.Value);
			if (HasKickedCount) to.Write(KickedCount.Value);
			to.Write(ReadInboxMaxId);
			to.Write(ReadOutboxMaxId);
			to.Write(UnreadCount);
			to.WriteObject(ChatPhoto, cache);
			to.WriteObject(NotifySettings, cache);
			to.WriteObject(ExportedInvite, cache);
			to.WriteObject(BotInfo, cache);
			if (HasMigratedFromChatId) to.Write(MigratedFromChatId.Value);
			if (HasMigratedFromMaxId) to.Write(MigratedFromMaxId.Value);
			if (HasPinnedMsgId) to.Write(PinnedMsgId.Value);
			if (cache) WriteToCache(to);
		}
	}
}