// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLChatParticipantsForbidden : TLChatParticipantsBase 
	{
		[Flags]
		public enum Flag : Int32
		{
			SelfParticipant = (1 << 0),
		}

		public bool HasSelfParticipant { get { return Flags.HasFlag(Flag.SelfParticipant); } set { Flags = value ? (Flags | Flag.SelfParticipant) : (Flags & ~Flag.SelfParticipant); } }

		public Flag Flags { get; set; }
		public TLChatParticipantBase SelfParticipant { get; set; }

		public TLChatParticipantsForbidden() { }
		public TLChatParticipantsForbidden(TLBinaryReader from, bool cache = false)
		{
			Read(from, cache);
		}

		public override TLType TypeId { get { return TLType.ChatParticipantsForbidden; } }

		public override void Read(TLBinaryReader from, bool cache = false)
		{
			Flags = (Flag)from.ReadInt32();
			ChatId = from.ReadInt32();
			if (HasSelfParticipant) SelfParticipant = TLFactory.Read<TLChatParticipantBase>(from, cache);
			if (cache) ReadFromCache(from);
		}

		public override void Write(TLBinaryWriter to, bool cache = false)
		{
			UpdateFlags();

			to.Write(0xFC900C2B);
			to.Write((Int32)Flags);
			to.Write(ChatId);
			if (HasSelfParticipant) to.WriteObject(SelfParticipant, cache);
			if (cache) WriteToCache(to);
		}

		private void UpdateFlags()
		{
			HasSelfParticipant = SelfParticipant != null;
		}
	}
}