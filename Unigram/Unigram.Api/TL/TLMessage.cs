// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLMessage : TLMessageBase 
	{
		[Flags]
		public enum Flag : int
		{
			Out = (1 << 1),
			Mentioned = (1 << 4),
			MediaUnread = (1 << 5),
			Silent = (1 << 13),
			Post = (1 << 14),
			FromId = (1 << 8),
			FwdFrom = (1 << 2),
			ViaBotId = (1 << 11),
			ReplyToMsgId = (1 << 3),
			Media = (1 << 9),
			ReplyMarkup = (1 << 6),
			Entities = (1 << 7),
			Views = (1 << 10),
			EditDate = (1 << 15),
		}

		public bool IsOut { get { return Flags.HasFlag(Flag.Out); } set { Flags = value ? (Flags | Flag.Out) : (Flags & ~Flag.Out); } }
		public bool IsMentioned { get { return Flags.HasFlag(Flag.Mentioned); } set { Flags = value ? (Flags | Flag.Mentioned) : (Flags & ~Flag.Mentioned); } }
		public bool IsMediaUnread { get { return Flags.HasFlag(Flag.MediaUnread); } set { Flags = value ? (Flags | Flag.MediaUnread) : (Flags & ~Flag.MediaUnread); } }
		public bool IsSilent { get { return Flags.HasFlag(Flag.Silent); } set { Flags = value ? (Flags | Flag.Silent) : (Flags & ~Flag.Silent); } }
		public bool IsPost { get { return Flags.HasFlag(Flag.Post); } set { Flags = value ? (Flags | Flag.Post) : (Flags & ~Flag.Post); } }
		public bool HasFromId { get { return Flags.HasFlag(Flag.FromId); } set { Flags = value ? (Flags | Flag.FromId) : (Flags & ~Flag.FromId); } }
		public bool HasFwdFrom { get { return Flags.HasFlag(Flag.FwdFrom); } set { Flags = value ? (Flags | Flag.FwdFrom) : (Flags & ~Flag.FwdFrom); } }
		public bool HasViaBotId { get { return Flags.HasFlag(Flag.ViaBotId); } set { Flags = value ? (Flags | Flag.ViaBotId) : (Flags & ~Flag.ViaBotId); } }
		public bool HasReplyToMsgId { get { return Flags.HasFlag(Flag.ReplyToMsgId); } set { Flags = value ? (Flags | Flag.ReplyToMsgId) : (Flags & ~Flag.ReplyToMsgId); } }
		public bool HasMedia { get { return Flags.HasFlag(Flag.Media); } set { Flags = value ? (Flags | Flag.Media) : (Flags & ~Flag.Media); } }
		public bool HasReplyMarkup { get { return Flags.HasFlag(Flag.ReplyMarkup); } set { Flags = value ? (Flags | Flag.ReplyMarkup) : (Flags & ~Flag.ReplyMarkup); } }
		public bool HasEntities { get { return Flags.HasFlag(Flag.Entities); } set { Flags = value ? (Flags | Flag.Entities) : (Flags & ~Flag.Entities); } }
		public bool HasViews { get { return Flags.HasFlag(Flag.Views); } set { Flags = value ? (Flags | Flag.Views) : (Flags & ~Flag.Views); } }
		public bool HasEditDate { get { return Flags.HasFlag(Flag.EditDate); } set { Flags = value ? (Flags | Flag.EditDate) : (Flags & ~Flag.EditDate); } }

		public Flag Flags { get; set; }
		public TLMessageFwdHeader FwdFrom { get; set; }
		public Int32? ViaBotId { get; set; }
		public String Message { get; set; }
		public TLMessageMediaBase Media { get; set; }
		public TLReplyMarkupBase ReplyMarkup { get; set; }
		public TLVector<TLMessageEntityBase> Entities { get; set; }
		public Int32? Views { get; set; }
		public Int32? EditDate { get; set; }

		public TLMessage() { }
		public TLMessage(TLBinaryReader from, TLType type = TLType.Message)
		{
			Read(from, type);
		}

		public override TLType TypeId { get { return TLType.Message; } }

		public override void Read(TLBinaryReader from, TLType type = TLType.Message)
		{
			Flags = (Flag)from.ReadInt32();
			Id = from.ReadInt32();
			if (HasFromId) { FromId = from.ReadInt32(); }
			ToId = TLFactory.Read<TLPeerBase>(from);
			if (HasFwdFrom) { FwdFrom = TLFactory.Read<TLMessageFwdHeader>(from); }
			if (HasViaBotId) { ViaBotId = from.ReadInt32(); }
			if (HasReplyToMsgId) { ReplyToMsgId = from.ReadInt32(); }
			Date = from.ReadInt32();
			Message = from.ReadString();
			if (HasMedia) { Media = TLFactory.Read<TLMessageMediaBase>(from); }
			if (HasReplyMarkup) { ReplyMarkup = TLFactory.Read<TLReplyMarkupBase>(from); }
			if (HasEntities) { Entities = TLFactory.Read<TLVector<TLMessageEntityBase>>(from); }
			if (HasViews) { Views = from.ReadInt32(); }
			if (HasEditDate) { EditDate = from.ReadInt32(); }
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xC09BE45F);
			to.Write((Int32)Flags);
			to.Write(Id);
			if (HasFromId) to.Write(FromId.Value);
			to.WriteObject(ToId);
			if (HasFwdFrom) to.WriteObject(FwdFrom);
			if (HasViaBotId) to.Write(ViaBotId.Value);
			if (HasReplyToMsgId) to.Write(ReplyToMsgId.Value);
			to.Write(Date);
			to.Write(Message);
			if (HasMedia) to.WriteObject(Media);
			if (HasReplyMarkup) to.WriteObject(ReplyMarkup);
			if (HasEntities) to.WriteObject(Entities);
			if (HasViews) to.Write(Views.Value);
			if (HasEditDate) to.Write(EditDate.Value);
		}
	}
}