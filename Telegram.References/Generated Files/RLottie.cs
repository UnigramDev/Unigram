//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.0.3.230608.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace RLottie
{
    [global::WinRT.WindowsRuntimeType("RLottie")]public enum FitzModifier : int
    {
        None = unchecked((int)0),
        Type12 = unchecked((int)0x1),
        Type3 = unchecked((int)0x2),
        Type4 = unchecked((int)0x3),
        Type5 = unchecked((int)0x4),
        Type6 = unchecked((int)0x5),
    }
    [global::WinRT.WindowsRuntimeType("RLottie")][Guid("A95D130D-BEAF-5E3D-98C2-289A6B70FFDD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.RLottie.ILottieAnimation))]
    internal interface ILottieAnimation
    {
        void SetColor(global::Windows.UI.Color color);
        [global::Windows.Foundation.Metadata.DefaultOverload]
        [global::Windows.Foundation.Metadata.Overload(@"RenderSync")]
        void RenderSync(global::Windows.Storage.Streams.IBuffer bitmap, int frame);
        [global::Windows.Foundation.Metadata.Overload(@"RenderSync2")]
        void RenderSync(string filePath, int frame);
        void Cache();
        double FrameRate { get; }
        bool IsCaching { get; }
        bool IsReadyToCache { get; }
        int PixelHeight { get; }
        int PixelWidth { get; }
        int TotalFrame { get; }
    }
    [global::WinRT.WindowsRuntimeType("RLottie")][Guid("5F83F98F-479C-5241-845E-12B99EFA37A3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.RLottie.ILottieAnimationStatics))]
    internal interface ILottieAnimationStatics
    {
        [global::Windows.Foundation.Metadata.Overload(@"LoadFromFile")]
        LottieAnimation LoadFromFile(string filePath, int pixelWidth, int pixelHeight, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement);
        [global::Windows.Foundation.Metadata.Overload(@"LoadFromFile2")]
        LottieAnimation LoadFromFile(string filePath, int pixelWidth, int pixelHeight, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement, FitzModifier modifier);
        [global::Windows.Foundation.Metadata.Overload(@"LoadFromData")]
        LottieAnimation LoadFromData(string jsonData, int pixelWidth, int pixelHeight, string cacheKey, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement);
        [global::Windows.Foundation.Metadata.Overload(@"LoadFromData2")]
        LottieAnimation LoadFromData(string jsonData, int pixelWidth, int pixelHeight, string cacheKey, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement, FitzModifier modifier);
    }
    [global::WinRT.WindowsRuntimeType("RLottie")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.RLottie.LottieAnimation))]
    [global::WinRT.ProjectedRuntimeClass(typeof(ILottieAnimation))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    public sealed class LottieAnimation : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LottieAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;

        private volatile global::System.IDisposable _lazy_global__System_IDisposable;
        private global::System.IDisposable Make__lazy_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _lazy_global__System_IDisposable, (global::System.IDisposable)(object)new SingleInterfaceOptimizedObject(typeof(global::System.IDisposable), _inner ?? ((IWinRTObject)this).NativeObject), null);
            return _lazy_global__System_IDisposable;
        }



        private IObjectReference _objRef_global__RLottie_ILottieAnimation => _inner;
        private ILottieAnimation _default => null;

        public static I As<I>() => ActivationFactory<LottieAnimation>.AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__RLottie_ILottieAnimationStatics;
        private static IObjectReference Make___objRef_global__RLottie_ILottieAnimationStatics()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__RLottie_ILottieAnimationStatics, ActivationFactory<LottieAnimation>.As(GuidGenerator.GetIID(typeof(ILottieAnimationStatics).GetHelperType())), null);
            return ___objRef_global__RLottie_ILottieAnimationStatics;
        }
        private static IObjectReference _objRef_global__RLottie_ILottieAnimationStatics => ___objRef_global__RLottie_ILottieAnimationStatics ?? Make___objRef_global__RLottie_ILottieAnimationStatics();



        public static LottieAnimation LoadFromFile(string filePath, int pixelWidth, int pixelHeight, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement) => global::ABI.RLottie.ILottieAnimationStaticsMethods.LoadFromFile(_objRef_global__RLottie_ILottieAnimationStatics, filePath, pixelWidth, pixelHeight, precache, colorReplacement);

        public static LottieAnimation LoadFromFile(string filePath, int pixelWidth, int pixelHeight, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement, FitzModifier modifier) => global::ABI.RLottie.ILottieAnimationStaticsMethods.LoadFromFile(_objRef_global__RLottie_ILottieAnimationStatics, filePath, pixelWidth, pixelHeight, precache, colorReplacement, modifier);

        public static LottieAnimation LoadFromData(string jsonData, int pixelWidth, int pixelHeight, string cacheKey, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement) => global::ABI.RLottie.ILottieAnimationStaticsMethods.LoadFromData(_objRef_global__RLottie_ILottieAnimationStatics, jsonData, pixelWidth, pixelHeight, cacheKey, precache, colorReplacement);

        public static LottieAnimation LoadFromData(string jsonData, int pixelWidth, int pixelHeight, string cacheKey, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement, FitzModifier modifier) => global::ABI.RLottie.ILottieAnimationStaticsMethods.LoadFromData(_objRef_global__RLottie_ILottieAnimationStatics, jsonData, pixelWidth, pixelHeight, cacheKey, precache, colorReplacement, modifier);

        public static LottieAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LottieAnimation>.FromAbi(thisPtr);
        }

        internal LottieAnimation(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(ILottieAnimation).GetHelperType()));

        }

        public static bool operator ==(LottieAnimation x, LottieAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LottieAnimation x, LottieAnimation y) => !(x == y);
        public bool Equals(LottieAnimation other) => this == other;
        public override bool Equals(object obj) => obj is LottieAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void SetColor(global::Windows.UI.Color color) => global::ABI.RLottie.ILottieAnimationMethods.SetColor(_objRef_global__RLottie_ILottieAnimation, color);

        public void RenderSync(global::Windows.Storage.Streams.IBuffer bitmap, int frame) => global::ABI.RLottie.ILottieAnimationMethods.RenderSync(_objRef_global__RLottie_ILottieAnimation, bitmap, frame);

        public void RenderSync(string filePath, int frame) => global::ABI.RLottie.ILottieAnimationMethods.RenderSync(_objRef_global__RLottie_ILottieAnimation, filePath, frame);

        public void Cache() => global::ABI.RLottie.ILottieAnimationMethods.Cache(_objRef_global__RLottie_ILottieAnimation);

        private global::System.IDisposable AsInternal(InterfaceTag<global::System.IDisposable> _) => _lazy_global__System_IDisposable ?? Make__lazy_global__System_IDisposable();

        public void Dispose() => AsInternal(new InterfaceTag<global::System.IDisposable>()).Dispose();

        public double FrameRate => global::ABI.RLottie.ILottieAnimationMethods.get_FrameRate(_objRef_global__RLottie_ILottieAnimation);

        public bool IsCaching => global::ABI.RLottie.ILottieAnimationMethods.get_IsCaching(_objRef_global__RLottie_ILottieAnimation);

        public bool IsReadyToCache => global::ABI.RLottie.ILottieAnimationMethods.get_IsReadyToCache(_objRef_global__RLottie_ILottieAnimation);

        public int PixelHeight => global::ABI.RLottie.ILottieAnimationMethods.get_PixelHeight(_objRef_global__RLottie_ILottieAnimation);

        public int PixelWidth => global::ABI.RLottie.ILottieAnimationMethods.get_PixelWidth(_objRef_global__RLottie_ILottieAnimation);

        public int TotalFrame => global::ABI.RLottie.ILottieAnimationMethods.get_TotalFrame(_objRef_global__RLottie_ILottieAnimation);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.InterfaceIIDs.IInspectable_IID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.RLottie
{
    internal static class ILottieAnimationMethods
    {

        public static unsafe void SetColor(IObjectReference _obj, global::Windows.UI.Color color)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, int>**)ThisPtr)[6](ThisPtr, color));
        }

        public static unsafe void RenderSync(IObjectReference _obj, global::Windows.Storage.Streams.IBuffer bitmap, int frame)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bitmap = default;
            try
            {
                __bitmap = MarshalInterface<global::Windows.Storage.Streams.IBuffer>.CreateMarshaler2(bitmap);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__bitmap), frame));
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bitmap);
            }
        }

        public static unsafe void RenderSync(IObjectReference _obj, string filePath, int frame)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __filePath = new(filePath);
            fixed(void* ___filePath = __filePath)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __filePath), frame));
            }
        }

        public static unsafe void Cache(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[9](ThisPtr));
        }
        public static unsafe double get_FrameRate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out double, int>**)ThisPtr)[10](ThisPtr, out __retval));
            return __retval;
        }

        public static unsafe bool get_IsCaching(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[14](ThisPtr, out __retval));
            return __retval != 0;
        }

        public static unsafe bool get_IsReadyToCache(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[15](ThisPtr, out __retval));
            return __retval != 0;
        }

        public static unsafe int get_PixelHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out int, int>**)ThisPtr)[13](ThisPtr, out __retval));
            return __retval;
        }

        public static unsafe int get_PixelWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out int, int>**)ThisPtr)[12](ThisPtr, out __retval));
            return __retval;
        }

        public static unsafe int get_TotalFrame(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out int, int>**)ThisPtr)[11](ThisPtr, out __retval));
            return __retval;
        }


    }
    [Guid("A95D130D-BEAF-5E3D-98C2-289A6B70FFDD")]
    internal interface ILottieAnimation : global::RLottie.ILottieAnimation
    {
    }
    internal static class ILottieAnimationStaticsMethods
    {

        public static unsafe global::RLottie.LottieAnimation LoadFromFile(IObjectReference _obj, string filePath, int pixelWidth, int pixelHeight, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __colorReplacement = default;
            IntPtr __retval = default;
            try
            {
                __colorReplacement = MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<int, int>>.CreateMarshaler2(colorReplacement);
                MarshalString.Pinnable __filePath = new(filePath);
                fixed(void* ___filePath = __filePath)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, int, byte, IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __filePath), pixelWidth, pixelHeight, (byte)(precache ? 1 : 0), MarshalInspectable<object>.GetAbi(__colorReplacement), out __retval));
                    return global::ABI.RLottie.LottieAnimation.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__colorReplacement);
                global::ABI.RLottie.LottieAnimation.DisposeAbi(__retval);
            }
        }

        public static unsafe global::RLottie.LottieAnimation LoadFromFile(IObjectReference _obj, string filePath, int pixelWidth, int pixelHeight, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement, global::RLottie.FitzModifier modifier)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __colorReplacement = default;
            IntPtr __retval = default;
            try
            {
                __colorReplacement = MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<int, int>>.CreateMarshaler2(colorReplacement);
                MarshalString.Pinnable __filePath = new(filePath);
                fixed(void* ___filePath = __filePath)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, int, byte, IntPtr, global::RLottie.FitzModifier, out IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __filePath), pixelWidth, pixelHeight, (byte)(precache ? 1 : 0), MarshalInspectable<object>.GetAbi(__colorReplacement), modifier, out __retval));
                    return global::ABI.RLottie.LottieAnimation.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__colorReplacement);
                global::ABI.RLottie.LottieAnimation.DisposeAbi(__retval);
            }
        }

        public static unsafe global::RLottie.LottieAnimation LoadFromData(IObjectReference _obj, string jsonData, int pixelWidth, int pixelHeight, string cacheKey, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __colorReplacement = default;
            IntPtr __retval = default;
            try
            {
                __colorReplacement = MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<int, int>>.CreateMarshaler2(colorReplacement);
                MarshalString.Pinnable __jsonData = new(jsonData);
                MarshalString.Pinnable __cacheKey = new(cacheKey);
                fixed(void* ___jsonData = __jsonData, ___cacheKey = __cacheKey)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, int, IntPtr, byte, IntPtr, out IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __jsonData), pixelWidth, pixelHeight, MarshalString.GetAbi(ref __cacheKey), (byte)(precache ? 1 : 0), MarshalInspectable<object>.GetAbi(__colorReplacement), out __retval));
                    return global::ABI.RLottie.LottieAnimation.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__colorReplacement);
                global::ABI.RLottie.LottieAnimation.DisposeAbi(__retval);
            }
        }

        public static unsafe global::RLottie.LottieAnimation LoadFromData(IObjectReference _obj, string jsonData, int pixelWidth, int pixelHeight, string cacheKey, bool precache, global::System.Collections.Generic.IReadOnlyDictionary<int, int> colorReplacement, global::RLottie.FitzModifier modifier)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __colorReplacement = default;
            IntPtr __retval = default;
            try
            {
                __colorReplacement = MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<int, int>>.CreateMarshaler2(colorReplacement);
                MarshalString.Pinnable __jsonData = new(jsonData);
                MarshalString.Pinnable __cacheKey = new(cacheKey);
                fixed(void* ___jsonData = __jsonData, ___cacheKey = __cacheKey)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, int, IntPtr, byte, IntPtr, global::RLottie.FitzModifier, out IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __jsonData), pixelWidth, pixelHeight, MarshalString.GetAbi(ref __cacheKey), (byte)(precache ? 1 : 0), MarshalInspectable<object>.GetAbi(__colorReplacement), modifier, out __retval));
                    return global::ABI.RLottie.LottieAnimation.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__colorReplacement);
                global::ABI.RLottie.LottieAnimation.DisposeAbi(__retval);
            }
        }

    }
    [Guid("5F83F98F-479C-5241-845E-12B99EFA37A3")]
    internal interface ILottieAnimationStatics : global::RLottie.ILottieAnimationStatics
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LottieAnimation
    {

        public static IObjectReference CreateMarshaler(global::RLottie.LottieAnimation obj) => obj is null ? null : MarshalInspectable<global::RLottie.LottieAnimation>.CreateMarshaler<IUnknownVftbl>(obj, GuidGenerator.GetIID(typeof(global::RLottie.ILottieAnimation).GetHelperType()));
        public static ObjectReferenceValue CreateMarshaler2(global::RLottie.LottieAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, GuidGenerator.GetIID(typeof(global::RLottie.ILottieAnimation).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::RLottie.LottieAnimation FromAbi(IntPtr thisPtr) => global::RLottie.LottieAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::RLottie.LottieAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::RLottie.LottieAnimation>.MarshalerArray CreateMarshalerArray(global::RLottie.LottieAnimation[] array) => MarshalInterfaceHelper<global::RLottie.LottieAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::RLottie.LottieAnimation>.GetAbiArray(box);
        public static unsafe global::RLottie.LottieAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::RLottie.LottieAnimation>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::RLottie.LottieAnimation[] array) => MarshalInterfaceHelper<global::RLottie.LottieAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::RLottie.LottieAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::RLottie.LottieAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
}
#pragma warning restore CA1416
