// --------------------------------------------------------------------------------------------------
// <auto-generatedInfo>
// 	This code was generated by TdParseOptions (http://github.com/UnigramDev/UnigramUtils/TdParseOptions)
// 
// 	Generated: 08/16/2024 17:35:17
// </auto-generatedInfo>
// --------------------------------------------------------------------------------------------------
using System.Collections.Generic;
using Telegram.Td.Api;

namespace Telegram.Services
{
    public interface IOptionsService
    {
        IReadOnlyDictionary<string, OptionValue> Values { get; }

        T GetValue<T>(string key);
        bool TryGetValue<T>(string key, out T value);

        void Clear();

        void Update(string name, OptionValue value);



        /// <summary>
        /// TBD
        /// </summary>
        /// <value>1000_star_to_usd_rate</value>
        long ThousandStarToUsdRate { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of active stories posted by the current user
        /// </summary>
        /// <value>active_story_count_max</value>
        long ActiveStoryCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of added shareable chat folders for the current user
        /// </summary>
        /// <value>added_shareable_chat_folder_count_max</value>
        long AddedShareableChatFolderCountMax { get; }

        /// <summary>
        /// If true, text entities will be automatically parsed in all inputMessageText objects
        /// </summary>
        /// <value>always_parse_markdown</value>
        bool AlwaysParseMarkdown { get; set; }

        /// <summary>
        /// Username of a bot which can be used in inline mode for animations search
        /// </summary>
        /// <value>animation_search_bot_username</value>
        string AnimationSearchBotUsername { get; }

        /// <summary>
        /// Since TDLib 1.8.24. User identifier of the Telegram Anti-Spam bot
        /// </summary>
        /// <value>anti_spam_bot_user_id</value>
        long AntiSpamBotUserId { get; }

        /// <summary>
        /// An authentication token to be used on subsequent authorizations
        /// </summary>
        /// <value>authentication_token</value>
        string AuthenticationToken { get; }

        /// <summary>
        /// Point in time (Unix timestamp) when authorization was received
        /// </summary>
        /// <value>authorization_date</value>
        long AuthorizationDate { get; }

        /// <summary>
        /// Maximum number of members in a basic group
        /// </summary>
        /// <value>basic_group_size_max</value>
        long BasicGroupSizeMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum allowed length of the current user's bio
        /// </summary>
        /// <value>bio_length_max</value>
        long BioLengthMax { get; }

        /// <summary>
        /// TBD
        /// </summary>
        /// <value>bot_media_preview_count_max</value>
        long BotMediaPreviewCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.28. The maximum number of created short chat links by a Telegram Business account
        /// </summary>
        /// <value>business_chat_link_count_max</value>
        long BusinessChatLinkCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.28. The maximum allowed length of the start page message of a Telegram Business account
        /// </summary>
        /// <value>business_start_page_message_length_max</value>
        long BusinessStartPageMessageLengthMax { get; }

        /// <summary>
        /// Since TDLib 1.8.28. The maximum allowed length of the start page title of a Telegram Business account
        /// </summary>
        /// <value>business_start_page_title_length_max</value>
        long BusinessStartPageTitleLengthMax { get; }

        /// <summary>
        /// Maximum time to wait for call connection creation to be passed to libtgvoip
        /// </summary>
        /// <value>call_connect_timeout_ms</value>
        long CallConnectTimeoutMs { get; }

        /// <summary>
        /// Maximum time to wait for call packet delivery to be passed to libtgvoip
        /// </summary>
        /// <value>call_packet_timeout_ms</value>
        long CallPacketTimeoutMs { get; }

        /// <summary>
        /// If true, the option "archive_and_mute_new_chats_from_unknown_users" can be changed
        /// </summary>
        /// <value>can_archive_and_mute_new_chats_from_unknown_users</value>
        bool CanArchiveAndMuteNewChatsFromUnknownUsers { get; }

        /// <summary>
        /// TBD
        /// </summary>
        /// <value>can_gift_stars</value>
        bool CanGiftStars { get; }

        /// <summary>
        /// If true, the option "ignore_sensitive_content_restrictions" can be changed
        /// </summary>
        /// <value>can_ignore_sensitive_content_restrictions</value>
        bool CanIgnoreSensitiveContentRestrictions { get; }

        /// <summary>
        /// TBD
        /// </summary>
        /// <value>can_preload_weather</value>
        bool CanPreloadWeather { get; }

        /// <summary>
        /// Since TDLib 1.8.28. If true, then the current user can change privacy settings for new chats
        /// </summary>
        /// <value>can_set_new_chat_privacy_settings</value>
        bool CanSetNewChatPrivacySettings { get; }

        /// <summary>
        /// Since TDLib 1.8.24. If true, then the current user can use text entities in story captions
        /// </summary>
        /// <value>can_use_text_entities_in_story_caption</value>
        bool CanUseTextEntitiesInStoryCaption { get; }

        /// <summary>
        /// Since TDLib 1.8.28. If true, then revenue from sponsored messages in chats can be withdrawn
        /// </summary>
        /// <value>can_withdraw_chat_revenue</value>
        bool CanWithdrawChatRevenue { get; }

        /// <summary>
        /// Identifier of the bot which is shown as the sender of messages sent on behalf of channels when viewed from an outdated client
        /// </summary>
        /// <value>channel_bot_user_id</value>
        long ChannelBotUserId { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of manually chosen reactions for a chat
        /// </summary>
        /// <value>chat_available_reaction_count_max</value>
        long ChatAvailableReactionCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum boost level available to a chat
        /// </summary>
        /// <value>chat_boost_level_max</value>
        long ChatBoostLevelMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of always included or excluded chats in a chat folder for the current user
        /// </summary>
        /// <value>chat_folder_chosen_chat_count_max</value>
        long ChatFolderChosenChatCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of chat folders that the current user can have
        /// </summary>
        /// <value>chat_folder_count_max</value>
        long ChatFolderCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of shareable chat folders with owned invite links
        /// </summary>
        /// <value>chat_folder_invite_link_count_max</value>
        long ChatFolderInviteLinkCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The minimum interval between calls to getChatFolderNewChats in shareable chat folders
        /// </summary>
        /// <value>chat_folder_new_chats_update_period</value>
        long ChatFolderNewChatsUpdatePeriod { get; }

        /// <summary>
        /// Since TDLib 1.8.24. If known, the hash of the source code commit that was used to build TDLib. Can be received synchronously.
        /// </summary>
        /// <value>commit_hash</value>
        string CommitHash { get; }

        /// <summary>
        /// If true, animated emoji will be disabled and shown as plain emoji
        /// </summary>
        /// <value>disable_animated_emoji</value>
        bool DisableAnimatedEmoji { get; set; }

        /// <summary>
        /// If true, notifications about the user's contacts who have joined Telegram will be disabled. User will still receive the corresponding message in the private chat. getOption needs to be called explicitly to fetch the latest value of the option, changed from another device
        /// </summary>
        /// <value>disable_contact_registered_notifications</value>
        bool DisableContactRegisteredNotifications { get; set; }

        /// <summary>
        /// Since TDLib 1.8.24. If true, then network statistics will be completely disabled
        /// </summary>
        /// <value>disable_network_statistics</value>
        bool DisableNetworkStatistics { get; set; }

        /// <summary>
        /// If true, persistent network statistics will be disabled, which significantly reduces disk usage
        /// </summary>
        /// <value>disable_persistent_network_statistics</value>
        bool DisablePersistentNetworkStatistics { get; set; }

        /// <summary>
        /// If true, notifications about outgoing scheduled messages that were sent will be disabled
        /// </summary>
        /// <value>disable_sent_scheduled_message_notifications</value>
        bool DisableSentScheduledMessageNotifications { get; set; }

        /// <summary>
        /// If true, protection from external time adjustment will be disabled, which significantly reduces disk usage
        /// </summary>
        /// <value>disable_time_adjustment_protection</value>
        bool DisableTimeAdjustmentProtection { get; set; }

        /// <summary>
        /// If true, support for top chats and statistics collection is disabled
        /// </summary>
        /// <value>disable_top_chats</value>
        bool DisableTopChats { get; set; }

        /// <summary>
        /// Identifier of the enabled proxy
        /// </summary>
        /// <value>enabled_proxy_id</value>
        long EnabledProxyId { get; }

        /// <summary>
        /// If true, access to Telegram is likely blocked for the user
        /// </summary>
        /// <value>expect_blocking</value>
        bool ExpectBlocking { get; }

        /// <summary>
        /// Since TDLib 1.8.30. The maximum allowed length of a fact-check
        /// </summary>
        /// <value>fact_check_length_max</value>
        long FactCheckLengthMax { get; }

        /// <summary>
        /// Maximum number of favorite stickers
        /// </summary>
        /// <value>favorite_stickers_limit</value>
        long FavoriteStickersLimit { get; }

        /// <summary>
        /// Maximum number of forwarded messages per one request
        /// </summary>
        /// <value>forwarded_message_count_max</value>
        long ForwardedMessageCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. If true, then a suggestion to gift Telegram Premium needs to be shown in the attachment menu if appropriate
        /// </summary>
        /// <value>gift_premium_from_attachment_menu</value>
        bool GiftPremiumFromAttachmentMenu { get; }

        /// <summary>
        /// Since TDLib 1.8.24. If true, then a suggestion to gift Telegram Premium needs to be shown in the input field if appropriate
        /// </summary>
        /// <value>gift_premium_from_input_field</value>
        bool GiftPremiumFromInputField { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of additional chats that can be added to a giveaway
        /// </summary>
        /// <value>giveaway_additional_chat_count_max</value>
        long GiveawayAdditionalChatCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The number of boosts that received by the channel for each giveaway prize
        /// </summary>
        /// <value>giveaway_boost_count_per_premium</value>
        long GiveawayBoostCountPerPremium { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of countries that can be added to a giveaway
        /// </summary>
        /// <value>giveaway_country_count_max</value>
        long GiveawayCountryCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of additional chats that can be added to a giveaway
        /// </summary>
        /// <value>giveaway_duration_max</value>
        long GiveawayDurationMax { get; }

        /// <summary>
        /// Identifier of the bot which is shown as the sender of anonymous messages in groups when viewed from an outdated client
        /// </summary>
        /// <value>group_anonymous_bot_user_id</value>
        long GroupAnonymousBotUserId { get; }

        /// <summary>
        /// If true, allows to skip all updates received while the TDLib instance was not running. The option does nothing if the database or secret chats are used
        /// </summary>
        /// <value>ignore_background_updates</value>
        bool IgnoreBackgroundUpdates { get; set; }

        /// <summary>
        /// If true, the disable_notification value specified in the request will be always used instead of the default value
        /// </summary>
        /// <value>ignore_default_disable_notification</value>
        bool IgnoreDefaultDisableNotification { get; set; }

        /// <summary>
        /// Since TDLib 1.8.24. If true, document file names will be ignored and numerical names will be used instead
        /// </summary>
        /// <value>ignore_file_names</value>
        bool IgnoreFileNames { get; set; }

        /// <summary>
        /// If true, prevents file thumbnails sent by the server along with messages from being saved on the disk
        /// </summary>
        /// <value>ignore_inline_thumbnails</value>
        bool IgnoreInlineThumbnails { get; set; }

        /// <summary>
        /// If true, chat and message restrictions specific to the currently used operating system will be ignored
        /// </summary>
        /// <value>ignore_platform_restrictions</value>
        bool IgnorePlatformRestrictions { get; set; }

        /// <summary>
        /// If true, sensitive content will be shown on all user devices. getOption needs to be called explicitly to fetch the latest value of the option, changed from another device
        /// </summary>
        /// <value>ignore_sensitive_content_restrictions</value>
        bool IgnoreSensitiveContentRestrictions { get; set; }

        /// <summary>
        /// If true, other users will be allowed to see the current user's location. getOption needs to be called explicitly to fetch the latest value of the option, changed from another device
        /// </summary>
        /// <value>is_location_visible</value>
        bool IsLocationVisible { get; set; }

        /// <summary>
        /// Since TDLib 1.8.24. If true, then the current user subscribed to Telegram Premium
        /// </summary>
        /// <value>is_premium</value>
        bool IsPremium { get; }

        /// <summary>
        /// Since TDLib 1.8.24. If true, then the current user can subscribe to Telegram Premium. Otherwise, all premium-related features must be hidden
        /// </summary>
        /// <value>is_premium_available</value>
        bool IsPremiumAvailable { get; }

        /// <summary>
        /// Path to a database for storing language pack strings, so that this database can be shared between different accounts. By default, language pack strings are stored only in memory. Changes of value of this option will be applied only after TDLib restart, so it should be set before call to setTdlibParameters.
        /// </summary>
        /// <value>language_pack_database_path</value>
        string LanguagePackDatabasePath { get; set; }

        /// <summary>
        /// Identifier of the currently used language pack from the current localization target
        /// </summary>
        /// <value>language_pack_id</value>
        string LanguagePackId { get; set; }

        /// <summary>
        /// Name for the current localization target (currently supported: "android", "android_x", "ios", "macos" and "tdesktop")
        /// </summary>
        /// <value>localization_target</value>
        string LocalizationTarget { get; set; }

        /// <summary>
        /// Maximum length of a message caption
        /// </summary>
        /// <value>message_caption_length_max</value>
        long MessageCaptionLengthMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum length of quote from the replied message
        /// </summary>
        /// <value>message_reply_quote_length_max</value>
        long MessageReplyQuoteLengthMax { get; }

        /// <summary>
        /// Maximum length of a message text
        /// </summary>
        /// <value>message_text_length_max</value>
        long MessageTextLengthMax { get; }

        /// <summary>
        /// The maximum time messages are stored in memory before they are unloaded, 60-86400; in seconds. Defaults to 60 for users and 1800 for bots
        /// </summary>
        /// <value>message_unload_delay</value>
        long MessageUnloadDelay { get; set; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of stories that can be posted per month by the current user
        /// </summary>
        /// <value>monthly_sent_story_count_max</value>
        long MonthlySentStoryCountMax { get; }

        /// <summary>
        /// Identifier of the current user
        /// </summary>
        /// <value>my_id</value>
        long MyId { get; }

        /// <summary>
        /// Maximum number of notification groups to be shown simultaneously, 0-25
        /// </summary>
        /// <value>notification_group_count_max</value>
        long NotificationGroupCountMax { get; set; }

        /// <summary>
        /// Maximum number of simultaneously shown notifications in a group, 1-25. Defaults to 10
        /// </summary>
        /// <value>notification_group_size_max</value>
        long NotificationGroupSizeMax { get; set; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of saved notification sounds
        /// </summary>
        /// <value>notification_sound_count_max</value>
        long NotificationSoundCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum duration of an audio that can be used as a notification sound
        /// </summary>
        /// <value>notification_sound_duration_max</value>
        long NotificationSoundDurationMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum size of the audio file that can be used as a notification sound
        /// </summary>
        /// <value>notification_sound_size_max</value>
        long NotificationSoundSizeMax { get; }

        /// <summary>
        /// Online status of the current user
        /// </summary>
        /// <value>online</value>
        bool Online { get; set; }

        /// <summary>
        /// Since TDLib 1.8.32. The maximum price of a paid post in Telegram Stars
        /// </summary>
        /// <value>paid_media_message_star_count_max</value>
        long PaidMediaMessageStarCountMax { get; }

        /// <summary>
        /// TBD
        /// </summary>
        /// <value>paid_reaction_star_count_max</value>
        long PaidReactionStarCountMax { get; }

        /// <summary>
        /// Username of a bot which can be used in inline mode for photos search
        /// </summary>
        /// <value>photo_search_bot_username</value>
        string PhotoSearchBotUsername { get; }

        /// <summary>
        /// Maximum number of pinned cloud chats in the Archive chat list for the current user. The same amount of secret chats can be pinned locally
        /// </summary>
        /// <value>pinned_archived_chat_count_max</value>
        long PinnedArchivedChatCountMax { get; }

        /// <summary>
        /// Maximum number of pinned cloud chats in the Main chat list for the current user. The same amount of secret chats can be pinned locally
        /// </summary>
        /// <value>pinned_chat_count_max</value>
        long PinnedChatCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of pinned forum topics
        /// </summary>
        /// <value>pinned_forum_topic_count_max</value>
        long PinnedForumTopicCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of pinned topics in Saved Messages for the current user
        /// </summary>
        /// <value>pinned_saved_messages_topic_count_max</value>
        long PinnedSavedMessagesTopicCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.29. The maximum number of pinned stories on a chat page
        /// </summary>
        /// <value>pinned_story_count_max</value>
        long PinnedStoryCountMax { get; }

        /// <summary>
        /// If true, IPv6 addresses will be preferred over IPv4 addresses
        /// </summary>
        /// <value>prefer_ipv6</value>
        bool PreferIpv6 { get; set; }

        /// <summary>
        /// Since TDLib 1.8.28. Approximate number of times file download speed will increase if the user subscribes to Telegram Premium
        /// </summary>
        /// <value>premium_download_speedup</value>
        long PremiumDownloadSpeedup { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The number of boosts that is obtained by gifting Telegram Premium to another user
        /// </summary>
        /// <value>premium_gift_boost_count</value>
        long PremiumGiftBoostCount { get; }

        /// <summary>
        /// Since TDLib 1.8.28. Approximate number of times file upload speed will increase if the user subscribes to Telegram Premium
        /// </summary>
        /// <value>premium_upload_speedup</value>
        long PremiumUploadSpeedup { get; }

        /// <summary>
        /// Since TDLib 1.8.24. If true, then all pinned messages will be treated as mentions even posted without notification of chat members
        /// </summary>
        /// <value>process_pinned_messages_as_mentions</value>
        bool ProcessPinnedMessagesAsMentions { get; set; }

        /// <summary>
        /// Since TDLib 1.8.28. The maximum number of quick reply shortcuts that can be created by a Telegram Business account
        /// </summary>
        /// <value>quick_reply_shortcut_count_max</value>
        long QuickReplyShortcutCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.28. The maximum number of messages that can be added to a quick reply shortcut by a Telegram Business account
        /// </summary>
        /// <value>quick_reply_shortcut_message_count_max</value>
        long QuickReplyShortcutMessageCountMax { get; }

        /// <summary>
        /// Identifier of the @replies bot
        /// </summary>
        /// <value>replies_bot_chat_id</value>
        long RepliesBotChatId { get; }

        /// <summary>
        /// Since TDLib 1.8.31. The minimum number of Telegram Stars that can be withdrawn
        /// </summary>
        /// <value>star_withdrawal_count_min</value>
        long StarWithdrawalCountMin { get; }

        /// <summary>
        /// TBD
        /// </summary>
        /// <value>storage_max_time_from_last_access</value>
        long StorageMaxTimeFromLastAccess { get; set; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum length of story caption for the current user
        /// </summary>
        /// <value>story_caption_length_max</value>
        long StoryCaptionLengthMax { get; }

        /// <summary>
        /// Since TDLib 1.8.31. The maximum number of link areas that can be added to a story by Telegram Premium users
        /// </summary>
        /// <value>story_link_area_count_max</value>
        long StoryLinkAreaCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The number of seconds that must pass between before Stealth Mode can be enabled again
        /// </summary>
        /// <value>story_stealth_mode_cooldown_period</value>
        long StoryStealthModeCooldownPeriod { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The number of seconds in the future the Stealth Mode will last
        /// </summary>
        /// <value>story_stealth_mode_future_period</value>
        long StoryStealthModeFuturePeriod { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The number of seconds in the past during which all views of stories from the current user will be hidden if Stealth Mode is enabled
        /// </summary>
        /// <value>story_stealth_mode_past_period</value>
        long StoryStealthModePastPeriod { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of suggested reaction areas that can be added to a story
        /// </summary>
        /// <value>story_suggested_reaction_area_count_max</value>
        long StorySuggestedReactionAreaCountMax { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The number of seconds after story expiration date for which story viewers still can be received
        /// </summary>
        /// <value>story_viewers_expiration_delay</value>
        long StoryViewersExpirationDelay { get; }

        /// <summary>
        /// Identifier of the language pack, suggested for the user by the server
        /// </summary>
        /// <value>suggested_language_pack_id</value>
        string SuggestedLanguagePackId { get; }

        /// <summary>
        /// Suggested bit rate for audio encoding in video notes, in kbit/s
        /// </summary>
        /// <value>suggested_video_note_audio_bitrate</value>
        long SuggestedVideoNoteAudioBitrate { get; }

        /// <summary>
        /// Suggested width and height of the video in video notes
        /// </summary>
        /// <value>suggested_video_note_length</value>
        long SuggestedVideoNoteLength { get; }

        /// <summary>
        /// Suggested bit rate for video encoding in video notes, in kbit/s
        /// </summary>
        /// <value>suggested_video_note_video_bitrate</value>
        long SuggestedVideoNoteVideoBitrate { get; }

        /// <summary>
        /// Maximum number of members in a supergroup
        /// </summary>
        /// <value>supergroup_size_max</value>
        long SupergroupSizeMax { get; }

        /// <summary>
        /// Current value of t.me URL, i.e. https://t.me/
        /// </summary>
        /// <value>t_me_url</value>
        string TMeUrl { get; }

        /// <summary>
        /// Identifier of the Telegram Service Notifications chat
        /// </summary>
        /// <value>telegram_service_notifications_chat_id</value>
        long TelegramServiceNotificationsChatId { get; }

        /// <summary>
        /// If true, the test environment is being used instead of the production environment
        /// </summary>
        /// <value>test_mode</value>
        bool TestMode { get; }

        /// <summary>
        /// An estimation of the current Unix timestamp. The option will not be updated automatically unless the difference between the previous estimation and the locally available monotonic clocks changes significantly
        /// </summary>
        /// <value>unix_time</value>
        long UnixTime { get; }

        /// <summary>
        /// TBD
        /// </summary>
        /// <value>usd_to_1000_star_rate</value>
        long UsdToThousandStarRate { get; }

        /// <summary>
        /// If true, Perfect Forward Secrecy will be enabled for interaction with the Telegram servers for cloud chats
        /// </summary>
        /// <value>use_pfs</value>
        bool UsePfs { get; set; }

        /// <summary>
        /// If true, quick acknowledgement will be enabled for outgoing messages
        /// </summary>
        /// <value>use_quick_ack</value>
        bool UseQuickAck { get; set; }

        /// <summary>
        /// If true, the background storage optimizer will be enabled
        /// </summary>
        /// <value>use_storage_optimizer</value>
        bool UseStorageOptimizer { get; set; }

        /// <summary>
        /// A UTC time offset used for splitting messages by days. The option is reset automatically on each TDLib instance launch, so it needs to be set manually only if the time offset is changed during execution.
        /// </summary>
        /// <value>utc_time_offset</value>
        long UtcTimeOffset { get; set; }

        /// <summary>
        /// Username of a bot which can be used in inline mode for venues search
        /// </summary>
        /// <value>venue_search_bot_username</value>
        string VenueSearchBotUsername { get; }

        /// <summary>
        /// TDLib version. This options is guaranteed to come before all other updates. Can be received synchronously.
        /// </summary>
        /// <value>version</value>
        string Version { get; }

        /// <summary>
        /// Since TDLib 1.8.32. A space-separated list of URL protocols that are allowed to be open by the call to web_app_open_link from Web Apps.
        /// </summary>
        /// <value>web_app_allowed_protocols</value>
        string WebAppAllowedProtocols { get; }

        /// <summary>
        /// Since TDLib 1.8.24. The maximum number of stories that can be posted per week by the current user
        /// </summary>
        /// <value>weekly_sent_story_count_max</value>
        long WeeklySentStoryCountMax { get; }

        /// <summary>
        /// TBD
        /// </summary>
        /// <value>x_system_proxy</value>
        long SystemProxy { get; set; }
    }

    public partial class OptionsService : IOptionsService
    {
        private readonly IClientService _clientService;
        private readonly Dictionary<string, OptionValue> _values = new Dictionary<string, OptionValue>();

        public OptionsService(IClientService clientService)
        {
            _clientService = clientService;
        }

        public void Update(string name, OptionValue value)
        {
            switch (name)
            {
                case "1000_star_to_usd_rate":
                    _thousandStarToUsdRate = GetValue<long>(value);
                    break;
                case "active_story_count_max":
                    _activeStoryCountMax = GetValue<long>(value);
                    break;
                case "added_shareable_chat_folder_count_max":
                    _addedShareableChatFolderCountMax = GetValue<long>(value);
                    break;
                case "always_parse_markdown":
                    _alwaysParseMarkdown = GetValue<bool>(value);
                    break;
                case "animation_search_bot_username":
                    _animationSearchBotUsername = GetValue<string>(value);
                    break;
                case "anti_spam_bot_user_id":
                    _antiSpamBotUserId = GetValue<long>(value);
                    break;
                case "authentication_token":
                    _authenticationToken = GetValue<string>(value);
                    break;
                case "authorization_date":
                    _authorizationDate = GetValue<long>(value);
                    break;
                case "basic_group_size_max":
                    _basicGroupSizeMax = GetValue<long>(value);
                    break;
                case "bio_length_max":
                    _bioLengthMax = GetValue<long>(value);
                    break;
                case "bot_media_preview_count_max":
                    _botMediaPreviewCountMax = GetValue<long>(value);
                    break;
                case "business_chat_link_count_max":
                    _businessChatLinkCountMax = GetValue<long>(value);
                    break;
                case "business_start_page_message_length_max":
                    _businessStartPageMessageLengthMax = GetValue<long>(value);
                    break;
                case "business_start_page_title_length_max":
                    _businessStartPageTitleLengthMax = GetValue<long>(value);
                    break;
                case "call_connect_timeout_ms":
                    _callConnectTimeoutMs = GetValue<long>(value);
                    break;
                case "call_packet_timeout_ms":
                    _callPacketTimeoutMs = GetValue<long>(value);
                    break;
                case "can_archive_and_mute_new_chats_from_unknown_users":
                    _canArchiveAndMuteNewChatsFromUnknownUsers = GetValue<bool>(value);
                    break;
                case "can_gift_stars":
                    _canGiftStars = GetValue<bool>(value);
                    break;
                case "can_ignore_sensitive_content_restrictions":
                    _canIgnoreSensitiveContentRestrictions = GetValue<bool>(value);
                    break;
                case "can_preload_weather":
                    _canPreloadWeather = GetValue<bool>(value);
                    break;
                case "can_set_new_chat_privacy_settings":
                    _canSetNewChatPrivacySettings = GetValue<bool>(value);
                    break;
                case "can_use_text_entities_in_story_caption":
                    _canUseTextEntitiesInStoryCaption = GetValue<bool>(value);
                    break;
                case "can_withdraw_chat_revenue":
                    _canWithdrawChatRevenue = GetValue<bool>(value);
                    break;
                case "channel_bot_user_id":
                    _channelBotUserId = GetValue<long>(value);
                    break;
                case "chat_available_reaction_count_max":
                    _chatAvailableReactionCountMax = GetValue<long>(value);
                    break;
                case "chat_boost_level_max":
                    _chatBoostLevelMax = GetValue<long>(value);
                    break;
                case "chat_folder_chosen_chat_count_max":
                    _chatFolderChosenChatCountMax = GetValue<long>(value);
                    break;
                case "chat_folder_count_max":
                    _chatFolderCountMax = GetValue<long>(value);
                    break;
                case "chat_folder_invite_link_count_max":
                    _chatFolderInviteLinkCountMax = GetValue<long>(value);
                    break;
                case "chat_folder_new_chats_update_period":
                    _chatFolderNewChatsUpdatePeriod = GetValue<long>(value);
                    break;
                case "commit_hash":
                    _commitHash = GetValue<string>(value);
                    break;
                case "disable_animated_emoji":
                    _disableAnimatedEmoji = GetValue<bool>(value);
                    break;
                case "disable_contact_registered_notifications":
                    _disableContactRegisteredNotifications = GetValue<bool>(value);
                    break;
                case "disable_network_statistics":
                    _disableNetworkStatistics = GetValue<bool>(value);
                    break;
                case "disable_persistent_network_statistics":
                    _disablePersistentNetworkStatistics = GetValue<bool>(value);
                    break;
                case "disable_sent_scheduled_message_notifications":
                    _disableSentScheduledMessageNotifications = GetValue<bool>(value);
                    break;
                case "disable_time_adjustment_protection":
                    _disableTimeAdjustmentProtection = GetValue<bool>(value);
                    break;
                case "disable_top_chats":
                    _disableTopChats = GetValue<bool>(value);
                    break;
                case "enabled_proxy_id":
                    _enabledProxyId = GetValue<long>(value);
                    break;
                case "expect_blocking":
                    _expectBlocking = GetValue<bool>(value);
                    break;
                case "fact_check_length_max":
                    _factCheckLengthMax = GetValue<long>(value);
                    break;
                case "favorite_stickers_limit":
                    _favoriteStickersLimit = GetValue<long>(value);
                    break;
                case "forwarded_message_count_max":
                    _forwardedMessageCountMax = GetValue<long>(value);
                    break;
                case "gift_premium_from_attachment_menu":
                    _giftPremiumFromAttachmentMenu = GetValue<bool>(value);
                    break;
                case "gift_premium_from_input_field":
                    _giftPremiumFromInputField = GetValue<bool>(value);
                    break;
                case "giveaway_additional_chat_count_max":
                    _giveawayAdditionalChatCountMax = GetValue<long>(value);
                    break;
                case "giveaway_boost_count_per_premium":
                    _giveawayBoostCountPerPremium = GetValue<long>(value);
                    break;
                case "giveaway_country_count_max":
                    _giveawayCountryCountMax = GetValue<long>(value);
                    break;
                case "giveaway_duration_max":
                    _giveawayDurationMax = GetValue<long>(value);
                    break;
                case "group_anonymous_bot_user_id":
                    _groupAnonymousBotUserId = GetValue<long>(value);
                    break;
                case "ignore_background_updates":
                    _ignoreBackgroundUpdates = GetValue<bool>(value);
                    break;
                case "ignore_default_disable_notification":
                    _ignoreDefaultDisableNotification = GetValue<bool>(value);
                    break;
                case "ignore_file_names":
                    _ignoreFileNames = GetValue<bool>(value);
                    break;
                case "ignore_inline_thumbnails":
                    _ignoreInlineThumbnails = GetValue<bool>(value);
                    break;
                case "ignore_platform_restrictions":
                    _ignorePlatformRestrictions = GetValue<bool>(value);
                    break;
                case "ignore_sensitive_content_restrictions":
                    _ignoreSensitiveContentRestrictions = GetValue<bool>(value);
                    break;
                case "is_location_visible":
                    _isLocationVisible = GetValue<bool>(value);
                    break;
                case "is_premium":
                    _isPremium = GetValue<bool>(value);
                    break;
                case "is_premium_available":
                    _isPremiumAvailable = GetValue<bool>(value);
                    break;
                case "language_pack_database_path":
                    _languagePackDatabasePath = GetValue<string>(value);
                    break;
                case "language_pack_id":
                    _languagePackId = GetValue<string>(value);
                    break;
                case "localization_target":
                    _localizationTarget = GetValue<string>(value);
                    break;
                case "message_caption_length_max":
                    _messageCaptionLengthMax = GetValue<long>(value);
                    break;
                case "message_reply_quote_length_max":
                    _messageReplyQuoteLengthMax = GetValue<long>(value);
                    break;
                case "message_text_length_max":
                    _messageTextLengthMax = GetValue<long>(value);
                    break;
                case "message_unload_delay":
                    _messageUnloadDelay = GetValue<long>(value);
                    break;
                case "monthly_sent_story_count_max":
                    _monthlySentStoryCountMax = GetValue<long>(value);
                    break;
                case "my_id":
                    _myId = GetValue<long>(value);
                    break;
                case "notification_group_count_max":
                    _notificationGroupCountMax = GetValue<long>(value);
                    break;
                case "notification_group_size_max":
                    _notificationGroupSizeMax = GetValue<long>(value);
                    break;
                case "notification_sound_count_max":
                    _notificationSoundCountMax = GetValue<long>(value);
                    break;
                case "notification_sound_duration_max":
                    _notificationSoundDurationMax = GetValue<long>(value);
                    break;
                case "notification_sound_size_max":
                    _notificationSoundSizeMax = GetValue<long>(value);
                    break;
                case "online":
                    _online = GetValue<bool>(value);
                    break;
                case "paid_media_message_star_count_max":
                    _paidMediaMessageStarCountMax = GetValue<long>(value);
                    break;
                case "paid_reaction_star_count_max":
                    _paidReactionStarCountMax = GetValue<long>(value);
                    break;
                case "photo_search_bot_username":
                    _photoSearchBotUsername = GetValue<string>(value);
                    break;
                case "pinned_archived_chat_count_max":
                    _pinnedArchivedChatCountMax = GetValue<long>(value);
                    break;
                case "pinned_chat_count_max":
                    _pinnedChatCountMax = GetValue<long>(value);
                    break;
                case "pinned_forum_topic_count_max":
                    _pinnedForumTopicCountMax = GetValue<long>(value);
                    break;
                case "pinned_saved_messages_topic_count_max":
                    _pinnedSavedMessagesTopicCountMax = GetValue<long>(value);
                    break;
                case "pinned_story_count_max":
                    _pinnedStoryCountMax = GetValue<long>(value);
                    break;
                case "prefer_ipv6":
                    _preferIpv6 = GetValue<bool>(value);
                    break;
                case "premium_download_speedup":
                    _premiumDownloadSpeedup = GetValue<long>(value);
                    break;
                case "premium_gift_boost_count":
                    _premiumGiftBoostCount = GetValue<long>(value);
                    break;
                case "premium_upload_speedup":
                    _premiumUploadSpeedup = GetValue<long>(value);
                    break;
                case "process_pinned_messages_as_mentions":
                    _processPinnedMessagesAsMentions = GetValue<bool>(value);
                    break;
                case "quick_reply_shortcut_count_max":
                    _quickReplyShortcutCountMax = GetValue<long>(value);
                    break;
                case "quick_reply_shortcut_message_count_max":
                    _quickReplyShortcutMessageCountMax = GetValue<long>(value);
                    break;
                case "replies_bot_chat_id":
                    _repliesBotChatId = GetValue<long>(value);
                    break;
                case "star_withdrawal_count_min":
                    _starWithdrawalCountMin = GetValue<long>(value);
                    break;
                case "storage_max_time_from_last_access":
                    _storageMaxTimeFromLastAccess = GetValue<long>(value);
                    break;
                case "story_caption_length_max":
                    _storyCaptionLengthMax = GetValue<long>(value);
                    break;
                case "story_link_area_count_max":
                    _storyLinkAreaCountMax = GetValue<long>(value);
                    break;
                case "story_stealth_mode_cooldown_period":
                    _storyStealthModeCooldownPeriod = GetValue<long>(value);
                    break;
                case "story_stealth_mode_future_period":
                    _storyStealthModeFuturePeriod = GetValue<long>(value);
                    break;
                case "story_stealth_mode_past_period":
                    _storyStealthModePastPeriod = GetValue<long>(value);
                    break;
                case "story_suggested_reaction_area_count_max":
                    _storySuggestedReactionAreaCountMax = GetValue<long>(value);
                    break;
                case "story_viewers_expiration_delay":
                    _storyViewersExpirationDelay = GetValue<long>(value);
                    break;
                case "suggested_language_pack_id":
                    _suggestedLanguagePackId = GetValue<string>(value);
                    break;
                case "suggested_video_note_audio_bitrate":
                    _suggestedVideoNoteAudioBitrate = GetValue<long>(value);
                    break;
                case "suggested_video_note_length":
                    _suggestedVideoNoteLength = GetValue<long>(value);
                    break;
                case "suggested_video_note_video_bitrate":
                    _suggestedVideoNoteVideoBitrate = GetValue<long>(value);
                    break;
                case "supergroup_size_max":
                    _supergroupSizeMax = GetValue<long>(value);
                    break;
                case "t_me_url":
                    _tMeUrl = GetValue<string>(value);
                    break;
                case "telegram_service_notifications_chat_id":
                    _telegramServiceNotificationsChatId = GetValue<long>(value);
                    break;
                case "test_mode":
                    _testMode = GetValue<bool>(value);
                    break;
                case "unix_time":
                    _unixTime = GetValue<long>(value);
                    break;
                case "usd_to_1000_star_rate":
                    _usdToThousandStarRate = GetValue<long>(value);
                    break;
                case "use_pfs":
                    _usePfs = GetValue<bool>(value);
                    break;
                case "use_quick_ack":
                    _useQuickAck = GetValue<bool>(value);
                    break;
                case "use_storage_optimizer":
                    _useStorageOptimizer = GetValue<bool>(value);
                    break;
                case "utc_time_offset":
                    _utcTimeOffset = GetValue<long>(value);
                    break;
                case "venue_search_bot_username":
                    _venueSearchBotUsername = GetValue<string>(value);
                    break;
                case "version":
                    _version = GetValue<string>(value);
                    break;
                case "web_app_allowed_protocols":
                    _webAppAllowedProtocols = GetValue<string>(value);
                    break;
                case "weekly_sent_story_count_max":
                    _weeklySentStoryCountMax = GetValue<long>(value);
                    break;
                case "x_system_proxy":
                    _systemProxy = GetValue<long>(value);
                    break;
                default:
                    _values[name] = value;
                    break;
            }
        }

        private T GetValue<T>(OptionValue option)
        {
            if (option is OptionValueBoolean valueBoolean && typeof(T) == typeof(bool))
            {
                return (T)(object)valueBoolean.Value;
            }
            else if (option is OptionValueInteger valueInteger && typeof(T) == typeof(long))
            {
                return (T)(object)valueInteger.Value;
            }
            else if (option is OptionValueString valueString && typeof(T) == typeof(string))
            {
                return (T)(object)valueString.Value;
            }
            else if (option is OptionValueEmpty)
            {
                return default(T);
            }

            return default(T);
        }

        private bool TryGetValue<T>(OptionValue option, out T value)
        {
            if (option is OptionValueBoolean valueBoolean && typeof(T) == typeof(bool))
            {
                value = (T)(object)valueBoolean.Value;
                return true;
            }
            else if (option is OptionValueInteger valueInteger && typeof(T) == typeof(long))
            {
                value = (T)(object)valueInteger.Value;
                return true;
            }
            else if (option is OptionValueString valueString && typeof(T) == typeof(string))
            {
                value = (T)(object)valueString.Value;
                return true;
            }
            else if (option is OptionValueEmpty)
            {
                value = default(T);
                return false;
            }

            value = default(T);
            return false;
        }



        public IReadOnlyDictionary<string, OptionValue> Values => _values;

        public T GetValue<T>(string key)
        {
            if (_values.TryGetValue(key, out OptionValue option))
            {
                return GetValue<T>(option);
            }

            return default(T);
        }

        public bool TryGetValue<T>(string key, out T value)
        {
            if (_values.TryGetValue(key, out OptionValue option))
            {
                return TryGetValue<T>(option, out value);
            }

            value = default(T);
            return false;
        }

        public void Clear()
        {
            _values.Clear();
        }

        private long _thousandStarToUsdRate;
        public long ThousandStarToUsdRate => _thousandStarToUsdRate;

        private long _activeStoryCountMax;
        public long ActiveStoryCountMax => _activeStoryCountMax;

        private long _addedShareableChatFolderCountMax;
        public long AddedShareableChatFolderCountMax => _addedShareableChatFolderCountMax;

        private bool _alwaysParseMarkdown;
        public bool AlwaysParseMarkdown
        {
            get => _alwaysParseMarkdown;
            set
            {
                _alwaysParseMarkdown = value;
                _clientService.Send(new SetOption("always_parse_markdown", new OptionValueBoolean(value)));
            }
        }

        private string _animationSearchBotUsername;
        public string AnimationSearchBotUsername => _animationSearchBotUsername;

        private long _antiSpamBotUserId;
        public long AntiSpamBotUserId => _antiSpamBotUserId;

        private string _authenticationToken;
        public string AuthenticationToken => _authenticationToken;

        private long _authorizationDate;
        public long AuthorizationDate => _authorizationDate;

        private long _basicGroupSizeMax;
        public long BasicGroupSizeMax => _basicGroupSizeMax;

        private long _bioLengthMax;
        public long BioLengthMax => _bioLengthMax;

        private long _botMediaPreviewCountMax;
        public long BotMediaPreviewCountMax => _botMediaPreviewCountMax;

        private long _businessChatLinkCountMax;
        public long BusinessChatLinkCountMax => _businessChatLinkCountMax;

        private long _businessStartPageMessageLengthMax;
        public long BusinessStartPageMessageLengthMax => _businessStartPageMessageLengthMax;

        private long _businessStartPageTitleLengthMax;
        public long BusinessStartPageTitleLengthMax => _businessStartPageTitleLengthMax;

        private long _callConnectTimeoutMs;
        public long CallConnectTimeoutMs => _callConnectTimeoutMs;

        private long _callPacketTimeoutMs;
        public long CallPacketTimeoutMs => _callPacketTimeoutMs;

        private bool _canArchiveAndMuteNewChatsFromUnknownUsers;
        public bool CanArchiveAndMuteNewChatsFromUnknownUsers => _canArchiveAndMuteNewChatsFromUnknownUsers;

        private bool _canGiftStars;
        public bool CanGiftStars => _canGiftStars;

        private bool _canIgnoreSensitiveContentRestrictions;
        public bool CanIgnoreSensitiveContentRestrictions => _canIgnoreSensitiveContentRestrictions;

        private bool _canPreloadWeather;
        public bool CanPreloadWeather => _canPreloadWeather;

        private bool _canSetNewChatPrivacySettings;
        public bool CanSetNewChatPrivacySettings => _canSetNewChatPrivacySettings;

        private bool _canUseTextEntitiesInStoryCaption;
        public bool CanUseTextEntitiesInStoryCaption => _canUseTextEntitiesInStoryCaption;

        private bool _canWithdrawChatRevenue;
        public bool CanWithdrawChatRevenue => _canWithdrawChatRevenue;

        private long _channelBotUserId;
        public long ChannelBotUserId => _channelBotUserId;

        private long _chatAvailableReactionCountMax;
        public long ChatAvailableReactionCountMax => _chatAvailableReactionCountMax;

        private long _chatBoostLevelMax;
        public long ChatBoostLevelMax => _chatBoostLevelMax;

        private long _chatFolderChosenChatCountMax;
        public long ChatFolderChosenChatCountMax => _chatFolderChosenChatCountMax;

        private long _chatFolderCountMax;
        public long ChatFolderCountMax => _chatFolderCountMax;

        private long _chatFolderInviteLinkCountMax;
        public long ChatFolderInviteLinkCountMax => _chatFolderInviteLinkCountMax;

        private long _chatFolderNewChatsUpdatePeriod;
        public long ChatFolderNewChatsUpdatePeriod => _chatFolderNewChatsUpdatePeriod;

        private string _commitHash;
        public string CommitHash => _commitHash;

        private bool _disableAnimatedEmoji;
        public bool DisableAnimatedEmoji
        {
            get => _disableAnimatedEmoji;
            set
            {
                _disableAnimatedEmoji = value;
                _clientService.Send(new SetOption("disable_animated_emoji", new OptionValueBoolean(value)));
            }
        }

        private bool _disableContactRegisteredNotifications;
        public bool DisableContactRegisteredNotifications
        {
            get => _disableContactRegisteredNotifications;
            set
            {
                _disableContactRegisteredNotifications = value;
                _clientService.Send(new SetOption("disable_contact_registered_notifications", new OptionValueBoolean(value)));
            }
        }

        private bool _disableNetworkStatistics;
        public bool DisableNetworkStatistics
        {
            get => _disableNetworkStatistics;
            set
            {
                _disableNetworkStatistics = value;
                _clientService.Send(new SetOption("disable_network_statistics", new OptionValueBoolean(value)));
            }
        }

        private bool _disablePersistentNetworkStatistics;
        public bool DisablePersistentNetworkStatistics
        {
            get => _disablePersistentNetworkStatistics;
            set
            {
                _disablePersistentNetworkStatistics = value;
                _clientService.Send(new SetOption("disable_persistent_network_statistics", new OptionValueBoolean(value)));
            }
        }

        private bool _disableSentScheduledMessageNotifications;
        public bool DisableSentScheduledMessageNotifications
        {
            get => _disableSentScheduledMessageNotifications;
            set
            {
                _disableSentScheduledMessageNotifications = value;
                _clientService.Send(new SetOption("disable_sent_scheduled_message_notifications", new OptionValueBoolean(value)));
            }
        }

        private bool _disableTimeAdjustmentProtection;
        public bool DisableTimeAdjustmentProtection
        {
            get => _disableTimeAdjustmentProtection;
            set
            {
                _disableTimeAdjustmentProtection = value;
                _clientService.Send(new SetOption("disable_time_adjustment_protection", new OptionValueBoolean(value)));
            }
        }

        private bool _disableTopChats;
        public bool DisableTopChats
        {
            get => _disableTopChats;
            set
            {
                _disableTopChats = value;
                _clientService.Send(new SetOption("disable_top_chats", new OptionValueBoolean(value)));
            }
        }

        private long _enabledProxyId;
        public long EnabledProxyId => _enabledProxyId;

        private bool _expectBlocking;
        public bool ExpectBlocking => _expectBlocking;

        private long _factCheckLengthMax;
        public long FactCheckLengthMax => _factCheckLengthMax;

        private long _favoriteStickersLimit;
        public long FavoriteStickersLimit => _favoriteStickersLimit;

        private long _forwardedMessageCountMax;
        public long ForwardedMessageCountMax => _forwardedMessageCountMax;

        private bool _giftPremiumFromAttachmentMenu;
        public bool GiftPremiumFromAttachmentMenu => _giftPremiumFromAttachmentMenu;

        private bool _giftPremiumFromInputField;
        public bool GiftPremiumFromInputField => _giftPremiumFromInputField;

        private long _giveawayAdditionalChatCountMax;
        public long GiveawayAdditionalChatCountMax => _giveawayAdditionalChatCountMax;

        private long _giveawayBoostCountPerPremium;
        public long GiveawayBoostCountPerPremium => _giveawayBoostCountPerPremium;

        private long _giveawayCountryCountMax;
        public long GiveawayCountryCountMax => _giveawayCountryCountMax;

        private long _giveawayDurationMax;
        public long GiveawayDurationMax => _giveawayDurationMax;

        private long _groupAnonymousBotUserId;
        public long GroupAnonymousBotUserId => _groupAnonymousBotUserId;

        private bool _ignoreBackgroundUpdates;
        public bool IgnoreBackgroundUpdates
        {
            get => _ignoreBackgroundUpdates;
            set
            {
                _ignoreBackgroundUpdates = value;
                _clientService.Send(new SetOption("ignore_background_updates", new OptionValueBoolean(value)));
            }
        }

        private bool _ignoreDefaultDisableNotification;
        public bool IgnoreDefaultDisableNotification
        {
            get => _ignoreDefaultDisableNotification;
            set
            {
                _ignoreDefaultDisableNotification = value;
                _clientService.Send(new SetOption("ignore_default_disable_notification", new OptionValueBoolean(value)));
            }
        }

        private bool _ignoreFileNames;
        public bool IgnoreFileNames
        {
            get => _ignoreFileNames;
            set
            {
                _ignoreFileNames = value;
                _clientService.Send(new SetOption("ignore_file_names", new OptionValueBoolean(value)));
            }
        }

        private bool _ignoreInlineThumbnails;
        public bool IgnoreInlineThumbnails
        {
            get => _ignoreInlineThumbnails;
            set
            {
                _ignoreInlineThumbnails = value;
                _clientService.Send(new SetOption("ignore_inline_thumbnails", new OptionValueBoolean(value)));
            }
        }

        private bool _ignorePlatformRestrictions;
        public bool IgnorePlatformRestrictions
        {
            get => _ignorePlatformRestrictions;
            set
            {
                _ignorePlatformRestrictions = value;
                _clientService.Send(new SetOption("ignore_platform_restrictions", new OptionValueBoolean(value)));
            }
        }

        private bool _ignoreSensitiveContentRestrictions;
        public bool IgnoreSensitiveContentRestrictions
        {
            get => _ignoreSensitiveContentRestrictions;
            set
            {
                _ignoreSensitiveContentRestrictions = value;
                _clientService.Send(new SetOption("ignore_sensitive_content_restrictions", new OptionValueBoolean(value)));
            }
        }

        private bool _isLocationVisible;
        public bool IsLocationVisible
        {
            get => _isLocationVisible;
            set
            {
                _isLocationVisible = value;
                _clientService.Send(new SetOption("is_location_visible", new OptionValueBoolean(value)));
            }
        }

        private bool _isPremium;
        public bool IsPremium => _isPremium;

        private bool _isPremiumAvailable;
        public bool IsPremiumAvailable => _isPremiumAvailable;

        private string _languagePackDatabasePath;
        public string LanguagePackDatabasePath
        {
            get => _languagePackDatabasePath;
            set
            {
                _languagePackDatabasePath = value;
                if (value == null)
                {
                    _clientService.Send(new SetOption("language_pack_database_path", new OptionValueEmpty()));
                }
                else
                {
                    _clientService.Send(new SetOption("language_pack_database_path", new OptionValueString(value)));
                }
            }
        }

        private string _languagePackId;
        public string LanguagePackId
        {
            get => _languagePackId;
            set
            {
                _languagePackId = value;
                if (value == null)
                {
                    _clientService.Send(new SetOption("language_pack_id", new OptionValueEmpty()));
                }
                else
                {
                    _clientService.Send(new SetOption("language_pack_id", new OptionValueString(value)));
                }
            }
        }

        private string _localizationTarget;
        public string LocalizationTarget
        {
            get => _localizationTarget;
            set
            {
                _localizationTarget = value;
                if (value == null)
                {
                    _clientService.Send(new SetOption("localization_target", new OptionValueEmpty()));
                }
                else
                {
                    _clientService.Send(new SetOption("localization_target", new OptionValueString(value)));
                }
            }
        }

        private long _messageCaptionLengthMax;
        public long MessageCaptionLengthMax => _messageCaptionLengthMax;

        private long _messageReplyQuoteLengthMax;
        public long MessageReplyQuoteLengthMax => _messageReplyQuoteLengthMax;

        private long _messageTextLengthMax;
        public long MessageTextLengthMax => _messageTextLengthMax;

        private long _messageUnloadDelay;
        public long MessageUnloadDelay
        {
            get => _messageUnloadDelay;
            set
            {
                _messageUnloadDelay = value;
                _clientService.Send(new SetOption("message_unload_delay", new OptionValueInteger(value)));
            }
        }

        private long _monthlySentStoryCountMax;
        public long MonthlySentStoryCountMax => _monthlySentStoryCountMax;

        private long _myId;
        public long MyId => _myId;

        private long _notificationGroupCountMax;
        public long NotificationGroupCountMax
        {
            get => _notificationGroupCountMax;
            set
            {
                _notificationGroupCountMax = value;
                _clientService.Send(new SetOption("notification_group_count_max", new OptionValueInteger(value)));
            }
        }

        private long _notificationGroupSizeMax;
        public long NotificationGroupSizeMax
        {
            get => _notificationGroupSizeMax;
            set
            {
                _notificationGroupSizeMax = value;
                _clientService.Send(new SetOption("notification_group_size_max", new OptionValueInteger(value)));
            }
        }

        private long _notificationSoundCountMax;
        public long NotificationSoundCountMax => _notificationSoundCountMax;

        private long _notificationSoundDurationMax;
        public long NotificationSoundDurationMax => _notificationSoundDurationMax;

        private long _notificationSoundSizeMax;
        public long NotificationSoundSizeMax => _notificationSoundSizeMax;

        private bool _online;
        public bool Online
        {
            get => _online;
            set
            {
                _online = value;
                _clientService.Send(new SetOption("online", new OptionValueBoolean(value)));
            }
        }

        private long _paidMediaMessageStarCountMax;
        public long PaidMediaMessageStarCountMax => _paidMediaMessageStarCountMax;

        private long _paidReactionStarCountMax;
        public long PaidReactionStarCountMax => _paidReactionStarCountMax;

        private string _photoSearchBotUsername;
        public string PhotoSearchBotUsername => _photoSearchBotUsername;

        private long _pinnedArchivedChatCountMax;
        public long PinnedArchivedChatCountMax => _pinnedArchivedChatCountMax;

        private long _pinnedChatCountMax;
        public long PinnedChatCountMax => _pinnedChatCountMax;

        private long _pinnedForumTopicCountMax;
        public long PinnedForumTopicCountMax => _pinnedForumTopicCountMax;

        private long _pinnedSavedMessagesTopicCountMax;
        public long PinnedSavedMessagesTopicCountMax => _pinnedSavedMessagesTopicCountMax;

        private long _pinnedStoryCountMax;
        public long PinnedStoryCountMax => _pinnedStoryCountMax;

        private bool _preferIpv6;
        public bool PreferIpv6
        {
            get => _preferIpv6;
            set
            {
                _preferIpv6 = value;
                _clientService.Send(new SetOption("prefer_ipv6", new OptionValueBoolean(value)));
            }
        }

        private long _premiumDownloadSpeedup;
        public long PremiumDownloadSpeedup => _premiumDownloadSpeedup;

        private long _premiumGiftBoostCount;
        public long PremiumGiftBoostCount => _premiumGiftBoostCount;

        private long _premiumUploadSpeedup;
        public long PremiumUploadSpeedup => _premiumUploadSpeedup;

        private bool _processPinnedMessagesAsMentions;
        public bool ProcessPinnedMessagesAsMentions
        {
            get => _processPinnedMessagesAsMentions;
            set
            {
                _processPinnedMessagesAsMentions = value;
                _clientService.Send(new SetOption("process_pinned_messages_as_mentions", new OptionValueBoolean(value)));
            }
        }

        private long _quickReplyShortcutCountMax;
        public long QuickReplyShortcutCountMax => _quickReplyShortcutCountMax;

        private long _quickReplyShortcutMessageCountMax;
        public long QuickReplyShortcutMessageCountMax => _quickReplyShortcutMessageCountMax;

        private long _repliesBotChatId;
        public long RepliesBotChatId => _repliesBotChatId;

        private long _starWithdrawalCountMin;
        public long StarWithdrawalCountMin => _starWithdrawalCountMin;

        private long _storageMaxTimeFromLastAccess;
        public long StorageMaxTimeFromLastAccess
        {
            get => _storageMaxTimeFromLastAccess;
            set
            {
                _storageMaxTimeFromLastAccess = value;
                _clientService.Send(new SetOption("storage_max_time_from_last_access", new OptionValueInteger(value)));
            }
        }

        private long _storyCaptionLengthMax;
        public long StoryCaptionLengthMax => _storyCaptionLengthMax;

        private long _storyLinkAreaCountMax;
        public long StoryLinkAreaCountMax => _storyLinkAreaCountMax;

        private long _storyStealthModeCooldownPeriod;
        public long StoryStealthModeCooldownPeriod => _storyStealthModeCooldownPeriod;

        private long _storyStealthModeFuturePeriod;
        public long StoryStealthModeFuturePeriod => _storyStealthModeFuturePeriod;

        private long _storyStealthModePastPeriod;
        public long StoryStealthModePastPeriod => _storyStealthModePastPeriod;

        private long _storySuggestedReactionAreaCountMax;
        public long StorySuggestedReactionAreaCountMax => _storySuggestedReactionAreaCountMax;

        private long _storyViewersExpirationDelay;
        public long StoryViewersExpirationDelay => _storyViewersExpirationDelay;

        private string _suggestedLanguagePackId;
        public string SuggestedLanguagePackId => _suggestedLanguagePackId;

        private long _suggestedVideoNoteAudioBitrate;
        public long SuggestedVideoNoteAudioBitrate => _suggestedVideoNoteAudioBitrate;

        private long _suggestedVideoNoteLength;
        public long SuggestedVideoNoteLength => _suggestedVideoNoteLength;

        private long _suggestedVideoNoteVideoBitrate;
        public long SuggestedVideoNoteVideoBitrate => _suggestedVideoNoteVideoBitrate;

        private long _supergroupSizeMax;
        public long SupergroupSizeMax => _supergroupSizeMax;

        private string _tMeUrl;
        public string TMeUrl => _tMeUrl;

        private long _telegramServiceNotificationsChatId;
        public long TelegramServiceNotificationsChatId => _telegramServiceNotificationsChatId;

        private bool _testMode;
        public bool TestMode => _testMode;

        private long _unixTime;
        public long UnixTime => _unixTime;

        private long _usdToThousandStarRate;
        public long UsdToThousandStarRate => _usdToThousandStarRate;

        private bool _usePfs;
        public bool UsePfs
        {
            get => _usePfs;
            set
            {
                _usePfs = value;
                _clientService.Send(new SetOption("use_pfs", new OptionValueBoolean(value)));
            }
        }

        private bool _useQuickAck;
        public bool UseQuickAck
        {
            get => _useQuickAck;
            set
            {
                _useQuickAck = value;
                _clientService.Send(new SetOption("use_quick_ack", new OptionValueBoolean(value)));
            }
        }

        private bool _useStorageOptimizer;
        public bool UseStorageOptimizer
        {
            get => _useStorageOptimizer;
            set
            {
                _useStorageOptimizer = value;
                _clientService.Send(new SetOption("use_storage_optimizer", new OptionValueBoolean(value)));
            }
        }

        private long _utcTimeOffset;
        public long UtcTimeOffset
        {
            get => _utcTimeOffset;
            set
            {
                _utcTimeOffset = value;
                _clientService.Send(new SetOption("utc_time_offset", new OptionValueInteger(value)));
            }
        }

        private string _venueSearchBotUsername;
        public string VenueSearchBotUsername => _venueSearchBotUsername;

        private string _version;
        public string Version => _version;

        private string _webAppAllowedProtocols;
        public string WebAppAllowedProtocols => _webAppAllowedProtocols;

        private long _weeklySentStoryCountMax;
        public long WeeklySentStoryCountMax => _weeklySentStoryCountMax;

        private long _systemProxy;
        public long SystemProxy
        {
            get => _systemProxy;
            set
            {
                _systemProxy = value;
                _clientService.Send(new SetOption("x_system_proxy", new OptionValueInteger(value)));
            }
        }
    }
}
