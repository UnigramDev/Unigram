//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.2-build.24+g767465b091
//       
//       Command:
//           LottieGen -DisableTranslationOptimizer -Language CSharp -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.8 -InputFile u_power_saving.json
//       
//       Input file:
//           u_power_saving.json (4343 bytes created 15:15+04:00 Mar 16 2023)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v15 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |            62 |           66 |
// |--------------------------+---------------+--------------|
// | Expression animators     |             1 |            2 |
// | KeyFrame animators       |             2 |            2 |
// | Reference parameters     |             1 |            2 |
// | Expression operations    |             0 |            0 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             - |            - |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             1 |            2 |
// | PathKeyFrameAnimations   |             - |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             2 |            2 |
// | ShapeVisuals             |             1 |            1 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             6 |            6 |
// | CompositionSpriteShapes  |             2 |            2 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             2 |            2 |
// | Gradient stops           |             4 |            4 |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Microsoft.UI;
using Microsoft.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        u_power_saving
    // Frame rate:  60 fps
    // Frame count: 30
    // Duration:    500.0 mS
    public sealed partial class PowerSaving
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 0.500 seconds.
        internal const long c_durationTicks = 5000000;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (PowerSaving_AnimatedVisual_UAPv15.IsRuntimeCompatible())
            {
                var res =
                    new PowerSaving_AnimatedVisual_UAPv15(
                        compositor
                        );
                res.CreateAnimations();
                return res;
            }

            if (PowerSaving_AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                var res =
                    new PowerSaving_AnimatedVisual_UAPv7(
                        compositor
                        );
                res.CreateAnimations();
                return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 30d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(5000000);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 30d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPointerOver_Start", 0.0 },
                { "NormalToPointerOver_End", 1 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class PowerSaving_AnimatedVisual_UAPv15 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 5000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionContainerShape _containerShape_2;
            CompositionContainerShape _containerShape_4;
            ContainerVisual _root;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - - - - - - Shape tree root for layer: Shape
            // - - - - ShapeGroup: Shape 2
            // - - Path 1
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(1.74899995F, -4.99300003F));
                    builder.AddLine(new Vector2(-2.16499996F, -5.00699997F));
                    builder.AddLine(new Vector2(-2.24499989F, -5.00199986F));
                    builder.AddCubicBezier(new Vector2(-2.52999997F, -4.96299982F), new Vector2(-2.74900007F, -4.71899986F), new Vector2(-2.74900007F, -4.42399979F));
                    builder.AddCubicBezier(new Vector2(-2.74900007F, -4.34899998F), new Vector2(-2.73399997F, -4.2750001F), new Vector2(-2.70600009F, -4.20499992F));
                    builder.AddCubicBezier(new Vector2(-2.20300007F, -2.96700001F), new Vector2(-1.75100005F, -1.30599999F), new Vector2(-1.75100005F, -0.291999996F));
                    builder.AddCubicBezier(new Vector2(-1.75100005F, 3.00200009F), new Vector2(-4.43400002F, 3.99300003F), new Vector2(-5.70599985F, 3.99300003F));
                    builder.AddLine(new Vector2(-5.75099993F, 3.99300003F));
                    builder.AddCubicBezier(new Vector2(-5.95900011F, 3.99300003F), new Vector2(-6.24900007F, 4.1079998F), new Vector2(-6.24900007F, 4.48999977F));
                    builder.AddCubicBezier(new Vector2(-6.24900007F, 4.87200022F), new Vector2(-5.92999983F, 4.99300003F), new Vector2(-5.75099993F, 4.99300003F));
                    builder.AddLine(new Vector2(1.74899995F, 5.00699997F));
                    builder.AddLine(new Vector2(1.89600003F, 5.00299978F));
                    builder.AddCubicBezier(new Vector2(3.20799994F, 4.92700005F), new Vector2(4.24900007F, 3.83800006F), new Vector2(4.24900007F, 2.50699997F));
                    builder.AddLine(new Vector2(4.24900007F, 1.67400002F));
                    builder.AddLine(new Vector2(5.41599989F, 1.67400002F));
                    builder.AddLine(new Vector2(5.52799988F, 1.66700006F));
                    builder.AddCubicBezier(new Vector2(5.63800001F, 1.65199995F), new Vector2(5.74100018F, 1.61600006F), new Vector2(5.83300018F, 1.56299996F));
                    builder.AddCubicBezier(new Vector2(6.08199978F, 1.41900003F), new Vector2(6.24900007F, 1.14900005F), new Vector2(6.24900007F, 0.841000021F));
                    builder.AddLine(new Vector2(6.24900007F, -0.825999975F));
                    builder.AddLine(new Vector2(6.24300003F, -0.926999986F));
                    builder.AddCubicBezier(new Vector2(6.21099997F, -1.19200003F), new Vector2(6.0539999F, -1.41999996F), new Vector2(5.83300018F, -1.54799998F));
                    builder.AddCubicBezier(new Vector2(5.71000004F, -1.61899996F), new Vector2(5.56799984F, -1.65900004F), new Vector2(5.41599989F, -1.65900004F));
                    builder.AddLine(new Vector2(4.24900007F, -1.65900004F));
                    builder.AddLine(new Vector2(4.24900007F, -2.49300003F));
                    builder.AddLine(new Vector2(4.24499989F, -2.63899994F));
                    builder.AddCubicBezier(new Vector2(4.16900015F, -3.95099998F), new Vector2(3.07999992F, -4.99300003F), new Vector2(1.74899995F, -4.99300003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Shape tree root for layer: Shape
            // - - - - ShapeGroup: Shape
            // - - Path 1
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(3.5F, 0.064000003F));
                    builder.AddCubicBezier(new Vector2(3.5F, -1.17299998F), new Vector2(2.88199997F, -2.97300005F), new Vector2(1.66600001F, -5.21199989F));
                    builder.AddCubicBezier(new Vector2(1.45700002F, -5.59600019F), new Vector2(0.912999988F, -5.59100008F), new Vector2(0.67900002F, -5.22700024F));
                    builder.AddCubicBezier(new Vector2(0.352999985F, -4.71999979F), new Vector2(-0.133000001F, -4.20100021F), new Vector2(-0.779999971F, -3.67199993F));
                    builder.AddLine(new Vector2(-1.06700003F, -3.44499993F));
                    builder.AddLine(new Vector2(-1.72399998F, -2.93799996F));
                    builder.AddCubicBezier(new Vector2(-3.06699991F, -1.85699999F), new Vector2(-3.59699988F, -0.894999981F), new Vector2(-3.48099995F, 0.526000023F));
                    builder.AddCubicBezier(new Vector2(-3.37800002F, 1.78199995F), new Vector2(-2.62700009F, 2.68099999F), new Vector2(-1.33399999F, 3.09299994F));
                    builder.AddCubicBezier(new Vector2(-1.78999996F, 3.63000011F), new Vector2(-2.3900001F, 4.05299997F), new Vector2(-3.1400001F, 4.3670001F));
                    builder.AddCubicBezier(new Vector2(-3.43799996F, 4.49100018F), new Vector2(-3.579F, 4.83599997F), new Vector2(-3.45600009F, 5.13600016F));
                    builder.AddCubicBezier(new Vector2(-3.33299994F, 5.43599987F), new Vector2(-2.9920001F, 5.579F), new Vector2(-2.69400001F, 5.45499992F));
                    builder.AddCubicBezier(new Vector2(-1.26900005F, 4.85900021F), new Vector2(-0.246000007F, 3.90400004F), new Vector2(0.347000003F, 2.60299993F));
                    builder.AddCubicBezier(new Vector2(0.569000006F, 2.11599994F), new Vector2(0.746999979F, 1.63600004F), new Vector2(0.879000008F, 1.16299999F));
                    builder.AddLine(new Vector2(0.912F, 1.04100001F));
                    builder.AddLine(new Vector2(0.990999997F, 0.717000008F));
                    builder.AddLine(new Vector2(1.04499996F, 0.458000004F));
                    builder.AddLine(new Vector2(1.07700002F, 0.272000015F));
                    builder.AddLine(new Vector2(1.12899995F, -0.101999998F));
                    builder.AddCubicBezier(new Vector2(1.16199994F, -0.398000002F), new Vector2(1.176F, -0.691999972F), new Vector2(1.17200005F, -0.981999993F));
                    builder.AddLine(new Vector2(1.16900003F, -1F));
                    builder.AddCubicBezier(new Vector2(1.18299997F, -1.30900002F), new Vector2(1.43200004F, -1.55700004F), new Vector2(1.74199998F, -1.56200004F));
                    builder.AddCubicBezier(new Vector2(2.06399989F, -1.56700003F), new Vector2(2.329F, -1.30799997F), new Vector2(2.33400011F, -0.98299998F));
                    builder.AddCubicBezier(new Vector2(2.352F, 0.163000003F), new Vector2(2.12100005F, 1.33299994F), new Vector2(1.64600003F, 2.52200007F));
                    builder.AddLine(new Vector2(1.62699997F, 2.59200001F));
                    builder.AddCubicBezier(new Vector2(1.61399996F, 2.66300011F), new Vector2(1.62199998F, 2.73600006F), new Vector2(1.65199995F, 2.80299997F));
                    builder.AddCubicBezier(new Vector2(1.73199999F, 2.98200011F), new Vector2(1.94099998F, 3.06100011F), new Vector2(2.11899996F, 2.98000002F));
                    builder.AddLine(new Vector2(2.20799994F, 2.93499994F));
                    builder.AddCubicBezier(new Vector2(2.26399994F, 2.90300012F), new Vector2(2.31500006F, 2.8670001F), new Vector2(2.3599999F, 2.82800007F));
                    builder.AddCubicBezier(new Vector2(2.921F, 2.33800006F), new Vector2(3.5F, 1.301F), new Vector2(3.5F, 0.064000003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Shape tree root for layer: Shape
            // - - - ShapeGroup: Shape
            // - Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostMediumSeaGreen_FF6CCA5F()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0x6C, 0xCA, 0x5F));
            }

            // - - - - - - Shape tree root for layer: Shape
            // - - - ShapeGroup: Shape 2
            // - Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostSandyBrown_FFFFC554()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0xFF, 0xC5, 0x54));
            }

            // - - - - - - Shape tree root for layer: Shape
            // - - - ShapeGroup: Shape 2
            // - Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostDarkOrange_FFE09400()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xE0, 0x94, 0x00));
            }

            // - - - - - - Shape tree root for layer: Shape
            // - - - ShapeGroup: Shape
            // - Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostForestGreen_FF439E36()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0x43, 0x9E, 0x36));
            }

            // Shape tree root for layer: Shape
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(44.5F, 5F);
                result.Offset = new Vector2(55F, 95F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(1F, 1F);
                result.Shapes.Add(ContainerShape_1());
                return result;
            }

            // - Shape tree root for layer: Shape
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // ShapeGroup: Shape 2
                shapes.Add(ContainerShape_2());
                // ShapeGroup: Shape
                shapes.Add(ContainerShape_4());
                return result;
            }

            // - - Shape tree root for layer: Shape
            // ShapeGroup: Shape 2
            CompositionContainerShape ContainerShape_2()
            {
                if (_containerShape_2 != null) { return _containerShape_2; }
                var result = _containerShape_2 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(-1.75399995F, -0.26699999F);
                result.Offset = new Vector2(46.7110023F, 2.60100007F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_3());
                return result;
            }

            // - - - Shape tree root for layer: Shape
            // ShapeGroup: Shape 2
            CompositionContainerShape ContainerShape_3()
            {
                var result = _c.CreateContainerShape();
                // Path 1
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // - - Shape tree root for layer: Shape
            // ShapeGroup: Shape
            CompositionContainerShape ContainerShape_4()
            {
                if (_containerShape_4 != null) { return _containerShape_4; }
                var result = _containerShape_4 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(4.46299982F, 0.31400001F);
                result.Offset = new Vector2(40.1679993F, 2.82499981F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_5());
                return result;
            }

            // - - - Shape tree root for layer: Shape
            // ShapeGroup: Shape
            CompositionContainerShape ContainerShape_5()
            {
                var result = _c.CreateContainerShape();
                // Path 1
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // - - - - - Shape tree root for layer: Shape
            // - - ShapeGroup: Shape 2
            // Path 1
            CompositionLinearGradientBrush LinearGradientBrush_0()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostSandyBrown_FFFFC554());
                colorStops.Add(GradientStop_1_AlmostDarkOrange_FFE09400());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(0F, -5.00699997F);
                result.EndPoint = new Vector2(0F, 5.00699997F);
                return result;
            }

            // - - - - - Shape tree root for layer: Shape
            // - - ShapeGroup: Shape
            // Path 1
            CompositionLinearGradientBrush LinearGradientBrush_1()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostMediumSeaGreen_FF6CCA5F());
                colorStops.Add(GradientStop_1_AlmostForestGreen_FF439E36());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(0F, -5.5F);
                result.EndPoint = new Vector2(0F, 5.5F);
                return result;
            }

            // - - - - - Shape tree root for layer: Shape
            // - - ShapeGroup: Shape 2
            // Path 1
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - - - - Shape tree root for layer: Shape
            // - - ShapeGroup: Shape
            // Path 1
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - - - - Shape tree root for layer: Shape
            // - ShapeGroup: Shape 2
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = LinearGradientBrush_0();
                return result;
            }

            // - - - - Shape tree root for layer: Shape
            // - ShapeGroup: Shape
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = LinearGradientBrush_1();
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                // Shape tree root for layer: Shape
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                result.Children.InsertAtTop(ContainerVisual_0());
                return result;
            }

            // Shape tree root for layer: Shape
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                result.Shapes.Add(ContainerShape_0());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsFinalStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - - - - Shape tree root for layer: Shape
            // - ShapeGroup: Shape 2
            // Scale
            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsInitialStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - - - Shape tree root for layer: Shape
            // ShapeGroup: Shape 2
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(10F, 10F), StepThenHoldEasingFunction());
                // Frame 4.
                result.InsertKeyFrame(0.13333334F, new Vector2(10F, 10F), HoldThenStepEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.400000006F, new Vector2(12F, 12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 20.
                result.InsertKeyFrame(0.666666687F, new Vector2(9.5F, 9.5F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 28.
                result.InsertKeyFrame(0.933333337F, new Vector2(10F, 10F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // - - - Shape tree root for layer: Shape
            // ShapeGroup: Shape
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(10F, 10F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(12F, 12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(9.5F, 9.5F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(10F, 10F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            internal PowerSaving_AnimatedVisual_UAPv15(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_2.StartAnimation("Scale", ScaleVector2Animation_0(), AnimationController_0());
                _containerShape_4.StartAnimation("Scale", ScaleVector2Animation_1(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _containerShape_2.StopAnimation("Scale");
                _containerShape_4.StopAnimation("Scale");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 15);
            }
        }

        sealed partial class PowerSaving_AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 5000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionContainerShape _containerShape_2;
            CompositionContainerShape _containerShape_4;
            ContainerVisual _root;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            // - - - - - - - Shape tree root for layer: Shape
            // - - - - ShapeGroup: Shape 2
            // - - Path 1
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(1.74899995F, -4.99300003F));
                    builder.AddLine(new Vector2(-2.16499996F, -5.00699997F));
                    builder.AddLine(new Vector2(-2.24499989F, -5.00199986F));
                    builder.AddCubicBezier(new Vector2(-2.52999997F, -4.96299982F), new Vector2(-2.74900007F, -4.71899986F), new Vector2(-2.74900007F, -4.42399979F));
                    builder.AddCubicBezier(new Vector2(-2.74900007F, -4.34899998F), new Vector2(-2.73399997F, -4.2750001F), new Vector2(-2.70600009F, -4.20499992F));
                    builder.AddCubicBezier(new Vector2(-2.20300007F, -2.96700001F), new Vector2(-1.75100005F, -1.30599999F), new Vector2(-1.75100005F, -0.291999996F));
                    builder.AddCubicBezier(new Vector2(-1.75100005F, 3.00200009F), new Vector2(-4.43400002F, 3.99300003F), new Vector2(-5.70599985F, 3.99300003F));
                    builder.AddLine(new Vector2(-5.75099993F, 3.99300003F));
                    builder.AddCubicBezier(new Vector2(-5.95900011F, 3.99300003F), new Vector2(-6.24900007F, 4.1079998F), new Vector2(-6.24900007F, 4.48999977F));
                    builder.AddCubicBezier(new Vector2(-6.24900007F, 4.87200022F), new Vector2(-5.92999983F, 4.99300003F), new Vector2(-5.75099993F, 4.99300003F));
                    builder.AddLine(new Vector2(1.74899995F, 5.00699997F));
                    builder.AddLine(new Vector2(1.89600003F, 5.00299978F));
                    builder.AddCubicBezier(new Vector2(3.20799994F, 4.92700005F), new Vector2(4.24900007F, 3.83800006F), new Vector2(4.24900007F, 2.50699997F));
                    builder.AddLine(new Vector2(4.24900007F, 1.67400002F));
                    builder.AddLine(new Vector2(5.41599989F, 1.67400002F));
                    builder.AddLine(new Vector2(5.52799988F, 1.66700006F));
                    builder.AddCubicBezier(new Vector2(5.63800001F, 1.65199995F), new Vector2(5.74100018F, 1.61600006F), new Vector2(5.83300018F, 1.56299996F));
                    builder.AddCubicBezier(new Vector2(6.08199978F, 1.41900003F), new Vector2(6.24900007F, 1.14900005F), new Vector2(6.24900007F, 0.841000021F));
                    builder.AddLine(new Vector2(6.24900007F, -0.825999975F));
                    builder.AddLine(new Vector2(6.24300003F, -0.926999986F));
                    builder.AddCubicBezier(new Vector2(6.21099997F, -1.19200003F), new Vector2(6.0539999F, -1.41999996F), new Vector2(5.83300018F, -1.54799998F));
                    builder.AddCubicBezier(new Vector2(5.71000004F, -1.61899996F), new Vector2(5.56799984F, -1.65900004F), new Vector2(5.41599989F, -1.65900004F));
                    builder.AddLine(new Vector2(4.24900007F, -1.65900004F));
                    builder.AddLine(new Vector2(4.24900007F, -2.49300003F));
                    builder.AddLine(new Vector2(4.24499989F, -2.63899994F));
                    builder.AddCubicBezier(new Vector2(4.16900015F, -3.95099998F), new Vector2(3.07999992F, -4.99300003F), new Vector2(1.74899995F, -4.99300003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Shape tree root for layer: Shape
            // - - - - ShapeGroup: Shape
            // - - Path 1
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(3.5F, 0.064000003F));
                    builder.AddCubicBezier(new Vector2(3.5F, -1.17299998F), new Vector2(2.88199997F, -2.97300005F), new Vector2(1.66600001F, -5.21199989F));
                    builder.AddCubicBezier(new Vector2(1.45700002F, -5.59600019F), new Vector2(0.912999988F, -5.59100008F), new Vector2(0.67900002F, -5.22700024F));
                    builder.AddCubicBezier(new Vector2(0.352999985F, -4.71999979F), new Vector2(-0.133000001F, -4.20100021F), new Vector2(-0.779999971F, -3.67199993F));
                    builder.AddLine(new Vector2(-1.06700003F, -3.44499993F));
                    builder.AddLine(new Vector2(-1.72399998F, -2.93799996F));
                    builder.AddCubicBezier(new Vector2(-3.06699991F, -1.85699999F), new Vector2(-3.59699988F, -0.894999981F), new Vector2(-3.48099995F, 0.526000023F));
                    builder.AddCubicBezier(new Vector2(-3.37800002F, 1.78199995F), new Vector2(-2.62700009F, 2.68099999F), new Vector2(-1.33399999F, 3.09299994F));
                    builder.AddCubicBezier(new Vector2(-1.78999996F, 3.63000011F), new Vector2(-2.3900001F, 4.05299997F), new Vector2(-3.1400001F, 4.3670001F));
                    builder.AddCubicBezier(new Vector2(-3.43799996F, 4.49100018F), new Vector2(-3.579F, 4.83599997F), new Vector2(-3.45600009F, 5.13600016F));
                    builder.AddCubicBezier(new Vector2(-3.33299994F, 5.43599987F), new Vector2(-2.9920001F, 5.579F), new Vector2(-2.69400001F, 5.45499992F));
                    builder.AddCubicBezier(new Vector2(-1.26900005F, 4.85900021F), new Vector2(-0.246000007F, 3.90400004F), new Vector2(0.347000003F, 2.60299993F));
                    builder.AddCubicBezier(new Vector2(0.569000006F, 2.11599994F), new Vector2(0.746999979F, 1.63600004F), new Vector2(0.879000008F, 1.16299999F));
                    builder.AddLine(new Vector2(0.912F, 1.04100001F));
                    builder.AddLine(new Vector2(0.990999997F, 0.717000008F));
                    builder.AddLine(new Vector2(1.04499996F, 0.458000004F));
                    builder.AddLine(new Vector2(1.07700002F, 0.272000015F));
                    builder.AddLine(new Vector2(1.12899995F, -0.101999998F));
                    builder.AddCubicBezier(new Vector2(1.16199994F, -0.398000002F), new Vector2(1.176F, -0.691999972F), new Vector2(1.17200005F, -0.981999993F));
                    builder.AddLine(new Vector2(1.16900003F, -1F));
                    builder.AddCubicBezier(new Vector2(1.18299997F, -1.30900002F), new Vector2(1.43200004F, -1.55700004F), new Vector2(1.74199998F, -1.56200004F));
                    builder.AddCubicBezier(new Vector2(2.06399989F, -1.56700003F), new Vector2(2.329F, -1.30799997F), new Vector2(2.33400011F, -0.98299998F));
                    builder.AddCubicBezier(new Vector2(2.352F, 0.163000003F), new Vector2(2.12100005F, 1.33299994F), new Vector2(1.64600003F, 2.52200007F));
                    builder.AddLine(new Vector2(1.62699997F, 2.59200001F));
                    builder.AddCubicBezier(new Vector2(1.61399996F, 2.66300011F), new Vector2(1.62199998F, 2.73600006F), new Vector2(1.65199995F, 2.80299997F));
                    builder.AddCubicBezier(new Vector2(1.73199999F, 2.98200011F), new Vector2(1.94099998F, 3.06100011F), new Vector2(2.11899996F, 2.98000002F));
                    builder.AddLine(new Vector2(2.20799994F, 2.93499994F));
                    builder.AddCubicBezier(new Vector2(2.26399994F, 2.90300012F), new Vector2(2.31500006F, 2.8670001F), new Vector2(2.3599999F, 2.82800007F));
                    builder.AddCubicBezier(new Vector2(2.921F, 2.33800006F), new Vector2(3.5F, 1.301F), new Vector2(3.5F, 0.064000003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Shape tree root for layer: Shape
            // - - - ShapeGroup: Shape
            // - Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostMediumSeaGreen_FF6CCA5F()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0x6C, 0xCA, 0x5F));
            }

            // - - - - - - Shape tree root for layer: Shape
            // - - - ShapeGroup: Shape 2
            // - Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostSandyBrown_FFFFC554()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0xFF, 0xC5, 0x54));
            }

            // - - - - - - Shape tree root for layer: Shape
            // - - - ShapeGroup: Shape 2
            // - Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostDarkOrange_FFE09400()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xE0, 0x94, 0x00));
            }

            // - - - - - - Shape tree root for layer: Shape
            // - - - ShapeGroup: Shape
            // - Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostForestGreen_FF439E36()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0x43, 0x9E, 0x36));
            }

            // Shape tree root for layer: Shape
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(44.5F, 5F);
                result.Offset = new Vector2(55F, 95F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(1F, 1F);
                result.Shapes.Add(ContainerShape_1());
                return result;
            }

            // - Shape tree root for layer: Shape
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // ShapeGroup: Shape 2
                shapes.Add(ContainerShape_2());
                // ShapeGroup: Shape
                shapes.Add(ContainerShape_4());
                return result;
            }

            // - - Shape tree root for layer: Shape
            // ShapeGroup: Shape 2
            CompositionContainerShape ContainerShape_2()
            {
                if (_containerShape_2 != null) { return _containerShape_2; }
                var result = _containerShape_2 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(-1.75399995F, -0.26699999F);
                result.Offset = new Vector2(46.7110023F, 2.60100007F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_3());
                return result;
            }

            // - - - Shape tree root for layer: Shape
            // ShapeGroup: Shape 2
            CompositionContainerShape ContainerShape_3()
            {
                var result = _c.CreateContainerShape();
                // Path 1
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // - - Shape tree root for layer: Shape
            // ShapeGroup: Shape
            CompositionContainerShape ContainerShape_4()
            {
                if (_containerShape_4 != null) { return _containerShape_4; }
                var result = _containerShape_4 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(4.46299982F, 0.31400001F);
                result.Offset = new Vector2(40.1679993F, 2.82499981F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_5());
                return result;
            }

            // - - - Shape tree root for layer: Shape
            // ShapeGroup: Shape
            CompositionContainerShape ContainerShape_5()
            {
                var result = _c.CreateContainerShape();
                // Path 1
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // - - - - - Shape tree root for layer: Shape
            // - - ShapeGroup: Shape 2
            // Path 1
            CompositionLinearGradientBrush LinearGradientBrush_0()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostSandyBrown_FFFFC554());
                colorStops.Add(GradientStop_1_AlmostDarkOrange_FFE09400());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(0F, -5.00699997F);
                result.EndPoint = new Vector2(0F, 5.00699997F);
                return result;
            }

            // - - - - - Shape tree root for layer: Shape
            // - - ShapeGroup: Shape
            // Path 1
            CompositionLinearGradientBrush LinearGradientBrush_1()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostMediumSeaGreen_FF6CCA5F());
                colorStops.Add(GradientStop_1_AlmostForestGreen_FF439E36());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(0F, -5.5F);
                result.EndPoint = new Vector2(0F, 5.5F);
                return result;
            }

            // - - - - - Shape tree root for layer: Shape
            // - - ShapeGroup: Shape 2
            // Path 1
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - - - - Shape tree root for layer: Shape
            // - - ShapeGroup: Shape
            // Path 1
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - - - - Shape tree root for layer: Shape
            // - ShapeGroup: Shape 2
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = LinearGradientBrush_0();
                return result;
            }

            // - - - - Shape tree root for layer: Shape
            // - ShapeGroup: Shape
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = LinearGradientBrush_1();
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                // Shape tree root for layer: Shape
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                result.Children.InsertAtTop(ContainerVisual_0());
                return result;
            }

            // Shape tree root for layer: Shape
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                result.Shapes.Add(ContainerShape_0());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsFinalStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - - - - Shape tree root for layer: Shape
            // - ShapeGroup: Shape 2
            // Scale
            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsInitialStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - - - Shape tree root for layer: Shape
            // ShapeGroup: Shape 2
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(10F, 10F), StepThenHoldEasingFunction());
                // Frame 4.
                result.InsertKeyFrame(0.13333334F, new Vector2(10F, 10F), HoldThenStepEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.400000006F, new Vector2(12F, 12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 20.
                result.InsertKeyFrame(0.666666687F, new Vector2(9.5F, 9.5F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 28.
                result.InsertKeyFrame(0.933333337F, new Vector2(10F, 10F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // - - - Shape tree root for layer: Shape
            // ShapeGroup: Shape
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(10F, 10F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(12F, 12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(9.5F, 9.5F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(10F, 10F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            internal PowerSaving_AnimatedVisual_UAPv7(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_2.StartAnimation("Scale", ScaleVector2Animation_0());
                var controller = _containerShape_2.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_4.StartAnimation("Scale", ScaleVector2Animation_1());
                controller = _containerShape_4.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
            }

            public void DestroyAnimations()
            {
                _containerShape_2.StopAnimation("Scale");
                _containerShape_4.StopAnimation("Scale");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
