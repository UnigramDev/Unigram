//
// Copyright Fela Ameghino 2015-2024
//
// Distributed under the GNU General Public License v3.0. (See accompanying
// file LICENSE or copy at https://www.gnu.org/licenses/gpl-3.0.txt)
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.0+ge1fa92580f
//       
//       Command:
//           LottieGen -Language CSharp -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.7 -InputFile Privacy.json
//       
//       Input file:
//           Privacy.json (7030 bytes created 17:41+01:00 Dec 21 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |            58 |           42 |
// |--------------------------+---------------+--------------|
// | Expression animators     |             6 |            3 |
// | KeyFrame animators       |             6 |            3 |
// | Reference parameters     |             6 |            3 |
// | Expression operations    |             0 |            0 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             - |            - |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             1 |            1 |
// | PathKeyFrameAnimations   |             3 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             1 |            1 |
// | ShapeVisuals             |             1 |            1 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             - |            - |
// | CompositionSpriteShapes  |             3 |            3 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             2 |            2 |
// | Gradient stops           |             2 |            2 |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Microsoft.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        u_privacy
    // Frame rate:  60 fps
    // Frame count: 30
    // Duration:    500.0 mS
    sealed class Privacy
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 0.500 seconds.
        internal const long c_durationTicks = 5000000;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (Privacy_AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                return
                    new Privacy_AnimatedVisual_UAPv11(
                        compositor
                        );
            }

            if (Privacy_AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                return
                    new Privacy_AnimatedVisual_UAPv7(
                        compositor
                        );
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 30d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 30d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPointerOver_Start", 0.0 },
                { "NormalToPointerOver_End", 1 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class Privacy_AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 5000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_AlmostSkyBlue_FF6ABEE2;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPath _path_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _scaleVector2Animation_1;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - - ShapeGroup: s
            // - Path
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(42.8370018F, -8.77700043F));
                    builder.AddCubicBezier(new Vector2(48.230999F, -3.148F), new Vector2(53.9420013F, 0.925999999F), new Vector2(60F, 3.47099996F));
                    builder.AddCubicBezier(new Vector2(63.2330017F, 4.829F), new Vector2(66.5650024F, 5.75299978F), new Vector2(70F, 6.24499989F));
                    builder.AddCubicBezier(new Vector2(71.9660034F, 6.52600002F), new Vector2(73.9660034F, 6.66699982F), new Vector2(76F, 6.66699982F));
                    builder.AddCubicBezier(new Vector2(77.9329987F, 6.66699982F), new Vector2(79.5459976F, 8.09500027F), new Vector2(79.9189987F, 9.99400043F));
                    builder.AddCubicBezier(new Vector2(79.9189987F, 9.99400043F), new Vector2(80F, 10.8330002F), new Vector2(80F, 10.8330002F));
                    builder.AddCubicBezier(new Vector2(80F, 10.8330002F), new Vector2(80F, 35.8440018F), new Vector2(80F, 35.8440018F));
                    builder.AddCubicBezier(new Vector2(80F, 62.6629982F), new Vector2(66.8700027F, 80.8960037F), new Vector2(41.2649994F, 89.7860031F));
                    builder.AddCubicBezier(new Vector2(40.4440002F, 90.0709991F), new Vector2(39.5559998F, 90.0709991F), new Vector2(38.7350006F, 89.7860031F));
                    builder.AddCubicBezier(new Vector2(31.4820004F, 87.2679977F), new Vector2(25.2310009F, 84F), new Vector2(19.9950008F, 80F));
                    builder.AddCubicBezier(new Vector2(16.1459999F, 77.0599976F), new Vector2(12.8470001F, 73.723999F), new Vector2(10.1020002F, 70F));
                    builder.AddCubicBezier(new Vector2(3.83500004F, 61.4980011F), new Vector2(0.458999991F, 50.9700012F), new Vector2(0.0439999998F, 38.4970016F));
                    builder.AddCubicBezier(new Vector2(0.0439999998F, 38.4970016F), new Vector2(0F, 35.8440018F), new Vector2(0F, 35.8440018F));
                    builder.AddCubicBezier(new Vector2(0F, 35.8440018F), new Vector2(0F, 10.8330002F), new Vector2(0F, 10.8330002F));
                    builder.AddCubicBezier(new Vector2(0F, 8.53199959F), new Vector2(1.79100001F, 6.66699982F), new Vector2(4F, 6.66699982F));
                    builder.AddCubicBezier(new Vector2(16.2339993F, 6.66699982F), new Vector2(27.2329998F, 1.57500005F), new Vector2(37.1780014F, -8.77999973F));
                    builder.AddCubicBezier(new Vector2(38.7410011F, -10.408F), new Vector2(41.276001F, -10.4069996F), new Vector2(42.8370018F, -8.77700043F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - - ShapeGroup: s
            // - Path
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(37.1629982F, -8.77700043F));
                    builder.AddCubicBezier(new Vector2(31.7689991F, -3.148F), new Vector2(26.0580006F, 0.925999999F), new Vector2(20F, 3.47099996F));
                    builder.AddCubicBezier(new Vector2(16.7670002F, 4.829F), new Vector2(13.4350004F, 5.75299978F), new Vector2(10F, 6.24499989F));
                    builder.AddCubicBezier(new Vector2(8.0340004F, 6.52600002F), new Vector2(6.03399992F, 6.66699982F), new Vector2(4F, 6.66699982F));
                    builder.AddCubicBezier(new Vector2(2.06699991F, 6.66699982F), new Vector2(0.453999996F, 8.09500027F), new Vector2(0.0810000002F, 9.99400043F));
                    builder.AddCubicBezier(new Vector2(0.0810000002F, 9.99400043F), new Vector2(0F, 10.8330002F), new Vector2(0F, 10.8330002F));
                    builder.AddCubicBezier(new Vector2(0F, 10.8330002F), new Vector2(0F, 35.8440018F), new Vector2(0F, 35.8440018F));
                    builder.AddCubicBezier(new Vector2(0F, 62.6629982F), new Vector2(13.1300001F, 80.8960037F), new Vector2(38.7350006F, 89.7860031F));
                    builder.AddCubicBezier(new Vector2(39.5559998F, 90.0709991F), new Vector2(40.4440002F, 90.0709991F), new Vector2(41.2649994F, 89.7860031F));
                    builder.AddCubicBezier(new Vector2(48.5180016F, 87.2679977F), new Vector2(54.769001F, 84F), new Vector2(60.0050011F, 80F));
                    builder.AddCubicBezier(new Vector2(63.8540001F, 77.0599976F), new Vector2(67.1529999F, 73.723999F), new Vector2(69.8980026F, 70F));
                    builder.AddCubicBezier(new Vector2(76.1650009F, 61.4980011F), new Vector2(79.5410004F, 50.9700012F), new Vector2(79.9560013F, 38.4970016F));
                    builder.AddCubicBezier(new Vector2(79.9560013F, 38.4970016F), new Vector2(80F, 35.8440018F), new Vector2(80F, 35.8440018F));
                    builder.AddCubicBezier(new Vector2(80F, 35.8440018F), new Vector2(80F, 10.8330002F), new Vector2(80F, 10.8330002F));
                    builder.AddCubicBezier(new Vector2(80F, 8.53199959F), new Vector2(78.2089996F, 6.66699982F), new Vector2(76F, 6.66699982F));
                    builder.AddCubicBezier(new Vector2(63.7659988F, 6.66699982F), new Vector2(52.7669983F, 1.57500005F), new Vector2(42.8219986F, -8.77999973F));
                    builder.AddCubicBezier(new Vector2(41.2589989F, -10.408F), new Vector2(38.723999F, -10.4069996F), new Vector2(37.1629982F, -8.77700043F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(40F, -40F));
                    builder.AddCubicBezier(new Vector2(51.0460014F, -40F), new Vector2(60F, -31.0459995F), new Vector2(60F, -20F));
                    builder.AddCubicBezier(new Vector2(60F, -20F), new Vector2(60F, -7.68300009F), new Vector2(60F, -7.68300009F));
                    builder.AddCubicBezier(new Vector2(56.6940002F, -9.60200024F), new Vector2(53.3779984F, -12.2309999F), new Vector2(50.0569992F, -15.6960001F));
                    builder.AddCubicBezier(new Vector2(44.5629997F, -21.4300003F), new Vector2(35.4679985F, -21.4360008F), new Vector2(29.9659996F, -15.7069998F));
                    builder.AddCubicBezier(new Vector2(21.5690002F, -6.96400023F), new Vector2(13.0600004F, -3.33299994F), new Vector2(4F, -3.33299994F));
                    builder.AddCubicBezier(new Vector2(-4.11299992F, -3.33299994F), new Vector2(-10F, 3.398F), new Vector2(-10F, 10.8330002F));
                    builder.AddCubicBezier(new Vector2(-10F, 10.8330002F), new Vector2(-10F, 35.9259987F), new Vector2(-10F, 35.9259987F));
                    builder.AddCubicBezier(new Vector2(-10F, 35.9259987F), new Vector2(-9.95400047F, 38.7459984F), new Vector2(-9.95400047F, 38.7459984F));
                    builder.AddCubicBezier(new Vector2(-9.95400047F, 38.7459984F), new Vector2(-9.95100021F, 38.8300018F), new Vector2(-9.95100021F, 38.8300018F));
                    builder.AddCubicBezier(new Vector2(-9.56599998F, 50.3720016F), new Vector2(-6.91499996F, 60.8740005F), new Vector2(-1.78199995F, 70F));
                    builder.AddCubicBezier(new Vector2(-1.78199995F, 70F), new Vector2(-40F, 70F), new Vector2(-40F, 70F));
                    builder.AddCubicBezier(new Vector2(-51.0460014F, 70F), new Vector2(-60F, 61.0460014F), new Vector2(-60F, 50F));
                    builder.AddCubicBezier(new Vector2(-60F, 50F), new Vector2(-60F, -20F), new Vector2(-60F, -20F));
                    builder.AddCubicBezier(new Vector2(-60F, -31.0459995F), new Vector2(-51.0460014F, -40F), new Vector2(-40F, -40F));
                    builder.AddCubicBezier(new Vector2(-40F, -40F), new Vector2(40F, -40F), new Vector2(40F, -40F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - - ShapeGroup: lb
            // - Path
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(40F, -40F));
                    builder.AddCubicBezier(new Vector2(51.0460014F, -40F), new Vector2(60F, -31.0459995F), new Vector2(60F, -20F));
                    builder.AddCubicBezier(new Vector2(60F, -20F), new Vector2(60F, -7.68300009F), new Vector2(60F, -7.68300009F));
                    builder.AddCubicBezier(new Vector2(56.6940002F, -9.60200024F), new Vector2(53.3779984F, -12.2309999F), new Vector2(50.0569992F, -15.6960001F));
                    builder.AddCubicBezier(new Vector2(44.5629997F, -21.4300003F), new Vector2(36.3899994F, -21.6429996F), new Vector2(31.1700001F, -15.6960001F));
                    builder.AddCubicBezier(new Vector2(27.3999996F, -11.4020004F), new Vector2(29.3649998F, -7.09899998F), new Vector2(25.9430008F, -2.8900001F));
                    builder.AddCubicBezier(new Vector2(22.5209999F, 1.31900001F), new Vector2(20F, 3.398F), new Vector2(20F, 10.8330002F));
                    builder.AddCubicBezier(new Vector2(20F, 10.8330002F), new Vector2(20F, 35.9259987F), new Vector2(20F, 35.9259987F));
                    builder.AddCubicBezier(new Vector2(20F, 35.9259987F), new Vector2(20.0470009F, 38.7459984F), new Vector2(20.0470009F, 38.7459984F));
                    builder.AddCubicBezier(new Vector2(20.0470009F, 38.7459984F), new Vector2(20.0489998F, 38.8300018F), new Vector2(20.0489998F, 38.8300018F));
                    builder.AddCubicBezier(new Vector2(20.434F, 50.3720016F), new Vector2(20.434F, 64.2369995F), new Vector2(22.1270008F, 70F));
                    builder.AddCubicBezier(new Vector2(22.1270008F, 70F), new Vector2(-40F, 70F), new Vector2(-40F, 70F));
                    builder.AddCubicBezier(new Vector2(-51.0460014F, 70F), new Vector2(-60F, 61.0460014F), new Vector2(-60F, 50F));
                    builder.AddCubicBezier(new Vector2(-60F, 50F), new Vector2(-60F, -20F), new Vector2(-60F, -20F));
                    builder.AddCubicBezier(new Vector2(-60F, -31.0459995F), new Vector2(-51.0460014F, -40F), new Vector2(-40F, -40F));
                    builder.AddCubicBezier(new Vector2(-40F, -40F), new Vector2(40F, -40F), new Vector2(40F, -40F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-20F, 15F));
                    builder.AddCubicBezier(new Vector2(-20F, 15F), new Vector2(-20F, 5F), new Vector2(-20F, 5F));
                    builder.AddCubicBezier(new Vector2(-20F, -5F), new Vector2(-12.2229996F, -15F), new Vector2(0F, -15F));
                    builder.AddCubicBezier(new Vector2(12.2229996F, -15F), new Vector2(20F, -5F), new Vector2(20F, 5F));
                    builder.AddCubicBezier(new Vector2(20F, 5F), new Vector2(20F, 15F), new Vector2(20F, 15F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-19.743F, 15.7650003F));
                    builder.AddCubicBezier(new Vector2(-19.743F, 15.7650003F), new Vector2(-22.8710003F, -3.98900008F), new Vector2(-22.8710003F, -3.98900008F));
                    builder.AddCubicBezier(new Vector2(-24.4349995F, -13.8660002F), new Vector2(-18.3190002F, -24.9589996F), new Vector2(-6.24599981F, -26.8710003F));
                    builder.AddCubicBezier(new Vector2(5.82700014F, -28.7830009F), new Vector2(15.0719995F, -20.1229992F), new Vector2(16.6359997F, -10.2460003F));
                    builder.AddCubicBezier(new Vector2(16.6359997F, -10.2460003F), new Vector2(16.7929993F, -9.25899982F), new Vector2(16.7929993F, -9.25899982F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostSkyBlue_FF6ABEE2()
            {
                return _colorBrush_AlmostSkyBlue_FF6ABEE2 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x6A, 0xBE, 0xE2));
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: s
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostDimGray_FF6C7178()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0x6C, 0x71, 0x78));
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: s
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostSilver_FFC5C6C8()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xC5, 0xC6, 0xC8));
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: s
            CompositionLinearGradientBrush LinearGradientBrush()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostDimGray_FF6C7178());
                colorStops.Add(GradientStop_1_AlmostSilver_FFC5C6C8());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(41.5040016F, 89.6289978F);
                result.EndPoint = new Vector2(42.6800003F, -3.79500008F);
                return result;
            }

            CompositionPath Path_0()
            {
                var result = _path_0 = new CompositionPath(Geometry_2());
                return result;
            }

            CompositionPath Path_1()
            {
                var result = _path_1 = new CompositionPath(Geometry_4());
                return result;
            }

            CompositionPath Path_2()
            {
                var result = _path_2 = new CompositionPath(Geometry_5());
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: s
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_0(), RootProgress());
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: lb
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_1(), _rootProgress);
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: lt
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_2(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: icon
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.Offset = new Vector2(100F, 100F);
                result.FillBrush = LinearGradientBrush();
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_0(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: icon
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.Offset = new Vector2(100F, 100F);
                result.FillBrush = ColorBrush_AlmostSkyBlue_FF6ABEE2();
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_1(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: icon
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.Offset = new Vector2(100F, 45F);
                result.StrokeBrush = _colorBrush_AlmostSkyBlue_FF6ABEE2;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 20F;
                StartProgressBoundAnimation(result, "Scale", _scaleVector2Animation_1, _rootProgress);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Shape tree root for layer: icon
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: s
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, new CompositionPath(Geometry_0()), HoldThenStepEasingFunction());
                // Frame 27.
                result.InsertKeyFrame(0.899999976F, new CompositionPath(Geometry_1()), CubicBezierEasingFunction_0());
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: lb
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), _stepThenHoldEasingFunction);
                // Frame 1.
                result.InsertKeyFrame(0.0333333351F, _path_0, _holdThenStepEasingFunction);
                // Frame 13.
                result.InsertKeyFrame(0.433333337F, new CompositionPath(Geometry_3()), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.833000004F, 0.833000004F)));
                // Frame 29.
                result.InsertKeyFrame(0.966666639F, _path_0, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: lt
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_2()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_1(), _holdThenStepEasingFunction);
                // Frame 10.
                result.InsertKeyFrame(0.333333343F, Path_2(), _cubicBezierEasingFunction_0);
                // Frame 20.
                result.InsertKeyFrame(0.666666687F, _path_2, _cubicBezierEasingFunction_0);
                // Frame 29.
                result.InsertKeyFrame(0.966666639F, _path_1, _cubicBezierEasingFunction_0);
                return result;
            }

            // Shape tree root for layer: icon
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                var shapes = result.Shapes;
                // ShapeGroup: s
                shapes.Add(SpriteShape_0());
                // ShapeGroup: lb
                shapes.Add(SpriteShape_1());
                // ShapeGroup: lt
                shapes.Add(SpriteShape_2());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: s
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.100000001F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                // Frame 11.
                result.InsertKeyFrame(0.366666675F, new Vector2(1.10000002F, 1.10000002F), _cubicBezierEasingFunction_0);
                // Frame 19.
                result.InsertKeyFrame(0.633333325F, new Vector2(0.949999988F, 0.949999988F), _cubicBezierEasingFunction_0);
                // Frame 27.
                result.InsertKeyFrame(0.899999976F, new Vector2(1F, 1F), _cubicBezierEasingFunction_0);
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = _scaleVector2Animation_1 = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), _cubicBezierEasingFunction_0);
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), _cubicBezierEasingFunction_0);
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal Privacy_AnimatedVisual_UAPv11(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }

        sealed class Privacy_AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 5000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_AlmostSkyBlue_FF6ABEE2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            Vector2KeyFrameAnimation _scaleVector2Animation_1;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: s
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(42.8370018F, -8.77700043F));
                    builder.AddCubicBezier(new Vector2(48.230999F, -3.148F), new Vector2(53.9420013F, 0.925999999F), new Vector2(60F, 3.47099996F));
                    builder.AddCubicBezier(new Vector2(63.2330017F, 4.829F), new Vector2(66.5650024F, 5.75299978F), new Vector2(70F, 6.24499989F));
                    builder.AddCubicBezier(new Vector2(71.9660034F, 6.52600002F), new Vector2(73.9660034F, 6.66699982F), new Vector2(76F, 6.66699982F));
                    builder.AddCubicBezier(new Vector2(77.9329987F, 6.66699982F), new Vector2(79.5459976F, 8.09500027F), new Vector2(79.9189987F, 9.99400043F));
                    builder.AddLine(new Vector2(80F, 10.8330002F));
                    builder.AddLine(new Vector2(80F, 35.8440018F));
                    builder.AddCubicBezier(new Vector2(80F, 62.6629982F), new Vector2(66.8700027F, 80.8960037F), new Vector2(41.2649994F, 89.7860031F));
                    builder.AddCubicBezier(new Vector2(40.4440002F, 90.0709991F), new Vector2(39.5559998F, 90.0709991F), new Vector2(38.7350006F, 89.7860031F));
                    builder.AddCubicBezier(new Vector2(31.4820004F, 87.2679977F), new Vector2(25.2310009F, 84F), new Vector2(19.9950008F, 80F));
                    builder.AddCubicBezier(new Vector2(16.1459999F, 77.0599976F), new Vector2(12.8470001F, 73.723999F), new Vector2(10.1020002F, 70F));
                    builder.AddCubicBezier(new Vector2(3.83500004F, 61.4980011F), new Vector2(0.458999991F, 50.9700012F), new Vector2(0.0439999998F, 38.4970016F));
                    builder.AddLine(new Vector2(0F, 35.8440018F));
                    builder.AddLine(new Vector2(0F, 10.8330002F));
                    builder.AddCubicBezier(new Vector2(0F, 8.53199959F), new Vector2(1.79100001F, 6.66699982F), new Vector2(4F, 6.66699982F));
                    builder.AddCubicBezier(new Vector2(16.2339993F, 6.66699982F), new Vector2(27.2329998F, 1.57500005F), new Vector2(37.1780014F, -8.77999973F));
                    builder.AddCubicBezier(new Vector2(38.7410011F, -10.408F), new Vector2(41.276001F, -10.4069996F), new Vector2(42.8370018F, -8.77700043F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: lb
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(40F, -40F));
                    builder.AddCubicBezier(new Vector2(51.0460014F, -40F), new Vector2(60F, -31.0459995F), new Vector2(60F, -20F));
                    builder.AddLine(new Vector2(60F, -7.68300009F));
                    builder.AddCubicBezier(new Vector2(56.6940002F, -9.60200024F), new Vector2(53.3779984F, -12.2309999F), new Vector2(50.0569992F, -15.6960001F));
                    builder.AddCubicBezier(new Vector2(44.5629997F, -21.4300003F), new Vector2(35.4679985F, -21.4360008F), new Vector2(29.9659996F, -15.7069998F));
                    builder.AddCubicBezier(new Vector2(21.5690002F, -6.96400023F), new Vector2(13.0600004F, -3.33299994F), new Vector2(4F, -3.33299994F));
                    builder.AddCubicBezier(new Vector2(-4.11299992F, -3.33299994F), new Vector2(-10F, 3.398F), new Vector2(-10F, 10.8330002F));
                    builder.AddLine(new Vector2(-10F, 35.9259987F));
                    builder.AddLine(new Vector2(-9.95400047F, 38.7459984F));
                    builder.AddLine(new Vector2(-9.95100021F, 38.8300018F));
                    builder.AddCubicBezier(new Vector2(-9.56599998F, 50.3720016F), new Vector2(-6.91499996F, 60.8740005F), new Vector2(-1.78199995F, 70F));
                    builder.AddLine(new Vector2(-40F, 70F));
                    builder.AddCubicBezier(new Vector2(-51.0460014F, 70F), new Vector2(-60F, 61.0460014F), new Vector2(-60F, 50F));
                    builder.AddLine(new Vector2(-60F, -20F));
                    builder.AddCubicBezier(new Vector2(-60F, -31.0459995F), new Vector2(-51.0460014F, -40F), new Vector2(-40F, -40F));
                    builder.AddLine(new Vector2(40F, -40F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: lt
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-20F, 15F));
                    builder.AddLine(new Vector2(-20F, 5F));
                    builder.AddCubicBezier(new Vector2(-20F, -5F), new Vector2(-12.2229996F, -15F), new Vector2(0F, -15F));
                    builder.AddCubicBezier(new Vector2(12.2229996F, -15F), new Vector2(20F, -5F), new Vector2(20F, 5F));
                    builder.AddLine(new Vector2(20F, 15F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostSkyBlue_FF6ABEE2()
            {
                return _colorBrush_AlmostSkyBlue_FF6ABEE2 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x6A, 0xBE, 0xE2));
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: s
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostDimGray_FF6C7178()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0x6C, 0x71, 0x78));
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: s
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostSilver_FFC5C6C8()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xC5, 0xC6, 0xC8));
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: s
            CompositionLinearGradientBrush LinearGradientBrush()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostDimGray_FF6C7178());
                colorStops.Add(GradientStop_1_AlmostSilver_FFC5C6C8());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(41.5040016F, 89.6289978F);
                result.EndPoint = new Vector2(42.6800003F, -3.79500008F);
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: s
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: lb
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: lt
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // Shape tree root for layer: icon
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.Offset = new Vector2(100F, 100F);
                result.FillBrush = LinearGradientBrush();
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_0(), RootProgress());
                return result;
            }

            // Shape tree root for layer: icon
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.Offset = new Vector2(100F, 100F);
                result.FillBrush = ColorBrush_AlmostSkyBlue_FF6ABEE2();
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_1(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: icon
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.Offset = new Vector2(100F, 45F);
                result.StrokeBrush = _colorBrush_AlmostSkyBlue_FF6ABEE2;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 20F;
                StartProgressBoundAnimation(result, "Scale", _scaleVector2Animation_1, _rootProgress);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Shape tree root for layer: icon
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Shape tree root for layer: icon
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                var shapes = result.Shapes;
                // ShapeGroup: s
                shapes.Add(SpriteShape_0());
                // ShapeGroup: lb
                shapes.Add(SpriteShape_1());
                // ShapeGroup: lt
                shapes.Add(SpriteShape_2());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: s
            // Scale
            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: s
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.100000001F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.366666675F, new Vector2(1.10000002F, 1.10000002F), CubicBezierEasingFunction_0());
                // Frame 19.
                result.InsertKeyFrame(0.633333325F, new Vector2(0.949999988F, 0.949999988F), _cubicBezierEasingFunction_0);
                // Frame 27.
                result.InsertKeyFrame(0.899999976F, new Vector2(1F, 1F), _cubicBezierEasingFunction_0);
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = _scaleVector2Animation_1 = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), _cubicBezierEasingFunction_0);
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), _cubicBezierEasingFunction_0);
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal Privacy_AnimatedVisual_UAPv7(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
