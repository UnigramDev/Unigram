//
// Copyright Fela Ameghino 2015-2024
//
// Distributed under the GNU General Public License v3.0. (See accompanying
// file LICENSE or copy at https://www.gnu.org/licenses/gpl-3.0.txt)
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.0-build.5+g109463c06a
//       
//       Command:
//           LottieGen -DisableTranslationOptimizer -GenerateColorBindings -Language CSharp -MinimumUapVersion 8 -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.7 -InputFile unlock.json
//       
//       Input file:
//           unlock.json (3591 bytes created 15:50+02:00 Jun 14 2022)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   101 |
// |--------------------------+-------|
// | Expression animators     |     9 |
// | KeyFrame animators       |     5 |
// | Reference parameters     |    10 |
// | Expression operations    |     8 |
// |--------------------------+-------|
// | Animated brushes         |     2 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     7 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     8 |
// | CompositionSpriteShapes  |     2 |
// |--------------------------+-------|
// | Brushes                  |     2 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Microsoft.UI;
using Microsoft.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        unlock
    // Frame rate:  60 fps
    // Frame count: 120
    // Duration:    2000.0 mS
    // ___________________________________________________________
    // | Theme property |   Accessor   | Type  |  Default value  |
    // |________________|______________|_______|_________________|
    // | #000000        | Color_000000 | Color | #FF000000 Black |
    // -----------------------------------------------------------
    public sealed partial class Unlock
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 2.000 seconds.
        internal const long c_durationTicks = 20000000;

        // Theme property: Color_000000.
        internal static readonly Color c_themeColor_000000 = Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF);

        CompositionPropertySet _themeProperties;
        Color _themeColor_000000 = c_themeColor_000000;

        // Theme properties.
        public Color Color_000000
        {
            get => _themeColor_000000;
            set
            {
                _themeColor_000000 = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Color_000000", ColorAsVector4((Color)_themeColor_000000));
                }
            }
        }

        static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties == null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Color_000000", ColorAsVector4((Color)Color_000000));
            }
            return _themeProperties;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (Unlock_AnimatedVisual.IsRuntimeCompatible())
            {
                var res =
                    new Unlock_AnimatedVisual(
                        compositor,
                        _themeProperties
                        );
                res.CreateAnimations();
                return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 120d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 120d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPointerOver_Start", 0.0 },
                { "NormalToPointerOver_End", 1 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
            if (propertyName == "Color_000000")
            {
                _themeColor_000000 = value;
            }
            else
            {
                return;
            }

            if (_themeProperties != null)
            {
                _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
            }
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Unlock_AnimatedVisual : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 20000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Color_000000_0;
            CompositionColorBrush _themeColor_Color_000000_1;
            CompositionContainerShape _containerShape_0;
            CompositionContainerShape _containerShape_4;
            ContainerVisual _root;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            // - - - - - - - Layer aggregator
            // - - - - ShapeGroup: lock2
            // - - Path 1
            CanvasGeometry Geometry()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-4F, -1.5F));
                    builder.AddLine(new Vector2(-4F, -4F));
                    builder.AddCubicBezier(new Vector2(-4F, -6.19999981F), new Vector2(-2.20000005F, -8F), new Vector2(0F, -8F));
                    builder.AddCubicBezier(new Vector2(2.20000005F, -8F), new Vector2(4F, -6.19999981F), new Vector2(4F, -4F));
                    builder.AddLine(new Vector2(4F, 8F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: lock1
            // Rectangle Path 1
            // Color bound to theme property value: Color_000000
            CompositionColorBrush ThemeColor_Color_000000_0()
            {
                if (_themeColor_Color_000000_0 != null) { return _themeColor_Color_000000_0; }
                var result = _themeColor_Color_000000_0 = _c.CreateColorBrush();
                BindProperty(_themeColor_Color_000000_0, "Color", "ColorRGB(_theme.Color_000000.W,_theme.Color_000000.X,_theme.Color_000000.Y,_theme.Color_000000.Z)", "_theme", _themeProperties);
                return result;
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: lock2
            // Path 1
            // Color bound to theme property value: Color_000000
            CompositionColorBrush ThemeColor_Color_000000_1()
            {
                if (_themeColor_Color_000000_1 != null) { return _themeColor_Color_000000_1; }
                var result = _themeColor_Color_000000_1 = _c.CreateColorBrush();
                BindProperty(_themeColor_Color_000000_1, "Color", "ColorRGB(_theme.Color_000000.W,_theme.Color_000000.X,_theme.Color_000000.Y,_theme.Color_000000.Z)", "_theme", _themeProperties);
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_0()
            {
                if (_containerShape_0 != null) { return _containerShape_0; }
                var result = _containerShape_0 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, -12F);
                result.Scale = new Vector2(0.166669995F, 0.166669995F);
                result.Shapes.Add(ContainerShape_1());
                return result;
            }

            // - Layer aggregator
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: lock1
                result.Shapes.Add(ContainerShape_2());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: lock1
            CompositionContainerShape ContainerShape_2()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(6F, 6F);
                result.Shapes.Add(ContainerShape_3());
                return result;
            }

            // - - - Layer aggregator
            // ShapeGroup: lock1
            CompositionContainerShape ContainerShape_3()
            {
                var result = _c.CreateContainerShape();
                // Rectangle Path 1
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_4()
            {
                if (_containerShape_4 != null) { return _containerShape_4; }
                var result = _containerShape_4 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(24F, 0F);
                result.Scale = new Vector2(0.166669995F, 0.166669995F);
                result.Shapes.Add(ContainerShape_5());
                return result;
            }

            // - Layer aggregator
            CompositionContainerShape ContainerShape_5()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: lock2
                result.Shapes.Add(ContainerShape_6());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: lock2
            CompositionContainerShape ContainerShape_6()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(6F, 6F);
                result.Shapes.Add(ContainerShape_7());
                return result;
            }

            // - - - Layer aggregator
            // ShapeGroup: lock2
            CompositionContainerShape ContainerShape_7()
            {
                var result = _c.CreateContainerShape();
                // Path 1
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: lock2
            // Path 1
            CompositionPathGeometry PathGeometry()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry()));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: lock1
            // Rectangle Path 1
            // Rectangle Path 1.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_14x12()
            {
                var result = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(4F, 4F);
                result.Offset = new Vector2(-7F, -6F);
                result.Size = new Vector2(14F, 12F);
                return result;
            }

            // - - - - Layer aggregator
            // - ShapeGroup: lock1
            // Rectangle Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(RoundedRectangle_14x12());
                result.FillBrush = ThemeColor_Color_000000_0();
                return result;
            }

            // - - - - Layer aggregator
            // - ShapeGroup: lock2
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry());
                result.StrokeBrush = ThemeColor_Color_000000_1();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeDashOffset = 0F;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                propertySet.InsertScalar("t0", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.0833333358F, -15F, _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F)));
                // Frame 20.
                result.InsertKeyFrame(0.166666672F, -7.40700006F, _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 0.805000007F)));
                // Frame 30.
                result.InsertKeyFrame(0.25F, -15F, _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F)));
                // Frame 40.
                result.InsertKeyFrame(0.333333343F, 0F, _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F)));
                return result;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.0833333358F, 15F, _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F)));
                // Frame 20.
                result.InsertKeyFrame(0.166666672F, 7.40700006F, _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 0.805000007F)));
                // Frame 30.
                result.InsertKeyFrame(0.25F, 15F, _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F)));
                // Frame 40.
                result.InsertKeyFrame(0.333333343F, 0F, _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F)));
                return result;
            }

            ScalarKeyFrameAnimation t0ScalarAnimation_0_to_1()
            {
                // Frame 20.
                var result = CreateScalarKeyFrameAnimation(0.166666687F, 0F, StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 30.
                result.InsertKeyFrame(0.249999985F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.151999995F, 1F), new Vector2(0.666999996F, 1F)));
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(30F, 30F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_0());
                shapes.Add(ContainerShape_4());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsFinalStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsInitialStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - Layer aggregator
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(-5F, 28F), HoldThenStepEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 10.
                result.InsertKeyFrame(0.0833333358F, new Vector2(-5F, 28.8330002F), _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F)));
                // Frame 20.
                result.InsertKeyFrame(0.166666672F, new Vector2(-5F, 28.6170006F), _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.902999997F, 0F)));
                // Frame 30.
                result.InsertExpressionKeyFrame(0.249999985F, "Pow(1-_.t0,3)*Vector2(-5,28.617)+(3*Square(1-_.t0)*_.t0*Vector2(-5,28.401))+(3*(1-_.t0)*Square(_.t0)*Vector2(-5,28.833))+(Pow(_.t0,3)*Vector2(-5,28.833))", StepThenHoldEasingFunction());
                // Frame 40.
                result.InsertKeyFrame(0.333333343F, new Vector2(-5F, 28.8330002F), StepThenHoldEasingFunction());
                // Frame 40.
                result.InsertKeyFrame(0.333333373F, new Vector2(-5F, 28F), _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F)));
                return result;
            }

            // - Layer aggregator
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(-5F, 14F), HoldThenStepEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 10.
                result.InsertKeyFrame(0.0833333358F, new Vector2(-5F, 13.1669998F), _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F)));
                // Frame 20.
                result.InsertKeyFrame(0.166666672F, new Vector2(-5F, 13.3830004F), _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.902999997F, 0F)));
                // Frame 30.
                result.InsertExpressionKeyFrame(0.249999985F, "Pow(1-_.t0,3)*Vector2(-5,13.383)+(3*Square(1-_.t0)*_.t0*Vector2(-5,13.599))+(3*(1-_.t0)*Square(_.t0)*Vector2(-5,13.167))+(Pow(_.t0,3)*Vector2(-5,13.167))", StepThenHoldEasingFunction());
                // Frame 40.
                result.InsertKeyFrame(0.333333343F, new Vector2(-5F, 13.1669998F), StepThenHoldEasingFunction());
                // Frame 40.
                result.InsertKeyFrame(0.333333373F, new Vector2(-5F, 14F), _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F)));
                return result;
            }

            internal Unlock_AnimatedVisual(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(30F, 30F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_0.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_0());
                var controller = _containerShape_0.TryGetAnimationController("RotationAngleInDegrees");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_0.StartAnimation("Offset", OffsetVector2Animation_0());
                controller = _containerShape_0.TryGetAnimationController("Offset");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_4.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_1());
                controller = _containerShape_4.TryGetAnimationController("RotationAngleInDegrees");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_4.StartAnimation("Offset", OffsetVector2Animation_1());
                controller = _containerShape_4.TryGetAnimationController("Offset");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _root.Properties.StartAnimation("t0", t0ScalarAnimation_0_to_1());
                controller = _root.Properties.TryGetAnimationController("t0");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
            }

            public void DestroyAnimations()
            {
                _containerShape_0.StopAnimation("RotationAngleInDegrees");
                _containerShape_0.StopAnimation("Offset");
                _containerShape_4.StopAnimation("RotationAngleInDegrees");
                _containerShape_4.StopAnimation("Offset");
                _root.Properties.StopAnimation("t0");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
