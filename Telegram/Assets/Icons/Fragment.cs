//
// Copyright Fela Ameghino 2015-2024
//
// Distributed under the GNU General Public License v3.0. (See accompanying
// file LICENSE or copy at https://www.gnu.org/licenses/gpl-3.0.txt)
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.2-build.19+gd2624816c7
//       
//       Command:
//           LottieGen -GenerateColorBindings -Language CSharp -MinimumUapVersion 8 -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.7 -InputFile Icon 1.json
//       
//       Input file:
//           Icon 1.json (14362 bytes created 17:21+04:00 Nov 29 2022)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |            93 |           71 |
// |--------------------------+---------------+--------------|
// | Expression animators     |            16 |           13 |
// | KeyFrame animators       |            10 |            7 |
// | Reference parameters     |            16 |           13 |
// | Expression operations    |             8 |            8 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             2 |            2 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             3 |            3 |
// | PathKeyFrameAnimations   |             3 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             1 |            1 |
// | ShapeVisuals             |             1 |            1 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             1 |            1 |
// | CompositionSpriteShapes  |             3 |            3 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             2 |            2 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Microsoft.UI;
using Microsoft.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        1
    // Frame rate:  60 fps
    // Frame count: 59
    // Duration:    983.3 mS
    // ___________________________________________________________
    // | Theme property |   Accessor   | Type  |  Default value  |
    // |________________|______________|_______|_________________|
    // | #FFFFFF        | Color_000000 | Color | #FFFFFFFF White |
    // -----------------------------------------------------------
    public sealed partial class Fragment
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 0.983 seconds.
        internal const long c_durationTicks = 9833333;

        // Theme property: Color_000000.
        internal static readonly Color c_themeColor_000000 = Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF);

        CompositionPropertySet _themeProperties;
        Color _themeColor_000000 = c_themeColor_000000;

        // Theme properties.
        public Color Color_000000
        {
            get => _themeColor_000000;
            set
            {
                _themeColor_000000 = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Color_000000", ColorAsVector4((Color)_themeColor_000000));
                }
            }
        }

        static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties == null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Color_000000", ColorAsVector4((Color)Color_000000));
            }
            return _themeProperties;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (Icon_1_AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                var res =
                    new Icon_1_AnimatedVisual_UAPv11(
                        compositor,
                        _themeProperties
                        );
                res.CreateAnimations();
                return res;
            }

            if (Icon_1_AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                var res =
                    new Icon_1_AnimatedVisual_UAPv7(
                        compositor,
                        _themeProperties
                        );
                res.CreateAnimations();
                return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 59d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(9833333);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 59d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new DictionaryStringDouble
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
            if (propertyName == "Color_000000")
            {
                _themeColor_000000 = value;
            }
            else
            {
                return;
            }

            if (_themeProperties != null)
            {
                _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
            }
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Icon_1_AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 9833333;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Color_000000_0;
            CompositionColorBrush _themeColor_Color_000000_1;
            CompositionContainerShape _containerShape;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPath _path_2;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            CompositionSpriteShape _spriteShape_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            CubicBezierEasingFunction _cubicBezierEasingFunction_3;
            CubicBezierEasingFunction _cubicBezierEasingFunction_4;
            CubicBezierEasingFunction _cubicBezierEasingFunction_5;
            CubicBezierEasingFunction _cubicBezierEasingFunction_6;
            CubicBezierEasingFunction _cubicBezierEasingFunction_7;
            CubicBezierEasingFunction _cubicBezierEasingFunction_8;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            void BindProperty2(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName0,
                CompositionObject referencedObject0,
                string referenceParameterName1,
                CompositionObject referencedObject1)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName0, referencedObject0);
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName1, referencedObject1);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            CanvasGeometry Geometry_00()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(5.15700006F, -47.2999992F));
                    builder.AddCubicBezier(new Vector2(5.15700006F, -47.2999992F), new Vector2(131.852997F, -103.149002F), new Vector2(131.852997F, -103.149002F));
                    builder.AddCubicBezier(new Vector2(136.134995F, -105.07F), new Vector2(134.764008F, -112.473999F), new Vector2(130.070999F, -112.473999F));
                    builder.AddCubicBezier(new Vector2(130.070999F, -112.473999F), new Vector2(-129.632996F, -112.473999F), new Vector2(-129.632996F, -112.473999F));
                    builder.AddCubicBezier(new Vector2(-134.326004F, -112.473999F), new Vector2(-135.697006F, -105.07F), new Vector2(-131.414993F, -103.149002F));
                    builder.AddCubicBezier(new Vector2(-131.414993F, -103.149002F), new Vector2(-4.71899986F, -47.2999992F), new Vector2(-4.71899986F, -47.2999992F));
                    builder.AddCubicBezier(new Vector2(-1.57799995F, -45.8909988F), new Vector2(2.01600003F, -45.8909988F), new Vector2(5.15700006F, -47.2999992F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_01()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(64.4069977F, -48.0999985F));
                    builder.AddCubicBezier(new Vector2(64.4069977F, -48.0999985F), new Vector2(94.8529968F, -116.598F), new Vector2(94.8529968F, -116.598F));
                    builder.AddCubicBezier(new Vector2(98.5F, -120.75F), new Vector2(95.7639999F, -125.922997F), new Vector2(91.0709991F, -125.922997F));
                    builder.AddCubicBezier(new Vector2(91.0709991F, -125.922997F), new Vector2(-133.132996F, -84.473999F), new Vector2(-133.132996F, -84.473999F));
                    builder.AddCubicBezier(new Vector2(-137.826004F, -84.473999F), new Vector2(-139.197006F, -77.0699997F), new Vector2(-134.914993F, -75.1490021F));
                    builder.AddCubicBezier(new Vector2(-134.914993F, -75.1490021F), new Vector2(50.2809982F, -40.0999985F), new Vector2(50.2809982F, -40.0999985F));
                    builder.AddCubicBezier(new Vector2(53.4220009F, -38.6910019F), new Vector2(60F, -39F), new Vector2(64.4069977F, -48.0999985F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_02()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-71.6360016F, -55.6599998F));
                    builder.AddCubicBezier(new Vector2(-71.6360016F, -55.6599998F), new Vector2(130.182999F, -92.5009995F), new Vector2(130.182999F, -92.5009995F));
                    builder.AddCubicBezier(new Vector2(134.744995F, -93.8300018F), new Vector2(133.796997F, -101.959F), new Vector2(129.350998F, -102.531998F));
                    builder.AddCubicBezier(new Vector2(129.350998F, -102.531998F), new Vector2(-80.4660034F, -120.843002F), new Vector2(-80.4660034F, -120.843002F));
                    builder.AddCubicBezier(new Vector2(-84.0510025F, -121.116997F), new Vector2(-86.7389984F, -117.963997F), new Vector2(-86.4580002F, -115.392998F));
                    builder.AddCubicBezier(new Vector2(-86.4580002F, -115.392998F), new Vector2(-78.2740021F, -58.2789993F), new Vector2(-78.2740021F, -58.2789993F));
                    builder.AddCubicBezier(new Vector2(-78.1269989F, -56.5130005F), new Vector2(-75.3710022F, -54.7550011F), new Vector2(-71.6360016F, -55.6599998F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_03()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-85.8339996F, -57.4379997F));
                    builder.AddCubicBezier(new Vector2(-85.8339996F, -57.4379997F), new Vector2(129.764999F, -89.8379974F), new Vector2(129.764999F, -89.8379974F));
                    builder.AddCubicBezier(new Vector2(134.397003F, -91.0189972F), new Vector2(133.554993F, -99.3290024F), new Vector2(129.171005F, -100.045998F));
                    builder.AddCubicBezier(new Vector2(129.171005F, -100.045998F), new Vector2(-63.1739998F, -122.623001F), new Vector2(-63.1739998F, -122.623001F));
                    builder.AddCubicBezier(new Vector2(-66.4820023F, -122.966003F), new Vector2(-69.5F, -120.875F), new Vector2(-70.2190018F, -118.141998F));
                    builder.AddCubicBezier(new Vector2(-70.2190018F, -118.141998F), new Vector2(-91.663002F, -60.7120018F), new Vector2(-91.663002F, -60.7120018F));
                    builder.AddCubicBezier(new Vector2(-92.2639999F, -58.8569984F), new Vector2(-89.7170029F, -56.6590004F), new Vector2(-85.8339996F, -57.4379997F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_04()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-130.384003F, -71.7910004F));
                    builder.AddCubicBezier(new Vector2(-130.384003F, -71.7910004F), new Vector2(129.552002F, -72.5F), new Vector2(129.552002F, -72.5F));
                    builder.AddCubicBezier(new Vector2(134.533005F, -72.564003F), new Vector2(134.220993F, -79.1259995F), new Vector2(130.145004F, -80.3300018F));
                    builder.AddCubicBezier(new Vector2(130.145004F, -80.3300018F), new Vector2(2.52200007F, -126.625F), new Vector2(2.52200007F, -126.625F));
                    builder.AddCubicBezier(new Vector2(0.598999977F, -127.200996F), new Vector2(-0.808000028F, -127.269997F), new Vector2(-2.78600001F, -126.421997F));
                    builder.AddCubicBezier(new Vector2(-2.78600001F, -126.421997F), new Vector2(-132.166F, -77.2939987F), new Vector2(-132.166F, -77.2939987F));
                    builder.AddCubicBezier(new Vector2(-136.509995F, -75.5859985F), new Vector2(-135.009995F, -71.8909988F), new Vector2(-130.384003F, -71.7910004F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_05()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-130.186996F, -94.6989975F));
                    builder.AddCubicBezier(new Vector2(-130.186996F, -94.6989975F), new Vector2(80.4000015F, -54.3950005F), new Vector2(80.4000015F, -54.3950005F));
                    builder.AddCubicBezier(new Vector2(86.8759995F, -53F), new Vector2(87.25F, -58.375F), new Vector2(86.6689987F, -61.3499985F));
                    builder.AddCubicBezier(new Vector2(86.6689987F, -61.3499985F), new Vector2(66.9940033F, -117.152F), new Vector2(66.9940033F, -117.152F));
                    builder.AddCubicBezier(new Vector2(65.0699997F, -117.783997F), new Vector2(65.9140015F, -120.359001F), new Vector2(63.9360008F, -119.429001F));
                    builder.AddCubicBezier(new Vector2(63.9360008F, -119.429001F), new Vector2(-131.968994F, -100.731003F), new Vector2(-131.968994F, -100.731003F));
                    builder.AddCubicBezier(new Vector2(-136.313004F, -98.8580017F), new Vector2(-134.813004F, -94.8079987F), new Vector2(-130.186996F, -94.6989975F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_06()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-125.399002F, -102.121002F));
                    builder.AddCubicBezier(new Vector2(-125.399002F, -102.121002F), new Vector2(37.0270004F, -50.6629982F), new Vector2(37.0270004F, -50.6629982F));
                    builder.AddCubicBezier(new Vector2(42.9049988F, -49.8339996F), new Vector2(43.5F, -53F), new Vector2(46.1160011F, -55.3429985F));
                    builder.AddCubicBezier(new Vector2(46.1160011F, -55.3429985F), new Vector2(93.3099976F, -112.128998F), new Vector2(93.3099976F, -112.128998F));
                    builder.AddCubicBezier(new Vector2(91.3860016F, -112.769997F), new Vector2(93.1299973F, -116.248001F), new Vector2(91.1520004F, -115.305F));
                    builder.AddCubicBezier(new Vector2(91.1520004F, -115.305F), new Vector2(-127.181F, -108.238998F), new Vector2(-127.181F, -108.238998F));
                    builder.AddCubicBezier(new Vector2(-131.524994F, -106.339996F), new Vector2(-130.024994F, -102.232002F), new Vector2(-125.399002F, -102.121002F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_07()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-130.593002F, -103.106003F));
                    builder.AddCubicBezier(new Vector2(-130.593002F, -103.106003F), new Vector2(-4.90700006F, -47.5719986F), new Vector2(-4.90700006F, -47.5719986F));
                    builder.AddCubicBezier(new Vector2(-1.75F, -46F), new Vector2(2.25F, -46.25F), new Vector2(7.28800011F, -48.5279999F));
                    builder.AddCubicBezier(new Vector2(7.28800011F, -48.5279999F), new Vector2(131.033997F, -103.254997F), new Vector2(131.033997F, -103.254997F));
                    builder.AddCubicBezier(new Vector2(137.625F, -105.625F), new Vector2(134F, -113F), new Vector2(128.727005F, -112.274002F));
                    builder.AddCubicBezier(new Vector2(128.727005F, -112.274002F), new Vector2(-127.875F, -113.297997F), new Vector2(-127.875F, -113.297997F));
                    builder.AddCubicBezier(new Vector2(-135F, -113F), new Vector2(-137F, -105.875F), new Vector2(-130.593002F, -103.106003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_08()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(9.81299973F, -21.9489994F));
                    builder.AddCubicBezier(new Vector2(9.81299973F, -21.9489994F), new Vector2(10.0609999F, 104.985001F), new Vector2(10.0609999F, 104.985001F));
                    builder.AddCubicBezier(new Vector2(10.1940002F, 113.538002F), new Vector2(18.7110004F, 115.084999F), new Vector2(23.5949993F, 107.963997F));
                    builder.AddCubicBezier(new Vector2(23.5949993F, 107.963997F), new Vector2(141.378006F, -74.5189972F), new Vector2(141.378006F, -74.5189972F));
                    builder.AddCubicBezier(new Vector2(144.710999F, -79.9990005F), new Vector2(139.423004F, -86.2360001F), new Vector2(131.647995F, -82.5599976F));
                    builder.AddCubicBezier(new Vector2(131.647995F, -82.5599976F), new Vector2(14.2860003F, -29.6749992F), new Vector2(14.2860003F, -29.6749992F));
                    builder.AddCubicBezier(new Vector2(10.5930004F, -27.8299999F), new Vector2(9.81299973F, -25.7460003F), new Vector2(9.81299973F, -21.9489994F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_09()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(69.125F, -20.9489994F));
                    builder.AddCubicBezier(new Vector2(69.125F, -20.9489994F), new Vector2(28.0610008F, 98.4029999F), new Vector2(28.0610008F, 98.4029999F));
                    builder.AddCubicBezier(new Vector2(28.1940002F, 106.956001F), new Vector2(26.9610004F, 112.503998F), new Vector2(31.8449993F, 105.383003F));
                    builder.AddCubicBezier(new Vector2(31.8449993F, 105.383003F), new Vector2(108.502998F, -99.6439972F), new Vector2(108.502998F, -99.6439972F));
                    builder.AddCubicBezier(new Vector2(111.625F, -107.125F), new Vector2(108.875F, -110.25F), new Vector2(103.898003F, -103.684998F));
                    builder.AddCubicBezier(new Vector2(103.898003F, -103.684998F), new Vector2(73.5979996F, -31.4249992F), new Vector2(73.5979996F, -31.4249992F));
                    builder.AddCubicBezier(new Vector2(72.5F, -29.875F), new Vector2(69.625F, -22.875F), new Vector2(69.125F, -20.9489994F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_10()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-94.9369965F, -32.6990013F));
                    builder.AddCubicBezier(new Vector2(-94.9369965F, -32.6990013F), new Vector2(-5.68900013F, 106.948997F), new Vector2(-5.68900013F, 106.948997F));
                    builder.AddCubicBezier(new Vector2(-2F, 112.963997F), new Vector2(7.46099997F, 114.549004F), new Vector2(12.3450003F, 107.428001F));
                    builder.AddCubicBezier(new Vector2(12.3450003F, 107.428001F), new Vector2(136.128006F, -65.2689972F), new Vector2(136.128006F, -65.2689972F));
                    builder.AddCubicBezier(new Vector2(139.460999F, -70.7490005F), new Vector2(134.173004F, -76.9860001F), new Vector2(126.398003F, -73.3099976F));
                    builder.AddCubicBezier(new Vector2(126.398003F, -73.3099976F), new Vector2(-90.4639969F, -40.4249992F), new Vector2(-90.4639969F, -40.4249992F));
                    builder.AddCubicBezier(new Vector2(-94.1569977F, -38.5800018F), new Vector2(-94.9369965F, -36.4959984F), new Vector2(-94.9369965F, -32.6990013F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_11()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-144.475998F, -47.6990013F));
                    builder.AddCubicBezier(new Vector2(-144.475998F, -47.6990013F), new Vector2(-17.4489994F, 106.948997F), new Vector2(-17.4489994F, 106.948997F));
                    builder.AddCubicBezier(new Vector2(-9.58399963F, 112.963997F), new Vector2(4.67000008F, 121F), new Vector2(21F, 107.428001F));
                    builder.AddCubicBezier(new Vector2(21F, 107.428001F), new Vector2(143.908005F, -46.269001F), new Vector2(143.908005F, -46.269001F));
                    builder.AddCubicBezier(new Vector2(147.5F, -51.7490005F), new Vector2(141.800003F, -57.9860001F), new Vector2(133.419998F, -54.3100014F));
                    builder.AddCubicBezier(new Vector2(133.419998F, -54.3100014F), new Vector2(-139.654999F, -55.4249992F), new Vector2(-139.654999F, -55.4249992F));
                    builder.AddCubicBezier(new Vector2(-143.636002F, -53.5800018F), new Vector2(-144.475998F, -51.4959984F), new Vector2(-144.475998F, -47.6990013F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_12()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-138.054001F, -68.1989975F));
                    builder.AddCubicBezier(new Vector2(-138.054001F, -68.1989975F), new Vector2(-9.43900013F, 106.698997F), new Vector2(-9.43900013F, 106.698997F));
                    builder.AddCubicBezier(new Vector2(-5.75F, 112.713997F), new Vector2(0.460999995F, 112.049004F), new Vector2(5.34499979F, 104.928001F));
                    builder.AddCubicBezier(new Vector2(5.34499979F, 104.928001F), new Vector2(80.0059967F, -23.2689991F), new Vector2(80.0059967F, -23.2689991F));
                    builder.AddCubicBezier(new Vector2(83.3389969F, -28.7490005F), new Vector2(81.75F, -35.5F), new Vector2(73.2750015F, -36.5600014F));
                    builder.AddCubicBezier(new Vector2(73.2750015F, -36.5600014F), new Vector2(-133.580994F, -75.9250031F), new Vector2(-133.580994F, -75.9250031F));
                    builder.AddCubicBezier(new Vector2(-137.274002F, -74.0800018F), new Vector2(-138.054001F, -71.9960022F), new Vector2(-138.054001F, -68.1989975F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_13()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-135.164001F, -75.7990036F));
                    builder.AddCubicBezier(new Vector2(-135.164001F, -75.7990036F), new Vector2(-16.0389996F, 106.264F), new Vector2(-16.0389996F, 106.264F));
                    builder.AddCubicBezier(new Vector2(-12.3500004F, 112.278999F), new Vector2(-5.46400023F, 110.875999F), new Vector2(-0.579999983F, 103.754997F));
                    builder.AddCubicBezier(new Vector2(-0.579999983F, 103.754997F), new Vector2(31.2080002F, -21.677F), new Vector2(31.2080002F, -21.677F));
                    builder.AddCubicBezier(new Vector2(33.2029991F, -27.5499992F), new Vector2(29F, -33.4500008F), new Vector2(22.0739994F, -34.7179985F));
                    builder.AddCubicBezier(new Vector2(22.0739994F, -34.7179985F), new Vector2(-130.690994F, -83.5250015F), new Vector2(-130.690994F, -83.5250015F));
                    builder.AddCubicBezier(new Vector2(-134.384003F, -81.6800003F), new Vector2(-135.164001F, -79.5960007F), new Vector2(-135.164001F, -75.7990036F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: Top Offset:<256, 256>
            // - Path
            CanvasGeometry Geometry_14()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-140.722F, -74.5899963F));
                    builder.AddCubicBezier(new Vector2(-140.722F, -74.5899963F), new Vector2(-22.3139992F, 109.376999F), new Vector2(-22.3139992F, 109.376999F));
                    builder.AddCubicBezier(new Vector2(-18.625F, 115.391998F), new Vector2(-9.25F, 112F), new Vector2(-9.52999973F, 106.607002F));
                    builder.AddCubicBezier(new Vector2(-9.52999973F, 106.607002F), new Vector2(-9.73900032F, -19.6009998F), new Vector2(-9.73900032F, -19.6009998F));
                    builder.AddCubicBezier(new Vector2(-9.81299973F, -26.75F), new Vector2(-11.6870003F, -28.3120003F), new Vector2(-16.1019993F, -30.2670002F));
                    builder.AddCubicBezier(new Vector2(-16.1019993F, -30.2670002F), new Vector2(-134.498993F, -82.9420013F), new Vector2(-134.498993F, -82.9420013F));
                    builder.AddCubicBezier(new Vector2(-138.875F, -85.3759995F), new Vector2(-144.625F, -81.375F), new Vector2(-140.722F, -74.5899963F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_15()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-9.81299973F, -21.9489994F));
                    builder.AddCubicBezier(new Vector2(-9.81299973F, -21.9489994F), new Vector2(-10.0609999F, 104.985001F), new Vector2(-10.0609999F, 104.985001F));
                    builder.AddCubicBezier(new Vector2(-10.1940002F, 113.538002F), new Vector2(-18.7110004F, 115.084999F), new Vector2(-23.5949993F, 107.963997F));
                    builder.AddCubicBezier(new Vector2(-23.5949993F, 107.963997F), new Vector2(-126.477997F, -51.4350014F), new Vector2(-126.477997F, -51.4350014F));
                    builder.AddCubicBezier(new Vector2(-126.477997F, -51.4350014F), new Vector2(-128.684998F, -54.8540001F), new Vector2(-128.684998F, -54.8540001F));
                    builder.AddCubicBezier(new Vector2(-128.684998F, -54.8540001F), new Vector2(-130.559006F, -57.7579994F), new Vector2(-130.559006F, -57.7579994F));
                    builder.AddCubicBezier(new Vector2(-130.559006F, -57.7579994F), new Vector2(-130.613998F, -57.8429985F), new Vector2(-130.613998F, -57.8429985F));
                    builder.AddCubicBezier(new Vector2(-130.613998F, -57.8429985F), new Vector2(-141.378006F, -74.5189972F), new Vector2(-141.378006F, -74.5189972F));
                    builder.AddCubicBezier(new Vector2(-144.710999F, -79.9990005F), new Vector2(-139.423004F, -86.2360001F), new Vector2(-131.647995F, -82.5599976F));
                    builder.AddCubicBezier(new Vector2(-131.647995F, -82.5599976F), new Vector2(-14.2860003F, -29.6749992F), new Vector2(-14.2860003F, -29.6749992F));
                    builder.AddCubicBezier(new Vector2(-14.066F, -29.5650005F), new Vector2(-13.8559999F, -29.4540005F), new Vector2(-13.6560001F, -29.3419991F));
                    builder.AddCubicBezier(new Vector2(-12.1499996F, -28.4979992F), new Vector2(-11.2060003F, -27.5900002F), new Vector2(-10.6309996F, -26.4810009F));
                    builder.AddCubicBezier(new Vector2(-10.0010004F, -25.2670002F), new Vector2(-9.81299973F, -23.8150005F), new Vector2(-9.81299973F, -21.9489994F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: L
            // - Path
            CanvasGeometry Geometry_16()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(53.9690018F, -13.3240004F));
                    builder.AddCubicBezier(new Vector2(53.9690018F, -13.3240004F), new Vector2(15.4390001F, 104.466003F), new Vector2(15.4390001F, 104.466003F));
                    builder.AddCubicBezier(new Vector2(13.5F, 111.25F), new Vector2(-0.711000025F, 115.045998F), new Vector2(-5.59499979F, 107.925003F));
                    builder.AddCubicBezier(new Vector2(-5.59499979F, 107.925003F), new Vector2(-120.842003F, -24.6889992F), new Vector2(-120.842003F, -24.6889992F));
                    builder.AddCubicBezier(new Vector2(-120.842003F, -24.6889992F), new Vector2(-123.512001F, -27.7369995F), new Vector2(-123.512001F, -27.7369995F));
                    builder.AddCubicBezier(new Vector2(-123.512001F, -27.7369995F), new Vector2(-125.779999F, -30.3260002F), new Vector2(-125.779999F, -30.3260002F));
                    builder.AddCubicBezier(new Vector2(-125.779999F, -30.3260002F), new Vector2(-125.846001F, -30.4020004F), new Vector2(-125.846001F, -30.4020004F));
                    builder.AddCubicBezier(new Vector2(-125.846001F, -30.4020004F), new Vector2(-138.871002F, -45.269001F), new Vector2(-138.871002F, -45.269001F));
                    builder.AddCubicBezier(new Vector2(-142.203995F, -50.7490005F), new Vector2(-136.916F, -56.9860001F), new Vector2(-129.141006F, -53.3100014F));
                    builder.AddCubicBezier(new Vector2(-129.141006F, -53.3100014F), new Vector2(47.5270004F, -21.9249992F), new Vector2(47.5270004F, -21.9249992F));
                    builder.AddCubicBezier(new Vector2(47.7470016F, -21.8150005F), new Vector2(48.2529984F, -21.7950001F), new Vector2(48.4690018F, -21.7169991F));
                    builder.AddCubicBezier(new Vector2(49.5940018F, -21.3120003F), new Vector2(51.1399994F, -20.8600006F), new Vector2(52.0569992F, -20.0119991F));
                    builder.AddCubicBezier(new Vector2(53.2190018F, -18.9370003F), new Vector2(54.625F, -15.7819996F), new Vector2(53.9690018F, -13.3240004F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: L
            // - Path
            CanvasGeometry Geometry_17()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-67.3379974F, -27.8990002F));
                    builder.AddCubicBezier(new Vector2(-67.3379974F, -27.8990002F), new Vector2(-13.5609999F, 104.876999F), new Vector2(-13.5609999F, 104.876999F));
                    builder.AddCubicBezier(new Vector2(-13.6940002F, 113.43F), new Vector2(-19.2110004F, 114.977997F), new Vector2(-24.0949993F, 107.857002F));
                    builder.AddCubicBezier(new Vector2(-24.0949993F, 107.857002F), new Vector2(-109.117996F, -67.8270035F), new Vector2(-109.117996F, -67.8270035F));
                    builder.AddCubicBezier(new Vector2(-109.117996F, -67.8270035F), new Vector2(-110.748001F, -71.5940018F), new Vector2(-110.748001F, -71.5940018F));
                    builder.AddCubicBezier(new Vector2(-110.748001F, -71.5940018F), new Vector2(-112.134003F, -74.7959976F), new Vector2(-112.134003F, -74.7959976F));
                    builder.AddCubicBezier(new Vector2(-112.134003F, -74.7959976F), new Vector2(-112.174004F, -74.8889999F), new Vector2(-112.174004F, -74.8889999F));
                    builder.AddCubicBezier(new Vector2(-112.174004F, -74.8889999F), new Vector2(-120.127998F, -93.2689972F), new Vector2(-120.127998F, -93.2689972F));
                    builder.AddCubicBezier(new Vector2(-123.460999F, -98.7490005F), new Vector2(-118.172997F, -104.986F), new Vector2(-110.398003F, -101.309998F));
                    builder.AddCubicBezier(new Vector2(-110.398003F, -101.309998F), new Vector2(-70.685997F, -35.625F), new Vector2(-70.685997F, -35.625F));
                    builder.AddCubicBezier(new Vector2(-70.685997F, -35.625F), new Vector2(-70.6200027F, -35.4749985F), new Vector2(-70.6200027F, -35.4749985F));
                    builder.AddCubicBezier(new Vector2(-70.6200027F, -35.4749985F), new Vector2(-68.9690018F, -31.6630001F), new Vector2(-68.9690018F, -31.6630001F));
                    builder.AddCubicBezier(new Vector2(-68.9690018F, -31.6630001F), new Vector2(-67.3379974F, -27.8990002F), new Vector2(-67.3379974F, -27.8990002F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: L
            // - Path
            CanvasGeometry Geometry_18()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-85.7630005F, -31.2420006F));
                    builder.AddCubicBezier(new Vector2(-85.7630005F, -31.2420006F), new Vector2(-16.0610008F, 109.223999F), new Vector2(-16.0610008F, 109.223999F));
                    builder.AddCubicBezier(new Vector2(-16.1280003F, 113.5F), new Vector2(-19.75F, 109.556F), new Vector2(-24.8449993F, 103.342003F));
                    builder.AddCubicBezier(new Vector2(-24.8449993F, 103.342003F), new Vector2(-93.3539963F, -24.9939995F), new Vector2(-94.552002F, -28.3719997F));
                    builder.AddCubicBezier(new Vector2(-96.25F, -33.375F), new Vector2(-90.9840012F, -32.6539993F), new Vector2(-90.9840012F, -32.6539993F));
                    builder.AddCubicBezier(new Vector2(-90.9840012F, -32.6539993F), new Vector2(-97.3450012F, -52.2099991F), new Vector2(-97.3450012F, -52.2099991F));
                    builder.AddCubicBezier(new Vector2(-97.3450012F, -52.2099991F), new Vector2(-101.502998F, -52.723999F), new Vector2(-101.502998F, -52.723999F));
                    builder.AddCubicBezier(new Vector2(-101.502998F, -52.723999F), new Vector2(-107.755997F, -96.3379974F), new Vector2(-107.755997F, -96.3379974F));
                    builder.AddCubicBezier(new Vector2(-107.75F, -105.5F), new Vector2(-101.875F, -108.125F), new Vector2(-99.5449982F, -107.503998F));
                    builder.AddCubicBezier(new Vector2(-99.5449982F, -107.503998F), new Vector2(-91.9229965F, -55.6570015F), new Vector2(-91.9229965F, -55.6570015F));
                    builder.AddCubicBezier(new Vector2(-91.9229965F, -55.6570015F), new Vector2(-97.3659973F, -52.1920013F), new Vector2(-97.3659973F, -52.1920013F));
                    builder.AddCubicBezier(new Vector2(-97.3659973F, -52.1920013F), new Vector2(-91.0240021F, -32.6619987F), new Vector2(-91.0240021F, -32.6619987F));
                    builder.AddCubicBezier(new Vector2(-91.0240021F, -32.6619987F), new Vector2(-85.7630005F, -31.2420006F), new Vector2(-85.7630005F, -31.2420006F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: L
            // - Path
            CanvasGeometry Geometry_19()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-98.6380005F, -29.9850006F));
                    builder.AddCubicBezier(new Vector2(-98.6380005F, -29.9850006F), new Vector2(-10.9359999F, 108.232002F), new Vector2(-10.9359999F, 108.232002F));
                    builder.AddCubicBezier(new Vector2(-11.0030003F, 112.508003F), new Vector2(-11.75F, 108.438004F), new Vector2(-16.8449993F, 102.223999F));
                    builder.AddCubicBezier(new Vector2(-16.8449993F, 102.223999F), new Vector2(-102.177002F, -28.2399998F), new Vector2(-102.177002F, -28.2399998F));
                    builder.AddCubicBezier(new Vector2(-102.177002F, -28.2399998F), new Vector2(-102.908997F, -31.6989994F), new Vector2(-102.908997F, -31.6989994F));
                    builder.AddCubicBezier(new Vector2(-102.908997F, -31.6989994F), new Vector2(-97.5049973F, -60.262001F), new Vector2(-97.5049973F, -60.262001F));
                    builder.AddCubicBezier(new Vector2(-97.5049973F, -60.262001F), new Vector2(-98.2350006F, -60.8899994F), new Vector2(-98.2350006F, -60.8899994F));
                    builder.AddCubicBezier(new Vector2(-98.2350006F, -60.8899994F), new Vector2(-78.3809967F, -112.581001F), new Vector2(-78.3809967F, -112.581001F));
                    builder.AddCubicBezier(new Vector2(-77.375F, -116.242996F), new Vector2(-75.5F, -118.617996F), new Vector2(-73.4199982F, -118.997002F));
                    builder.AddCubicBezier(new Vector2(-73.4199982F, -118.997002F), new Vector2(-96.0479965F, -59.9609985F), new Vector2(-96.0479965F, -59.9609985F));
                    builder.AddCubicBezier(new Vector2(-96.0479965F, -59.9609985F), new Vector2(-97.4869995F, -60.2360001F), new Vector2(-97.4869995F, -60.2360001F));
                    builder.AddCubicBezier(new Vector2(-97.4869995F, -60.2360001F), new Vector2(-102.931999F, -31.7700005F), new Vector2(-102.931999F, -31.7700005F));
                    builder.AddCubicBezier(new Vector2(-102.931999F, -31.7700005F), new Vector2(-98.6380005F, -29.9850006F), new Vector2(-98.6380005F, -29.9850006F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: L
            // - Path
            CanvasGeometry Geometry_20()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-93.5130005F, -26.8600006F));
                    builder.AddCubicBezier(new Vector2(-93.5130005F, -26.8600006F), new Vector2(-14.7399998F, 108.357002F), new Vector2(-14.7399998F, 108.357002F));
                    builder.AddCubicBezier(new Vector2(-15.0480003F, 110.878998F), new Vector2(-20.1280003F, 108.656998F), new Vector2(-25.0319996F, 103.848999F));
                    builder.AddCubicBezier(new Vector2(-25.0319996F, 103.848999F), new Vector2(-97.052002F, -25.1149998F), new Vector2(-97.052002F, -25.1149998F));
                    builder.AddCubicBezier(new Vector2(-97.052002F, -25.1149998F), new Vector2(-97.7839966F, -28.5739994F), new Vector2(-97.7839966F, -28.5739994F));
                    builder.AddCubicBezier(new Vector2(-97.7839966F, -28.5739994F), new Vector2(-96.1299973F, -60.2000008F), new Vector2(-96.1299973F, -60.2000008F));
                    builder.AddCubicBezier(new Vector2(-96.1299973F, -60.2000008F), new Vector2(-96.8600006F, -60.8279991F), new Vector2(-96.8600006F, -60.8279991F));
                    builder.AddCubicBezier(new Vector2(-96.8600006F, -60.8279991F), new Vector2(-79.6930008F, -106.831001F), new Vector2(-79.6930008F, -106.831001F));
                    builder.AddCubicBezier(new Vector2(-78.6869965F, -110.492996F), new Vector2(-76.8130035F, -112.867996F), new Vector2(-74.7330017F, -113.247002F));
                    builder.AddCubicBezier(new Vector2(-74.7330017F, -113.247002F), new Vector2(-94.6729965F, -59.8989983F), new Vector2(-94.6729965F, -59.8989983F));
                    builder.AddCubicBezier(new Vector2(-94.6729965F, -59.8989983F), new Vector2(-96.1119995F, -60.1730003F), new Vector2(-96.1119995F, -60.1730003F));
                    builder.AddCubicBezier(new Vector2(-96.1119995F, -60.1730003F), new Vector2(-97.8069992F, -28.6450005F), new Vector2(-97.8069992F, -28.6450005F));
                    builder.AddCubicBezier(new Vector2(-97.8069992F, -28.6450005F), new Vector2(-93.5130005F, -26.8600006F), new Vector2(-93.5130005F, -26.8600006F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: L
            // - Path
            CanvasGeometry Geometry_21()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-88.3880005F, -23.7350006F));
                    builder.AddCubicBezier(new Vector2(-88.3880005F, -23.7350006F), new Vector2(-12.1859999F, 108.482002F), new Vector2(-12.1859999F, 108.482002F));
                    builder.AddCubicBezier(new Vector2(-12.5810003F, 109.25F), new Vector2(-16.2070007F, 108.375F), new Vector2(-18.4699993F, 104.973999F));
                    builder.AddCubicBezier(new Vector2(-18.4699993F, 104.973999F), new Vector2(-91.927002F, -21.9899998F), new Vector2(-91.927002F, -21.9899998F));
                    builder.AddCubicBezier(new Vector2(-91.927002F, -21.9899998F), new Vector2(-92.6589966F, -25.4489994F), new Vector2(-92.6589966F, -25.4489994F));
                    builder.AddCubicBezier(new Vector2(-92.6589966F, -25.4489994F), new Vector2(-94.7549973F, -60.137001F), new Vector2(-94.7549973F, -60.137001F));
                    builder.AddCubicBezier(new Vector2(-94.7549973F, -60.137001F), new Vector2(-95.4850006F, -60.7649994F), new Vector2(-95.4850006F, -60.7649994F));
                    builder.AddCubicBezier(new Vector2(-95.4850006F, -60.7649994F), new Vector2(-81.0059967F, -101.081001F), new Vector2(-81.0059967F, -101.081001F));
                    builder.AddCubicBezier(new Vector2(-80F, -104.742996F), new Vector2(-78.125F, -107.117996F), new Vector2(-76.0449982F, -107.497002F));
                    builder.AddCubicBezier(new Vector2(-76.0449982F, -107.497002F), new Vector2(-93.2979965F, -59.8359985F), new Vector2(-93.2979965F, -59.8359985F));
                    builder.AddCubicBezier(new Vector2(-93.2979965F, -59.8359985F), new Vector2(-94.7369995F, -60.1110001F), new Vector2(-94.7369995F, -60.1110001F));
                    builder.AddCubicBezier(new Vector2(-94.7369995F, -60.1110001F), new Vector2(-92.6819992F, -25.5200005F), new Vector2(-92.6819992F, -25.5200005F));
                    builder.AddCubicBezier(new Vector2(-92.6819992F, -25.5200005F), new Vector2(-88.3880005F, -23.7350006F), new Vector2(-88.3880005F, -23.7350006F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: L
            // - Path
            CanvasGeometry Geometry_22()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-78.2630005F, -22.9920006F));
                    builder.AddCubicBezier(new Vector2(-78.2630005F, -22.9920006F), new Vector2(-10.5609999F, 106.973999F), new Vector2(-10.5609999F, 106.973999F));
                    builder.AddCubicBezier(new Vector2(-10.6280003F, 111.25F), new Vector2(-16F, 108.056F), new Vector2(-21.0949993F, 101.842003F));
                    builder.AddCubicBezier(new Vector2(-21.0949993F, 101.842003F), new Vector2(-85.8539963F, -16.7439995F), new Vector2(-87.052002F, -20.1219997F));
                    builder.AddCubicBezier(new Vector2(-88.75F, -25.125F), new Vector2(-83.4840012F, -24.4039993F), new Vector2(-83.4840012F, -24.4039993F));
                    builder.AddCubicBezier(new Vector2(-83.4840012F, -24.4039993F), new Vector2(-87.8450012F, -48.4599991F), new Vector2(-87.8450012F, -48.4599991F));
                    builder.AddCubicBezier(new Vector2(-87.8450012F, -48.4599991F), new Vector2(-92.0029984F, -48.973999F), new Vector2(-92.0029984F, -48.973999F));
                    builder.AddCubicBezier(new Vector2(-92.0029984F, -48.973999F), new Vector2(-101.630997F, -87.8379974F), new Vector2(-101.630997F, -87.8379974F));
                    builder.AddCubicBezier(new Vector2(-101.625F, -97F), new Vector2(-95.75F, -99.625F), new Vector2(-93.4199982F, -99.0039978F));
                    builder.AddCubicBezier(new Vector2(-93.4199982F, -99.0039978F), new Vector2(-82.4229965F, -51.9070015F), new Vector2(-82.4229965F, -51.9070015F));
                    builder.AddCubicBezier(new Vector2(-82.4229965F, -51.9070015F), new Vector2(-87.8659973F, -48.4420013F), new Vector2(-87.8659973F, -48.4420013F));
                    builder.AddCubicBezier(new Vector2(-87.8659973F, -48.4420013F), new Vector2(-83.5240021F, -24.4120007F), new Vector2(-83.5240021F, -24.4120007F));
                    builder.AddCubicBezier(new Vector2(-83.5240021F, -24.4120007F), new Vector2(-78.2630005F, -22.9920006F), new Vector2(-78.2630005F, -22.9920006F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: L
            // - Path
            CanvasGeometry Geometry_23()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-49.5880013F, -20.6490002F));
                    builder.AddCubicBezier(new Vector2(-49.5880013F, -20.6490002F), new Vector2(-14.8109999F, 103.876999F), new Vector2(-14.8109999F, 103.876999F));
                    builder.AddCubicBezier(new Vector2(-14.9440002F, 112.43F), new Vector2(-20.7110004F, 112.977997F), new Vector2(-25.5949993F, 105.857002F));
                    builder.AddCubicBezier(new Vector2(-25.5949993F, 105.857002F), new Vector2(-100.117996F, -66.0770035F), new Vector2(-100.117996F, -66.0770035F));
                    builder.AddCubicBezier(new Vector2(-100.117996F, -66.0770035F), new Vector2(-101.748001F, -69.8440018F), new Vector2(-101.748001F, -69.8440018F));
                    builder.AddCubicBezier(new Vector2(-101.748001F, -69.8440018F), new Vector2(-103.134003F, -73.0459976F), new Vector2(-103.134003F, -73.0459976F));
                    builder.AddCubicBezier(new Vector2(-103.134003F, -73.0459976F), new Vector2(-103.174004F, -73.1389999F), new Vector2(-103.174004F, -73.1389999F));
                    builder.AddCubicBezier(new Vector2(-103.174004F, -73.1389999F), new Vector2(-106.877998F, -81.5189972F), new Vector2(-106.877998F, -81.5189972F));
                    builder.AddCubicBezier(new Vector2(-110.210999F, -86.9990005F), new Vector2(-107.707001F, -96.5F), new Vector2(-103.148003F, -96.0599976F));
                    builder.AddCubicBezier(new Vector2(-103.148003F, -96.0599976F), new Vector2(-52.9360008F, -28.375F), new Vector2(-52.9360008F, -28.375F));
                    builder.AddCubicBezier(new Vector2(-52.9360008F, -28.375F), new Vector2(-52.8699989F, -28.2250004F), new Vector2(-52.8699989F, -28.2250004F));
                    builder.AddCubicBezier(new Vector2(-52.8699989F, -28.2250004F), new Vector2(-51.2190018F, -24.4130001F), new Vector2(-51.2190018F, -24.4130001F));
                    builder.AddCubicBezier(new Vector2(-51.2190018F, -24.4130001F), new Vector2(-49.5880013F, -20.6490002F), new Vector2(-49.5880013F, -20.6490002F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: 1
            // - - - ShapeGroup: L
            // - Path
            CanvasGeometry Geometry_24()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-12.8129997F, -21.8969994F));
                    builder.AddCubicBezier(new Vector2(-12.8129997F, -21.8969994F), new Vector2(-13.0609999F, 105.036003F), new Vector2(-13.0609999F, 105.036003F));
                    builder.AddCubicBezier(new Vector2(-13.1940002F, 113.588997F), new Vector2(-21.7110004F, 115.137001F), new Vector2(-26.5949993F, 108.015999F));
                    builder.AddCubicBezier(new Vector2(-26.5949993F, 108.015999F), new Vector2(-129.477997F, -51.3839989F), new Vector2(-129.477997F, -51.3839989F));
                    builder.AddCubicBezier(new Vector2(-129.477997F, -51.3839989F), new Vector2(-131.684998F, -54.8019981F), new Vector2(-131.684998F, -54.8019981F));
                    builder.AddCubicBezier(new Vector2(-131.684998F, -54.8019981F), new Vector2(-133.559006F, -57.7070007F), new Vector2(-133.559006F, -57.7070007F));
                    builder.AddCubicBezier(new Vector2(-133.559006F, -57.7070007F), new Vector2(-133.613998F, -57.7910004F), new Vector2(-133.613998F, -57.7910004F));
                    builder.AddCubicBezier(new Vector2(-133.613998F, -57.7910004F), new Vector2(-144.378006F, -74.4680023F), new Vector2(-144.378006F, -74.4680023F));
                    builder.AddCubicBezier(new Vector2(-147.710999F, -79.947998F), new Vector2(-142.423004F, -86.1849976F), new Vector2(-134.647995F, -82.5090027F));
                    builder.AddCubicBezier(new Vector2(-134.647995F, -82.5090027F), new Vector2(-17.2859993F, -29.6240005F), new Vector2(-17.2859993F, -29.6240005F));
                    builder.AddCubicBezier(new Vector2(-17.066F, -29.5139999F), new Vector2(-16.8560009F, -29.4029999F), new Vector2(-16.6560001F, -29.2910004F));
                    builder.AddCubicBezier(new Vector2(-15.1499996F, -28.4470005F), new Vector2(-14.2060003F, -27.5380001F), new Vector2(-13.6309996F, -26.4290009F));
                    builder.AddCubicBezier(new Vector2(-13.0010004F, -25.2150002F), new Vector2(-12.8129997F, -23.7630005F), new Vector2(-12.8129997F, -21.8969994F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Color_000000
            CompositionColorBrush ThemeColor_Color_000000_0()
            {
                if (_themeColor_Color_000000_0 != null) { return _themeColor_Color_000000_0; }
                var result = _themeColor_Color_000000_0 = _c.CreateColorBrush();
                BindProperty(_themeColor_Color_000000_0, "Color", "ColorRGB(_theme.Color_000000.W,_theme.Color_000000.X,_theme.Color_000000.Y,_theme.Color_000000.Z)", "_theme", _themeProperties);
                return result;
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: L
            // Color bound to theme property value: Color_000000
            CompositionColorBrush ThemeColor_Color_000000_1()
            {
                if (_themeColor_Color_000000_1 != null) { return _themeColor_Color_000000_1; }
                var result = _themeColor_Color_000000_1 = _c.CreateColorBrush();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Opacity0", 1F);
                BindProperty2(_themeColor_Color_000000_1, "Color", "ColorRGB(_theme.Color_000000.W*my.Opacity0,_theme.Color_000000.X,_theme.Color_000000.Y,_theme.Color_000000.Z)", "_theme", _themeProperties, "my", propertySet);
                return result;
            }

            // Shape tree root for layer: 1
            CompositionContainerShape ContainerShape()
            {
                if (_containerShape != null) { return _containerShape; }
                var result = _containerShape = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(256F, 368.473999F);
                var shapes = result.Shapes;
                // ShapeGroup: Top Offset:<256, 256>
                shapes.Add(SpriteShape_0());
                // ShapeGroup: Top Offset:<256, 256>
                shapes.Add(SpriteShape_1());
                // ShapeGroup: L
                shapes.Add(SpriteShape_2());
                return result;
            }

            CompositionPath Path_0()
            {
                if (_path_0 != null) { return _path_0; }
                var result = _path_0 = new CompositionPath(Geometry_00());
                return result;
            }

            CompositionPath Path_1()
            {
                if (_path_1 != null) { return _path_1; }
                var result = _path_1 = new CompositionPath(Geometry_08());
                return result;
            }

            CompositionPath Path_2()
            {
                if (_path_2 != null) { return _path_2; }
                var result = _path_2 = new CompositionPath(Geometry_15());
                return result;
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: Top Offset:<256, 256>
            CompositionPathGeometry PathGeometry_0()
            {
                if (_pathGeometry_0 != null) { return _pathGeometry_0; }
                var result = _pathGeometry_0 = _c.CreatePathGeometry();
                return result;
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: Top Offset:<256, 256>
            CompositionPathGeometry PathGeometry_1()
            {
                if (_pathGeometry_1 != null) { return _pathGeometry_1; }
                var result = _pathGeometry_1 = _c.CreatePathGeometry();
                return result;
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: L
            CompositionPathGeometry PathGeometry_2()
            {
                if (_pathGeometry_2 != null) { return _pathGeometry_2; }
                var result = _pathGeometry_2 = _c.CreatePathGeometry();
                return result;
            }

            // - Shape tree root for layer: 1
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<256, 256>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 256F, 256F), ThemeColor_Color_000000_0()); ;
                return result;
            }

            // - Shape tree root for layer: 1
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<256, 256>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 256F, 256F), ThemeColor_Color_000000_0()); ;
                return result;
            }

            // - Shape tree root for layer: 1
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                if (_spriteShape_2 != null) { return _spriteShape_2; }
                var result = _spriteShape_2 = _c.CreateSpriteShape(PathGeometry_2());
                result.CenterPoint = new Vector2(-76.1029968F, 14.4049997F);
                result.FillBrush = ThemeColor_Color_000000_1();
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                propertySet.InsertScalar("t0", 0F);
                propertySet.InsertScalar("t1", 0F);
                // Shape tree root for layer: 1
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.400000006F, 0.904999971F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_1;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return (_cubicBezierEasingFunction_2 == null)
                    ? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.300000012F, 1F))
                    : _cubicBezierEasingFunction_2;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_3()
            {
                return (_cubicBezierEasingFunction_3 == null)
                    ? _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0.0140000004F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_3;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_4()
            {
                return (_cubicBezierEasingFunction_4 == null)
                    ? _cubicBezierEasingFunction_4 = _c.CreateCubicBezierEasingFunction(new Vector2(0.0500000007F, 0F), new Vector2(0.300000012F, 1F))
                    : _cubicBezierEasingFunction_4;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_5()
            {
                return (_cubicBezierEasingFunction_5 == null)
                    ? _cubicBezierEasingFunction_5 = _c.CreateCubicBezierEasingFunction(new Vector2(0.800000012F, 0F), new Vector2(0.850000024F, 1F))
                    : _cubicBezierEasingFunction_5;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_6()
            {
                return (_cubicBezierEasingFunction_6 == null)
                    ? _cubicBezierEasingFunction_6 = _c.CreateCubicBezierEasingFunction(new Vector2(0.5F, 0F), new Vector2(0.300000012F, 1F))
                    : _cubicBezierEasingFunction_6;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_7()
            {
                return (_cubicBezierEasingFunction_7 == null)
                    ? _cubicBezierEasingFunction_7 = _c.CreateCubicBezierEasingFunction(new Vector2(0.289999992F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_7;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_8()
            {
                return (_cubicBezierEasingFunction_8 == null)
                    ? _cubicBezierEasingFunction_8 = _c.CreateCubicBezierEasingFunction(new Vector2(0.289999992F, 0F), new Vector2(0.709999979F, 1F))
                    : _cubicBezierEasingFunction_8;
            }

            ExpressionAnimation RootProgress()
            {
                if (_rootProgress != null) { return _rootProgress; }
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - - Shape tree root for layer: 1
            // - ShapeGroup: Top Offset:<256, 256>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.135593221F, new CompositionPath(Geometry_01()), CubicBezierEasingFunction_0());
                // Frame 16.
                result.InsertKeyFrame(0.271186441F, Path_0(), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0.0949999988F), new Vector2(0.833000004F, 0.833000004F)));
                // Frame 20.
                result.InsertKeyFrame(0.338983059F, new CompositionPath(Geometry_02()), CubicBezierEasingFunction_1());
                // Frame 21.
                result.InsertKeyFrame(0.355932206F, new CompositionPath(Geometry_03()), CubicBezierEasingFunction_1());
                // Frame 26.
                result.InsertKeyFrame(0.440677971F, new CompositionPath(Geometry_04()), CubicBezierEasingFunction_1());
                // Frame 31.
                result.InsertKeyFrame(0.525423706F, new CompositionPath(Geometry_05()), CubicBezierEasingFunction_1());
                // Frame 33.
                result.InsertKeyFrame(0.559322059F, new CompositionPath(Geometry_06()), CubicBezierEasingFunction_1());
                // Frame 58.
                result.InsertKeyFrame(0.983050823F, new CompositionPath(Geometry_07()), CubicBezierEasingFunction_2());
                return result;
            }

            // - - - Shape tree root for layer: 1
            // - ShapeGroup: Top Offset:<256, 256>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_1(), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.135593221F, new CompositionPath(Geometry_09()), CubicBezierEasingFunction_0());
                // Frame 16.
                result.InsertKeyFrame(0.271186441F, Path_1(), CubicBezierEasingFunction_3());
                // Frame 21.
                result.InsertKeyFrame(0.355932206F, new CompositionPath(Geometry_10()), CubicBezierEasingFunction_1());
                // Frame 26.
                result.InsertKeyFrame(0.440677971F, new CompositionPath(Geometry_11()), CubicBezierEasingFunction_1());
                // Frame 31.
                result.InsertKeyFrame(0.525423706F, new CompositionPath(Geometry_12()), CubicBezierEasingFunction_1());
                // Frame 33.
                result.InsertKeyFrame(0.559322059F, new CompositionPath(Geometry_13()), CubicBezierEasingFunction_1());
                // Frame 58.
                result.InsertKeyFrame(0.983050823F, new CompositionPath(Geometry_14()), CubicBezierEasingFunction_2());
                return result;
            }

            // - - - Shape tree root for layer: 1
            // - ShapeGroup: L
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_2()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_2(), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.135593221F, new CompositionPath(Geometry_16()), CubicBezierEasingFunction_0());
                // Frame 16.
                result.InsertKeyFrame(0.271186441F, Path_2(), CubicBezierEasingFunction_3());
                // Frame 19.
                result.InsertKeyFrame(0.322033912F, new CompositionPath(Geometry_17()), CubicBezierEasingFunction_1());
                // Frame 20.
                result.InsertKeyFrame(0.338983059F, new CompositionPath(Geometry_18()), CubicBezierEasingFunction_1());
                // Frame 21.
                result.InsertKeyFrame(0.355932206F, new CompositionPath(Geometry_19()), CubicBezierEasingFunction_1());
                // Frame 26.
                result.InsertKeyFrame(0.440677971F, new CompositionPath(Geometry_20()), CubicBezierEasingFunction_1());
                // Frame 31.
                result.InsertKeyFrame(0.525423706F, new CompositionPath(Geometry_21()), CubicBezierEasingFunction_1());
                // Frame 32.
                result.InsertKeyFrame(0.542372882F, new CompositionPath(Geometry_22()), CubicBezierEasingFunction_1());
                // Frame 33.
                result.InsertKeyFrame(0.559322059F, new CompositionPath(Geometry_23()), CubicBezierEasingFunction_1());
                // Frame 58.
                result.InsertKeyFrame(0.983050823F, new CompositionPath(Geometry_24()), CubicBezierEasingFunction_2());
                return result;
            }

            // Opacity0
            ScalarKeyFrameAnimation Opacity0ScalarAnimation_1_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, HoldThenStepEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.355932206F, 0F, HoldThenStepEasingFunction());
                // Frame 31.
                result.InsertKeyFrame(0.525423706F, 1F, HoldThenStepEasingFunction());
                return result;
            }

            ScalarKeyFrameAnimation t0ScalarAnimation_0_to_1()
            {
                // Frame 1.
                var result = CreateScalarKeyFrameAnimation(0.0169491544F, 0F, StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 13.
                result.InsertKeyFrame(0.22033897F, 1F, CubicBezierEasingFunction_4());
                // Frame 28.
                result.InsertKeyFrame(0.474576294F, 0F, StepThenHoldEasingFunction());
                // Frame 39.
                result.InsertKeyFrame(0.661016881F, 1F, CubicBezierEasingFunction_6());
                return result;
            }

            ScalarKeyFrameAnimation t1ScalarAnimation_0_to_1()
            {
                // Frame 39.
                var result = CreateScalarKeyFrameAnimation(0.661016941F, 0F, StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 49.
                result.InsertKeyFrame(0.830508411F, 1F, CubicBezierEasingFunction_7());
                // Frame 49.
                result.InsertKeyFrame(0.830508471F, 0F, StepThenHoldEasingFunction());
                // Frame 58.
                result.InsertKeyFrame(0.983050764F, 1F, CubicBezierEasingFunction_8());
                return result;
            }

            // Shape tree root for layer: 1
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(512F, 512F);
                result.Shapes.Add(ContainerShape());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: L
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(256F, 256F), HoldThenStepEasingFunction());
                // Frame 31.
                result.InsertKeyFrame(0.525423706F, new Vector2(406F, 256F), HoldThenStepEasingFunction());
                return result;
            }

            // - Shape tree root for layer: 1
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 1.
                result.InsertKeyFrame(0.0169491526F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 13.
                result.InsertExpressionKeyFrame(0.22033897F, "3*Square(1-_.t0)*_.t0*Vector2(0,4)+(3*(1-_.t0)*Square(_.t0)*Vector2(0,27.5))+(Pow(_.t0,3)*Vector2(0,24))", StepThenHoldEasingFunction());
                // Frame 13.
                result.InsertKeyFrame(0.220338985F, new Vector2(0F, 24F), StepThenHoldEasingFunction());
                // Frame 28.
                result.InsertKeyFrame(0.474576265F, new Vector2(0F, -21F), CubicBezierEasingFunction_5());
                // Frame 39.
                result.InsertExpressionKeyFrame(0.661016881F, "Pow(1-_.t0,3)*Vector2(0,-21)+(3*Square(1-_.t0)*_.t0*Vector2(0,-22.917))+(3*(1-_.t0)*Square(_.t0)*Vector2(0,10.333))+(Pow(_.t0,3)*Vector2(0,12.5))", StepThenHoldEasingFunction());
                // Frame 49.
                result.InsertExpressionKeyFrame(0.830508411F, "Pow(1-_.t1,3)*Vector2(0,12.5)+(3*Square(1-_.t1)*_.t1*Vector2(0,14.667))+(3*(1-_.t1)*Square(_.t1)*Vector2(0,-5.917))+(Pow(_.t1,3)*Vector2(0,-8))", StepThenHoldEasingFunction());
                // Frame 58.
                result.InsertExpressionKeyFrame(0.983050764F, "Pow(1-_.t1,3)*Vector2(0,-8)+(3*Square(1-_.t1)*_.t1*Vector2(0,-10.083))+(3*(1-_.t1)*Square(_.t1)*Vector2(0,-1.333))", StepThenHoldEasingFunction());
                // Frame 58.
                result.InsertKeyFrame(0.983050823F, new Vector2(0F, 0F), StepThenHoldEasingFunction());
                return result;
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: L
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 31.
                result.InsertKeyFrame(0.525423706F, new Vector2(-1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            // - Shape tree root for layer: 1
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.186440676F, new Vector2(1.08000004F, 0.920000017F), CubicBezierEasingFunction_4());
                // Frame 26.
                result.InsertKeyFrame(0.440677971F, new Vector2(0.899999976F, 1.16999996F), CubicBezierEasingFunction_5());
                // Frame 37.
                result.InsertKeyFrame(0.627118647F, new Vector2(1.04999995F, 0.920000017F), CubicBezierEasingFunction_6());
                // Frame 47.
                result.InsertKeyFrame(0.796610177F, new Vector2(0.99000001F, 1.01999998F), CubicBezierEasingFunction_7());
                // Frame 57.
                result.InsertKeyFrame(0.966101706F, new Vector2(1F, 1F), CubicBezierEasingFunction_8());
                return result;
            }

            internal Icon_1_AnimatedVisual_UAPv11(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(512F, 512F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                StartProgressBoundAnimation(_themeColor_Color_000000_1.Properties, "Opacity0", Opacity0ScalarAnimation_1_to_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape, "Scale", ScaleVector2Animation_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape, "Offset", OffsetVector2Animation_1(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_0, "Path", PathKeyFrameAnimation_0(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_1, "Path", PathKeyFrameAnimation_1(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_2, "Path", PathKeyFrameAnimation_2(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_2, "Scale", ScaleVector2Animation_0(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_2, "Offset", OffsetVector2Animation_0(), RootProgress());
                StartProgressBoundAnimation(_root.Properties, "t0", t0ScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_root.Properties, "t1", t1ScalarAnimation_0_to_1(), RootProgress());
            }

            public void DestroyAnimations()
            {
                _themeColor_Color_000000_1.Properties.StopAnimation("Opacity0");
                _containerShape.StopAnimation("Scale");
                _containerShape.StopAnimation("Offset");
                _pathGeometry_0.StopAnimation("Path");
                _pathGeometry_1.StopAnimation("Path");
                _pathGeometry_2.StopAnimation("Path");
                _spriteShape_2.StopAnimation("Scale");
                _spriteShape_2.StopAnimation("Offset");
                _root.Properties.StopAnimation("t0");
                _root.Properties.StopAnimation("t1");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }

        sealed partial class Icon_1_AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 9833333;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Color_000000_0;
            CompositionColorBrush _themeColor_Color_000000_1;
            CompositionContainerShape _containerShape;
            CompositionSpriteShape _spriteShape_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            CubicBezierEasingFunction _cubicBezierEasingFunction_3;
            CubicBezierEasingFunction _cubicBezierEasingFunction_4;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            void BindProperty2(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName0,
                CompositionObject referencedObject0,
                string referenceParameterName1,
                CompositionObject referencedObject1)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName0, referencedObject0);
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName1, referencedObject1);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // - - - - Shape tree root for layer: 1
            // - - ShapeGroup: Top Offset:<256, 256>
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(5.15700006F, -47.2999992F));
                    builder.AddLine(new Vector2(131.852997F, -103.149002F));
                    builder.AddCubicBezier(new Vector2(136.134995F, -105.07F), new Vector2(134.764008F, -112.473999F), new Vector2(130.070999F, -112.473999F));
                    builder.AddLine(new Vector2(-129.632996F, -112.473999F));
                    builder.AddCubicBezier(new Vector2(-134.326004F, -112.473999F), new Vector2(-135.697006F, -105.07F), new Vector2(-131.414993F, -103.149002F));
                    builder.AddLine(new Vector2(-4.71899986F, -47.2999992F));
                    builder.AddCubicBezier(new Vector2(-1.57799995F, -45.8909988F), new Vector2(2.01600003F, -45.8909988F), new Vector2(5.15700006F, -47.2999992F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: 1
            // - - ShapeGroup: Top Offset:<256, 256>
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(9.81299973F, -21.9489994F));
                    builder.AddLine(new Vector2(10.0609999F, 104.985001F));
                    builder.AddCubicBezier(new Vector2(10.1940002F, 113.538002F), new Vector2(18.7110004F, 115.084999F), new Vector2(23.5949993F, 107.963997F));
                    builder.AddLine(new Vector2(141.378006F, -74.5189972F));
                    builder.AddCubicBezier(new Vector2(144.710999F, -79.9990005F), new Vector2(139.423004F, -86.2360001F), new Vector2(131.647995F, -82.5599976F));
                    builder.AddLine(new Vector2(14.2860003F, -29.6749992F));
                    builder.AddCubicBezier(new Vector2(10.5930004F, -27.8299999F), new Vector2(9.81299973F, -25.7460003F), new Vector2(9.81299973F, -21.9489994F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: 1
            // - - ShapeGroup: L
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-9.81299973F, -21.9489994F));
                    builder.AddLine(new Vector2(-10.0609999F, 104.985001F));
                    builder.AddCubicBezier(new Vector2(-10.1940002F, 113.538002F), new Vector2(-18.7110004F, 115.084999F), new Vector2(-23.5949993F, 107.963997F));
                    builder.AddLine(new Vector2(-126.477997F, -51.4350014F));
                    builder.AddLine(new Vector2(-128.684998F, -54.8540001F));
                    builder.AddLine(new Vector2(-130.559006F, -57.7579994F));
                    builder.AddLine(new Vector2(-130.613998F, -57.8429985F));
                    builder.AddLine(new Vector2(-141.378006F, -74.5189972F));
                    builder.AddCubicBezier(new Vector2(-144.710999F, -79.9990005F), new Vector2(-139.423004F, -86.2360001F), new Vector2(-131.647995F, -82.5599976F));
                    builder.AddLine(new Vector2(-14.2860003F, -29.6749992F));
                    builder.AddCubicBezier(new Vector2(-14.066F, -29.5650005F), new Vector2(-13.8559999F, -29.4540005F), new Vector2(-13.6560001F, -29.3419991F));
                    builder.AddCubicBezier(new Vector2(-12.1499996F, -28.4979992F), new Vector2(-11.2060003F, -27.5900002F), new Vector2(-10.6309996F, -26.4810009F));
                    builder.AddCubicBezier(new Vector2(-10.0010004F, -25.2670002F), new Vector2(-9.81299973F, -23.8150005F), new Vector2(-9.81299973F, -21.9489994F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Color_000000
            CompositionColorBrush ThemeColor_Color_000000_0()
            {
                if (_themeColor_Color_000000_0 != null) { return _themeColor_Color_000000_0; }
                var result = _themeColor_Color_000000_0 = _c.CreateColorBrush();
                BindProperty(_themeColor_Color_000000_0, "Color", "ColorRGB(_theme.Color_000000.W,_theme.Color_000000.X,_theme.Color_000000.Y,_theme.Color_000000.Z)", "_theme", _themeProperties);
                return result;
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: L
            // Color bound to theme property value: Color_000000
            CompositionColorBrush ThemeColor_Color_000000_1()
            {
                if (_themeColor_Color_000000_1 != null) { return _themeColor_Color_000000_1; }
                var result = _themeColor_Color_000000_1 = _c.CreateColorBrush();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Opacity0", 1F);
                BindProperty2(_themeColor_Color_000000_1, "Color", "ColorRGB(_theme.Color_000000.W*my.Opacity0,_theme.Color_000000.X,_theme.Color_000000.Y,_theme.Color_000000.Z)", "_theme", _themeProperties, "my", propertySet);
                return result;
            }

            // Shape tree root for layer: 1
            CompositionContainerShape ContainerShape()
            {
                if (_containerShape != null) { return _containerShape; }
                var result = _containerShape = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(256F, 368.473999F);
                var shapes = result.Shapes;
                // ShapeGroup: Top Offset:<256, 256>
                shapes.Add(SpriteShape_0());
                // ShapeGroup: Top Offset:<256, 256>
                shapes.Add(SpriteShape_1());
                // ShapeGroup: L
                shapes.Add(SpriteShape_2());
                return result;
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: Top Offset:<256, 256>
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: Top Offset:<256, 256>
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: L
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - Shape tree root for layer: 1
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<256, 256>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 256F, 256F), ThemeColor_Color_000000_0()); ;
                return result;
            }

            // - Shape tree root for layer: 1
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<256, 256>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 256F, 256F), ThemeColor_Color_000000_0()); ;
                return result;
            }

            // - Shape tree root for layer: 1
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                if (_spriteShape_2 != null) { return _spriteShape_2; }
                var result = _spriteShape_2 = _c.CreateSpriteShape(PathGeometry_2());
                result.CenterPoint = new Vector2(-76.1029968F, 14.4049997F);
                result.FillBrush = ThemeColor_Color_000000_1();
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                propertySet.InsertScalar("t0", 0F);
                propertySet.InsertScalar("t1", 0F);
                // Shape tree root for layer: 1
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.0500000007F, 0F), new Vector2(0.300000012F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.800000012F, 0F), new Vector2(0.850000024F, 1F))
                    : _cubicBezierEasingFunction_1;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return (_cubicBezierEasingFunction_2 == null)
                    ? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.5F, 0F), new Vector2(0.300000012F, 1F))
                    : _cubicBezierEasingFunction_2;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_3()
            {
                return (_cubicBezierEasingFunction_3 == null)
                    ? _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction(new Vector2(0.289999992F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_3;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_4()
            {
                return (_cubicBezierEasingFunction_4 == null)
                    ? _cubicBezierEasingFunction_4 = _c.CreateCubicBezierEasingFunction(new Vector2(0.289999992F, 0F), new Vector2(0.709999979F, 1F))
                    : _cubicBezierEasingFunction_4;
            }

            ExpressionAnimation RootProgress()
            {
                if (_rootProgress != null) { return _rootProgress; }
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Opacity0
            ScalarKeyFrameAnimation Opacity0ScalarAnimation_1_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, HoldThenStepEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.355932206F, 0F, HoldThenStepEasingFunction());
                // Frame 31.
                result.InsertKeyFrame(0.525423706F, 1F, HoldThenStepEasingFunction());
                return result;
            }

            ScalarKeyFrameAnimation t0ScalarAnimation_0_to_1()
            {
                // Frame 1.
                var result = CreateScalarKeyFrameAnimation(0.0169491544F, 0F, StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 13.
                result.InsertKeyFrame(0.22033897F, 1F, CubicBezierEasingFunction_0());
                // Frame 28.
                result.InsertKeyFrame(0.474576294F, 0F, StepThenHoldEasingFunction());
                // Frame 39.
                result.InsertKeyFrame(0.661016881F, 1F, CubicBezierEasingFunction_2());
                return result;
            }

            ScalarKeyFrameAnimation t1ScalarAnimation_0_to_1()
            {
                // Frame 39.
                var result = CreateScalarKeyFrameAnimation(0.661016941F, 0F, StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 49.
                result.InsertKeyFrame(0.830508411F, 1F, CubicBezierEasingFunction_3());
                // Frame 49.
                result.InsertKeyFrame(0.830508471F, 0F, StepThenHoldEasingFunction());
                // Frame 58.
                result.InsertKeyFrame(0.983050764F, 1F, CubicBezierEasingFunction_4());
                return result;
            }

            // Shape tree root for layer: 1
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(512F, 512F);
                result.Shapes.Add(ContainerShape());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: L
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(256F, 256F), HoldThenStepEasingFunction());
                // Frame 31.
                result.InsertKeyFrame(0.525423706F, new Vector2(406F, 256F), HoldThenStepEasingFunction());
                return result;
            }

            // - Shape tree root for layer: 1
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 1.
                result.InsertKeyFrame(0.0169491526F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 13.
                result.InsertExpressionKeyFrame(0.22033897F, "3*Square(1-_.t0)*_.t0*Vector2(0,4)+(3*(1-_.t0)*Square(_.t0)*Vector2(0,27.5))+(Pow(_.t0,3)*Vector2(0,24))", StepThenHoldEasingFunction());
                // Frame 13.
                result.InsertKeyFrame(0.220338985F, new Vector2(0F, 24F), StepThenHoldEasingFunction());
                // Frame 28.
                result.InsertKeyFrame(0.474576265F, new Vector2(0F, -21F), CubicBezierEasingFunction_1());
                // Frame 39.
                result.InsertExpressionKeyFrame(0.661016881F, "Pow(1-_.t0,3)*Vector2(0,-21)+(3*Square(1-_.t0)*_.t0*Vector2(0,-22.917))+(3*(1-_.t0)*Square(_.t0)*Vector2(0,10.333))+(Pow(_.t0,3)*Vector2(0,12.5))", StepThenHoldEasingFunction());
                // Frame 49.
                result.InsertExpressionKeyFrame(0.830508411F, "Pow(1-_.t1,3)*Vector2(0,12.5)+(3*Square(1-_.t1)*_.t1*Vector2(0,14.667))+(3*(1-_.t1)*Square(_.t1)*Vector2(0,-5.917))+(Pow(_.t1,3)*Vector2(0,-8))", StepThenHoldEasingFunction());
                // Frame 58.
                result.InsertExpressionKeyFrame(0.983050764F, "Pow(1-_.t1,3)*Vector2(0,-8)+(3*Square(1-_.t1)*_.t1*Vector2(0,-10.083))+(3*(1-_.t1)*Square(_.t1)*Vector2(0,-1.333))", StepThenHoldEasingFunction());
                // Frame 58.
                result.InsertKeyFrame(0.983050823F, new Vector2(0F, 0F), StepThenHoldEasingFunction());
                return result;
            }

            // - - Shape tree root for layer: 1
            // ShapeGroup: L
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 31.
                result.InsertKeyFrame(0.525423706F, new Vector2(-1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            // - Shape tree root for layer: 1
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.186440676F, new Vector2(1.08000004F, 0.920000017F), CubicBezierEasingFunction_0());
                // Frame 26.
                result.InsertKeyFrame(0.440677971F, new Vector2(0.899999976F, 1.16999996F), CubicBezierEasingFunction_1());
                // Frame 37.
                result.InsertKeyFrame(0.627118647F, new Vector2(1.04999995F, 0.920000017F), CubicBezierEasingFunction_2());
                // Frame 47.
                result.InsertKeyFrame(0.796610177F, new Vector2(0.99000001F, 1.01999998F), CubicBezierEasingFunction_3());
                // Frame 57.
                result.InsertKeyFrame(0.966101706F, new Vector2(1F, 1F), CubicBezierEasingFunction_4());
                return result;
            }

            internal Icon_1_AnimatedVisual_UAPv7(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(512F, 512F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                StartProgressBoundAnimation(_themeColor_Color_000000_1.Properties, "Opacity0", Opacity0ScalarAnimation_1_to_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape, "Scale", ScaleVector2Animation_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape, "Offset", OffsetVector2Animation_1(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_2, "Scale", ScaleVector2Animation_0(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_2, "Offset", OffsetVector2Animation_0(), RootProgress());
                StartProgressBoundAnimation(_root.Properties, "t0", t0ScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_root.Properties, "t1", t1ScalarAnimation_0_to_1(), RootProgress());
            }

            public void DestroyAnimations()
            {
                _themeColor_Color_000000_1.Properties.StopAnimation("Opacity0");
                _containerShape.StopAnimation("Scale");
                _containerShape.StopAnimation("Offset");
                _spriteShape_2.StopAnimation("Scale");
                _spriteShape_2.StopAnimation("Offset");
                _root.Properties.StopAnimation("t0");
                _root.Properties.StopAnimation("t1");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
