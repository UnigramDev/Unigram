//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.2-build.24+g767465b091
//       
//       Command:
//           LottieGen -DisableTranslationOptimizer -Language CSharp -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.8 -InputFile Business.json
//       
//       Input file:
//           Business.json (15431 bytes created 14:20+01:00 Feb 26 2024)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// __________________________________________________________________________________________
// |       Object stats       | UAP v15 count | UAP v11 count | UAP v8 count | UAP v7 count |
// |__________________________|_______________|_______________|______________|______________|
// | All CompositionObjects   |           126 |           142 |          134 |          100 |
// |--------------------------+---------------+---------------+--------------+--------------|
// | Expression animators     |             1 |             5 |            4 |            3 |
// | KeyFrame animators       |             5 |             5 |            4 |            3 |
// | Reference parameters     |             1 |             5 |            4 |            3 |
// | Expression operations    |             0 |             0 |            0 |            0 |
// |--------------------------+---------------+---------------+--------------+--------------|
// | Animated brushes         |             - |             - |            - |            - |
// | Animated gradient stops  |             - |             - |            - |            - |
// | ExpressionAnimations     |             1 |             5 |            4 |            3 |
// | PathKeyFrameAnimations   |             1 |             1 |            - |            - |
// |--------------------------+---------------+---------------+--------------+--------------|
// | ContainerVisuals         |             4 |             4 |            4 |            2 |
// | ShapeVisuals             |             3 |             3 |            3 |            2 |
// |--------------------------+---------------+---------------+--------------+--------------|
// | ContainerShapes          |            13 |            13 |           13 |           12 |
// | CompositionSpriteShapes  |             4 |             4 |            4 |            3 |
// |--------------------------+---------------+---------------+--------------+--------------|
// | Brushes                  |             7 |             7 |            7 |            3 |
// | Gradient stops           |             5 |             5 |            5 |            5 |
// | CompositionVisualSurface |             2 |             2 |            2 |            - |
// ------------------------------------------------------------------------------------------
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Microsoft.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        u_business
    // Frame rate:  60 fps
    // Frame count: 30
    // Duration:    500.0 mS
    public sealed class Business
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 0.500 seconds.
        internal const long c_durationTicks = 5000000;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (Business_AnimatedVisual_UAPv15.IsRuntimeCompatible())
            {
                var res = 
                    new Business_AnimatedVisual_UAPv15(
                        compositor
                        );
                    res.CreateAnimations();
                    return res;
            }

            if (Business_AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                var res = 
                    new Business_AnimatedVisual_UAPv11(
                        compositor
                        );
                    res.CreateAnimations();
                    return res;
            }

            if (Business_AnimatedVisual_UAPv8.IsRuntimeCompatible())
            {
                var res = 
                    new Business_AnimatedVisual_UAPv8(
                        compositor
                        );
                    res.CreateAnimations();
                    return res;
            }

            if (Business_AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                var res = 
                    new Business_AnimatedVisual_UAPv7(
                        compositor
                        );
                    res.CreateAnimations();
                    return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 30d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(5000000);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 30d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPointerOver_Start", 0.0 },
                { "NormalToPointerOver_End", 1 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class Business_AnimatedVisual_UAPv15 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 5000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionContainerShape _containerShape_00;
            CompositionContainerShape _containerShape_04;
            CompositionContainerShape _containerShape_05;
            CompositionContainerShape _containerShape_09;
            CompositionPathGeometry _pathGeometry_0;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - ShapeGroup: Vector
            // - - - Path 2+Path 1
            // - - Path 2+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_0()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_1(), Geometry_2() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - - ShapeGroup: Vector
            // - - - - Path 2+Path 1
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-8.97399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-9.72000027F, -0.912F), new Vector2(-10.434F, -0.606999993F), new Vector2(-10.9510002F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(-10.9510002F, -0.0680000037F), new Vector2(-11.7320004F, 0.745999992F), new Vector2(-11.7320004F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-12.0579996F, 1.08599997F), new Vector2(-12.2790003F, 1.55599999F), new Vector2(-12.1000004F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-11.8330002F, 2.64299989F), new Vector2(-11.2139997F, 3.09899998F), new Vector2(-10.4919996F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-9.52700043F, 3.09899998F), new Vector2(-8.74400043F, 2.28299999F), new Vector2(-8.74400043F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-8.74400043F, 2.28299999F), new Vector2(-7.96099997F, 3.09899998F), new Vector2(-6.99599981F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-6.03100014F, 3.09899998F), new Vector2(-5.24800014F, 2.28299999F), new Vector2(-5.24800014F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-5.24800014F, 2.28299999F), new Vector2(-4.46500015F, 3.09899998F), new Vector2(-3.5F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.53500009F, 3.09899998F), new Vector2(-1.75199997F, 2.28299999F), new Vector2(-1.75199997F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.75199997F, 2.28299999F), new Vector2(-0.968999982F, 3.09899998F), new Vector2(-0.00400000019F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.961000025F, 3.09899998F), new Vector2(1.74399996F, 2.28299999F), new Vector2(1.74399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.74399996F, 2.28299999F), new Vector2(2.52699995F, 3.09899998F), new Vector2(3.4920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.21400023F, 3.09899998F), new Vector2(4.83300018F, 2.64299989F), new Vector2(5.0999999F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(5.27899981F, 1.55599999F), new Vector2(5.05800009F, 1.08599997F), new Vector2(4.73199987F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(4.73199987F, 0.745999992F), new Vector2(3.95099998F, -0.0680000037F), new Vector2(3.95099998F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(3.43400002F, -0.606999993F), new Vector2(2.72000003F, -0.912F), new Vector2(1.97399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(1.97399998F, -0.912F), new Vector2(-8.97399998F, -0.912F), new Vector2(-8.97399998F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - - ShapeGroup: Vector
            // - - - - Path 2+Path 1
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.47399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-6.21999979F, -0.912F), new Vector2(-6.93400002F, -0.606999993F), new Vector2(-7.45100021F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(-7.45100021F, -0.0680000037F), new Vector2(-8.23200035F, 0.745999992F), new Vector2(-8.23200035F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-8.55799961F, 1.08599997F), new Vector2(-8.77900028F, 1.55599999F), new Vector2(-8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-8.33300018F, 2.64299989F), new Vector2(-7.71400023F, 3.09899998F), new Vector2(-6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-6.02699995F, 3.09899998F), new Vector2(-5.24399996F, 2.28299999F), new Vector2(-5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-5.24399996F, 2.28299999F), new Vector2(-4.46099997F, 3.09899998F), new Vector2(-3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.5309999F, 3.09899998F), new Vector2(-1.74800003F, 2.28299999F), new Vector2(-1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.74800003F, 2.28299999F), new Vector2(-0.964999974F, 3.09899998F), new Vector2(0F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.964999974F, 3.09899998F), new Vector2(1.74800003F, 2.28299999F), new Vector2(1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.74800003F, 2.28299999F), new Vector2(2.5309999F, 3.09899998F), new Vector2(3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.46099997F, 3.09899998F), new Vector2(5.24399996F, 2.28299999F), new Vector2(5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(5.24399996F, 2.28299999F), new Vector2(6.02699995F, 3.09899998F), new Vector2(6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(7.71400023F, 3.09899998F), new Vector2(8.33300018F, 2.64299989F), new Vector2(8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(8.77900028F, 1.55599999F), new Vector2(8.55799961F, 1.08599997F), new Vector2(8.23200035F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(8.23200035F, 0.745999992F), new Vector2(7.45100021F, -0.0680000037F), new Vector2(7.45100021F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(6.93400002F, -0.606999993F), new Vector2(6.21999979F, -0.912F), new Vector2(5.47399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(5.47399998F, -0.912F), new Vector2(-5.47399998F, -0.912F), new Vector2(-5.47399998F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - ShapeGroup: Vector
            // - - - Path 2+Path 1
            // - - Path 2+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_3()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_4(), Geometry_5() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - - ShapeGroup: Vector
            // - - - - Path 2+Path 1
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.47399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-6.21999979F, -0.912F), new Vector2(-6.93400002F, -0.606999993F), new Vector2(-7.45100021F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(-7.45100021F, -0.0680000037F), new Vector2(-8.23200035F, 0.745999992F), new Vector2(-8.23200035F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-8.55799961F, 1.08599997F), new Vector2(-8.77900028F, 1.55599999F), new Vector2(-8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-8.33300018F, 2.64299989F), new Vector2(-7.71400023F, 3.09899998F), new Vector2(-6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-6.02699995F, 3.09899998F), new Vector2(-5.24399996F, 2.28299999F), new Vector2(-5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-5.24399996F, 2.28299999F), new Vector2(-4.46099997F, 3.09899998F), new Vector2(-3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.5309999F, 3.09899998F), new Vector2(-1.74800003F, 2.28299999F), new Vector2(-1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.74800003F, 2.28299999F), new Vector2(-0.964999974F, 3.09899998F), new Vector2(0F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.964999974F, 3.09899998F), new Vector2(1.74800003F, 2.28299999F), new Vector2(1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.74800003F, 2.28299999F), new Vector2(2.5309999F, 3.09899998F), new Vector2(3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.46099997F, 3.09899998F), new Vector2(5.24399996F, 2.28299999F), new Vector2(5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(5.24399996F, 2.28299999F), new Vector2(6.02699995F, 3.09899998F), new Vector2(6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(7.71400023F, 3.09899998F), new Vector2(8.33300018F, 2.64299989F), new Vector2(8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(8.77900028F, 1.55599999F), new Vector2(8.55799961F, 1.08599997F), new Vector2(8.23200035F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(8.23200035F, 0.745999992F), new Vector2(7.45100021F, -0.0680000037F), new Vector2(7.45100021F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(6.93400002F, -0.606999993F), new Vector2(6.21999979F, -0.912F), new Vector2(5.47399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(5.47399998F, -0.912F), new Vector2(-5.47399998F, -0.912F), new Vector2(-5.47399998F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - - ShapeGroup: Vector
            // - - - - Path 2+Path 1
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-1.99399996F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-2.74000001F, -0.912F), new Vector2(-3.454F, -0.606999993F), new Vector2(-3.97099996F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(-3.97099996F, -0.0680000037F), new Vector2(-4.75199986F, 0.745999992F), new Vector2(-4.75199986F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-5.07800007F, 1.08599997F), new Vector2(-5.29899979F, 1.55599999F), new Vector2(-5.11999989F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-4.85300016F, 2.64299989F), new Vector2(-4.23400021F, 3.09899998F), new Vector2(-3.51200008F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.54699993F, 3.09899998F), new Vector2(-1.76400006F, 2.28299999F), new Vector2(-1.76400006F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.76400006F, 2.28299999F), new Vector2(-0.981000006F, 3.09899998F), new Vector2(-0.0160000008F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.949000001F, 3.09899998F), new Vector2(1.73199999F, 2.28299999F), new Vector2(1.73199999F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.73199999F, 2.28299999F), new Vector2(2.5150001F, 3.09899998F), new Vector2(3.48000002F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.44500017F, 3.09899998F), new Vector2(5.22800016F, 2.28299999F), new Vector2(5.22800016F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(5.22800016F, 2.28299999F), new Vector2(6.01100016F, 3.09899998F), new Vector2(6.97599983F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(7.94099998F, 3.09899998F), new Vector2(8.72399998F, 2.28299999F), new Vector2(8.72399998F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(8.72399998F, 2.28299999F), new Vector2(9.50699997F, 3.09899998F), new Vector2(10.4720001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(11.1940002F, 3.09899998F), new Vector2(11.8140001F, 2.64299989F), new Vector2(12.0810003F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(12.2600002F, 1.55599999F), new Vector2(12.0389996F, 1.08599997F), new Vector2(11.7130003F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(11.7130003F, 0.745999992F), new Vector2(10.9320002F, -0.0680000037F), new Vector2(10.9320002F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(10.415F, -0.606999993F), new Vector2(9.69999981F, -0.912F), new Vector2(8.95400047F, -0.912F));
                    builder.AddCubicBezier(new Vector2(8.95400047F, -0.912F), new Vector2(-1.99399996F, -0.912F), new Vector2(-1.99399996F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Masks
            CanvasGeometry Geometry_6()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-54.7509995F, -9.13500023F));
                    builder.AddCubicBezier(new Vector2(-62.2179985F, -9.13700008F), new Vector2(-69.3619995F, -6.09200001F), new Vector2(-74.5309982F, -0.703000009F));
                    builder.AddLine(new Vector2(-82.3450012F, 7.44299984F));
                    builder.AddCubicBezier(new Vector2(-85.6060028F, 10.8430004F), new Vector2(-87.8150024F, 15.5430002F), new Vector2(-86.0299988F, 19.9029999F));
                    builder.AddCubicBezier(new Vector2(-83.362999F, 26.4169998F), new Vector2(-77.1679993F, 30.9829998F), new Vector2(-69.947998F, 30.9850006F));
                    builder.AddCubicBezier(new Vector2(-60.2910004F, 30.9880009F), new Vector2(-44.6339989F, 30.9920006F), new Vector2(-34.9770012F, 30.9950008F));
                    builder.AddCubicBezier(new Vector2(-25.3199997F, 30.9979992F), new Vector2(-9.66399956F, 31.0020008F), new Vector2(-0.00700000022F, 31.0049992F));
                    builder.AddCubicBezier(new Vector2(9.64999962F, 31.0079994F), new Vector2(25.3059998F, 31.0109997F), new Vector2(34.9630013F, 31.0139999F));
                    builder.AddCubicBezier(new Vector2(44.6199989F, 31.0170002F), new Vector2(60.276001F, 31.0209999F), new Vector2(69.9329987F, 31.0240002F));
                    builder.AddCubicBezier(new Vector2(77.1529999F, 31.0259991F), new Vector2(83.3519974F, 26.4640007F), new Vector2(86.0220032F, 19.9519997F));
                    builder.AddCubicBezier(new Vector2(87.8089981F, 15.5930004F), new Vector2(85.6039963F, 10.8920002F), new Vector2(82.3440018F, 7.48999977F));
                    builder.AddLine(new Vector2(74.5350037F, -0.661000013F));
                    builder.AddCubicBezier(new Vector2(69.3690033F, -6.05299997F), new Vector2(62.2260017F, -9.10200024F), new Vector2(54.7589989F, -9.10400009F));
                    builder.AddLine(new Vector2(-54.7509995F, -9.13500023F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Layer aggregator
            // - - - - ShapeGroup: Vector
            // Path 2
            CanvasGeometry Geometry_7()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.09800005F, -3.09899998F));
                    builder.AddCubicBezier(new Vector2(-5.50099993F, -3.09899998F), new Vector2(-5.82700014F, -2.773F), new Vector2(-5.82700014F, -2.36999989F));
                    builder.AddCubicBezier(new Vector2(-5.82700014F, -1.96700001F), new Vector2(-5.50099993F, -1.64100003F), new Vector2(-5.09800005F, -1.64100003F));
                    builder.AddLine(new Vector2(5.09700012F, -1.64100003F));
                    builder.AddCubicBezier(new Vector2(5.5F, -1.64100003F), new Vector2(5.82700014F, -1.96700001F), new Vector2(5.82700014F, -2.36999989F));
                    builder.AddCubicBezier(new Vector2(5.82700014F, -2.773F), new Vector2(5.5F, -3.09899998F), new Vector2(5.09700012F, -3.09899998F));
                    builder.AddLine(new Vector2(-5.09800005F, -3.09899998F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Layer aggregator
            // - - - - ShapeGroup: Union
            // - - Path 1
            CanvasGeometry Geometry_8()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.5F, -3.5F));
                    builder.AddCubicBezier(new Vector2(-5.5F, -3.91400003F), new Vector2(-5.83599997F, -4.25F), new Vector2(-6.25F, -4.25F));
                    builder.AddCubicBezier(new Vector2(-6.66400003F, -4.25F), new Vector2(-7F, -3.91400003F), new Vector2(-7F, -3.5F));
                    builder.AddLine(new Vector2(-7F, 2.58699989F));
                    builder.AddCubicBezier(new Vector2(-7F, 3.50500011F), new Vector2(-6.25500011F, 4.25F), new Vector2(-5.33699989F, 4.25F));
                    builder.AddLine(new Vector2(5.33699989F, 4.25F));
                    builder.AddCubicBezier(new Vector2(6.25500011F, 4.25F), new Vector2(7F, 3.50500011F), new Vector2(7F, 2.58699989F));
                    builder.AddLine(new Vector2(7F, -3.5F));
                    builder.AddCubicBezier(new Vector2(7F, -3.91400003F), new Vector2(6.66400003F, -4.25F), new Vector2(6.25F, -4.25F));
                    builder.AddCubicBezier(new Vector2(5.83599997F, -4.25F), new Vector2(5.5F, -3.91400003F), new Vector2(5.5F, -3.5F));
                    builder.AddLine(new Vector2(5.5F, -2.32599998F));
                    builder.AddCubicBezier(new Vector2(5.5F, -1.73199999F), new Vector2(5.01800013F, -1.25F), new Vector2(4.42399979F, -1.25F));
                    builder.AddLine(new Vector2(-4.42399979F, -1.25F));
                    builder.AddCubicBezier(new Vector2(-5.01800013F, -1.25F), new Vector2(-5.5F, -1.73199999F), new Vector2(-5.5F, -2.32599998F));
                    builder.AddLine(new Vector2(-5.5F, -3.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Masks
            CompositionColorBrush ColorBrush_Black()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Vector
            CompositionColorBrush ColorBrush_SemiTransparentBlack()
            {
                return _c.CreateColorBrush(Color.FromArgb(0x33, 0x00, 0x00, 0x00));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostCornflowerBlue_FF6B92FF()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0x6B, 0x92, 0xFF));
            }

            // - - - - - - Layer aggregator
            // - - - ShapeGroup: Union
            // - Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0p35_AlmostMediumOrchid_FFA95DE3()
            {
                return _c.CreateColorGradientStop(0.349999994F, Color.FromArgb(0xFF, 0xA9, 0x5D, 0xE3));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_0p484_AlmostMediumSlateBlue_FF966EFF()
            {
                return _c.CreateColorGradientStop(0.483999997F, Color.FromArgb(0xFF, 0x96, 0x6E, 0xFF));
            }

            // - - - - - - Layer aggregator
            // - - - ShapeGroup: Union
            // - Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostLightCoral_FFF46C7C()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xF4, 0x6C, 0x7C));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 2
            CompositionColorGradientStop GradientStop_1_AlmostOrchid_FFE36ACE()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xE3, 0x6A, 0xCE));
            }

            // Shape tree root for layer: Vector 3
            CompositionContainerShape ContainerShape_00()
            {
                if (_containerShape_00 != null) { return _containerShape_00; }
                var result = _containerShape_00 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(99.9380035F, 50.9949989F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_01());
                return result;
            }

            // - Shape tree root for layer: Vector 3
            CompositionContainerShape ContainerShape_01()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Vector
                result.Shapes.Add(ContainerShape_02());
                return result;
            }

            // - - Shape tree root for layer: Vector 3
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_02()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_03());
                return result;
            }

            // - - - Shape tree root for layer: Vector 3
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_03()
            {
                var result = _c.CreateContainerShape();
                // Path 2+Path 1
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // Masks
            CompositionContainerShape ContainerShape_04()
            {
                if (_containerShape_04 != null) { return _containerShape_04; }
                var result = _containerShape_04 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(99.9380035F, 50.9949989F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_05()
            {
                if (_containerShape_05 != null) { return _containerShape_05; }
                var result = _containerShape_05 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(99.9380035F, 50.9949989F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_06());
                return result;
            }

            // - Layer aggregator
            CompositionContainerShape ContainerShape_06()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Vector
                result.Shapes.Add(ContainerShape_07());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_07()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_08());
                return result;
            }

            // - - - Layer aggregator
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_08()
            {
                var result = _c.CreateContainerShape();
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_09()
            {
                if (_containerShape_09 != null) { return _containerShape_09; }
                var result = _containerShape_09 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(100F, 137.5F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_10());
                return result;
            }

            // - Layer aggregator
            CompositionContainerShape ContainerShape_10()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Union
                result.Shapes.Add(ContainerShape_11());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Union
            CompositionContainerShape ContainerShape_11()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_12());
                return result;
            }

            // - - - Layer aggregator
            // ShapeGroup: Union
            CompositionContainerShape ContainerShape_12()
            {
                var result = _c.CreateContainerShape();
                // Path 1
                result.Shapes.Add(SpriteShape_3());
                return result;
            }

            CompositionEffectBrush EffectBrush()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectFactory EffectFactory()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var result = _c.CreateEffectFactory(compositeEffect);
                return result;
            }

            // - - - - - Shape tree root for layer: Vector 3
            // - - ShapeGroup: Vector
            // Path 2+Path 1
            CompositionLinearGradientBrush LinearGradientBrush_0()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostCornflowerBlue_FF6B92FF());
                colorStops.Add(GradientStop_0p484_AlmostMediumSlateBlue_FF966EFF());
                colorStops.Add(GradientStop_1_AlmostOrchid_FFE36ACE());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(-8.66399956F, 3.09899998F);
                result.EndPoint = new Vector2(8.66399956F, -3.09899998F);
                return result;
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Union
            // Path 1
            CompositionLinearGradientBrush LinearGradientBrush_1()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0p35_AlmostMediumOrchid_FFA95DE3());
                colorStops.Add(GradientStop_1_AlmostLightCoral_FFF46C7C());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(0F, -4.25F);
                result.EndPoint = new Vector2(0F, 4.25F);
                return result;
            }

            // - - - - - Shape tree root for layer: Vector 3
            // - - ShapeGroup: Vector
            // Path 2+Path 1
            // Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                if (_pathGeometry_0 != null) { return _pathGeometry_0; }
                var result = _pathGeometry_0 = _c.CreatePathGeometry();
                return result;
            }

            // - - Masks
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_6()));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Vector
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_7()));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Union
            // Path 1
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_8()));
            }

            // - - - - Shape tree root for layer: Vector 3
            // - ShapeGroup: Vector
            // Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = LinearGradientBrush_0();
                return result;
            }

            // - Masks
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = ColorBrush_Black();
                return result;
            }

            // - - - - Layer aggregator
            // - ShapeGroup: Vector
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.FillBrush = ColorBrush_SemiTransparentBlack();
                return result;
            }

            // - - - - Layer aggregator
            // - ShapeGroup: Union
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape(PathGeometry_3());
                result.FillBrush = LinearGradientBrush_1();
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(200F, 200F);
                result.SourceOffset = new Vector2(0F, 0F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_2();
                result.SourceSize = new Vector2(200F, 200F);
                result.SourceOffset = new Vector2(0F, 0F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                result.Children.InsertAtTop(ContainerVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                // Shape tree root for layer: Vector 3
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            ContainerVisual ContainerVisual_2()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                children.InsertAtTop(SpriteVisual_0());
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_1;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return (_cubicBezierEasingFunction_2 == null)
                    ? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_2;
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Path 2+Path 1.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, new CompositionPath(Geometry_0()), HoldThenStepEasingFunction());
                // Frame 29.
                result.InsertKeyFrame(0.966666639F, new CompositionPath(Geometry_3()), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // Shape tree root for layer: Vector 3
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                result.Shapes.Add(ContainerShape_00());
                return result;
            }

            // Masks
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                result.Shapes.Add(ContainerShape_04());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_05());
                shapes.Add(ContainerShape_09());
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Offset = new Vector3(0F, 0F, 0F);
                result.Size = new Vector2(200F, 200F);
                result.Brush = EffectBrush();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsFinalStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - - Layer aggregator
            // Scale
            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsInitialStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - Shape tree root for layer: Vector 3
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), CubicBezierEasingFunction_0());
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), CubicBezierEasingFunction_1());
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), CubicBezierEasingFunction_2());
                return result;
            }

            // - Masks
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), CubicBezierEasingFunction_0());
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), CubicBezierEasingFunction_1());
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), CubicBezierEasingFunction_2());
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_3()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.100000001F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.366666675F, new Vector2(1.12F, 1.12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                // Frame 19.
                result.InsertKeyFrame(0.633333325F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                // Frame 27.
                result.InsertKeyFrame(0.899999976F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                return result;
            }

            internal Business_AnimatedVisual_UAPv15(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_00.StartAnimation("Scale", ScaleVector2Animation_0(), AnimationController_0());
                _containerShape_04.StartAnimation("Scale", ScaleVector2Animation_1(), AnimationController_0());
                _containerShape_05.StartAnimation("Scale", ScaleVector2Animation_2(), AnimationController_0());
                _containerShape_09.StartAnimation("Scale", ScaleVector2Animation_3(), AnimationController_0());
                _pathGeometry_0.StartAnimation("Path", PathKeyFrameAnimation_0(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _containerShape_00.StopAnimation("Scale");
                _containerShape_04.StopAnimation("Scale");
                _containerShape_05.StopAnimation("Scale");
                _containerShape_09.StopAnimation("Scale");
                _pathGeometry_0.StopAnimation("Path");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 15);
            }
        }

        sealed class Business_AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 5000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionContainerShape _containerShape_00;
            CompositionContainerShape _containerShape_04;
            CompositionContainerShape _containerShape_05;
            CompositionContainerShape _containerShape_09;
            CompositionPathGeometry _pathGeometry_0;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            // - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - ShapeGroup: Vector
            // - - - Path 2+Path 1
            // - - Path 2+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_0()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_1(), Geometry_2() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - - ShapeGroup: Vector
            // - - - - Path 2+Path 1
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-8.97399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-9.72000027F, -0.912F), new Vector2(-10.434F, -0.606999993F), new Vector2(-10.9510002F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(-10.9510002F, -0.0680000037F), new Vector2(-11.7320004F, 0.745999992F), new Vector2(-11.7320004F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-12.0579996F, 1.08599997F), new Vector2(-12.2790003F, 1.55599999F), new Vector2(-12.1000004F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-11.8330002F, 2.64299989F), new Vector2(-11.2139997F, 3.09899998F), new Vector2(-10.4919996F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-9.52700043F, 3.09899998F), new Vector2(-8.74400043F, 2.28299999F), new Vector2(-8.74400043F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-8.74400043F, 2.28299999F), new Vector2(-7.96099997F, 3.09899998F), new Vector2(-6.99599981F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-6.03100014F, 3.09899998F), new Vector2(-5.24800014F, 2.28299999F), new Vector2(-5.24800014F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-5.24800014F, 2.28299999F), new Vector2(-4.46500015F, 3.09899998F), new Vector2(-3.5F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.53500009F, 3.09899998F), new Vector2(-1.75199997F, 2.28299999F), new Vector2(-1.75199997F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.75199997F, 2.28299999F), new Vector2(-0.968999982F, 3.09899998F), new Vector2(-0.00400000019F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.961000025F, 3.09899998F), new Vector2(1.74399996F, 2.28299999F), new Vector2(1.74399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.74399996F, 2.28299999F), new Vector2(2.52699995F, 3.09899998F), new Vector2(3.4920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.21400023F, 3.09899998F), new Vector2(4.83300018F, 2.64299989F), new Vector2(5.0999999F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(5.27899981F, 1.55599999F), new Vector2(5.05800009F, 1.08599997F), new Vector2(4.73199987F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(4.73199987F, 0.745999992F), new Vector2(3.95099998F, -0.0680000037F), new Vector2(3.95099998F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(3.43400002F, -0.606999993F), new Vector2(2.72000003F, -0.912F), new Vector2(1.97399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(1.97399998F, -0.912F), new Vector2(-8.97399998F, -0.912F), new Vector2(-8.97399998F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - - ShapeGroup: Vector
            // - - - - Path 2+Path 1
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.47399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-6.21999979F, -0.912F), new Vector2(-6.93400002F, -0.606999993F), new Vector2(-7.45100021F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(-7.45100021F, -0.0680000037F), new Vector2(-8.23200035F, 0.745999992F), new Vector2(-8.23200035F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-8.55799961F, 1.08599997F), new Vector2(-8.77900028F, 1.55599999F), new Vector2(-8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-8.33300018F, 2.64299989F), new Vector2(-7.71400023F, 3.09899998F), new Vector2(-6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-6.02699995F, 3.09899998F), new Vector2(-5.24399996F, 2.28299999F), new Vector2(-5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-5.24399996F, 2.28299999F), new Vector2(-4.46099997F, 3.09899998F), new Vector2(-3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.5309999F, 3.09899998F), new Vector2(-1.74800003F, 2.28299999F), new Vector2(-1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.74800003F, 2.28299999F), new Vector2(-0.964999974F, 3.09899998F), new Vector2(0F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.964999974F, 3.09899998F), new Vector2(1.74800003F, 2.28299999F), new Vector2(1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.74800003F, 2.28299999F), new Vector2(2.5309999F, 3.09899998F), new Vector2(3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.46099997F, 3.09899998F), new Vector2(5.24399996F, 2.28299999F), new Vector2(5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(5.24399996F, 2.28299999F), new Vector2(6.02699995F, 3.09899998F), new Vector2(6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(7.71400023F, 3.09899998F), new Vector2(8.33300018F, 2.64299989F), new Vector2(8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(8.77900028F, 1.55599999F), new Vector2(8.55799961F, 1.08599997F), new Vector2(8.23200035F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(8.23200035F, 0.745999992F), new Vector2(7.45100021F, -0.0680000037F), new Vector2(7.45100021F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(6.93400002F, -0.606999993F), new Vector2(6.21999979F, -0.912F), new Vector2(5.47399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(5.47399998F, -0.912F), new Vector2(-5.47399998F, -0.912F), new Vector2(-5.47399998F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - ShapeGroup: Vector
            // - - - Path 2+Path 1
            // - - Path 2+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_3()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_4(), Geometry_5() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - - ShapeGroup: Vector
            // - - - - Path 2+Path 1
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.47399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-6.21999979F, -0.912F), new Vector2(-6.93400002F, -0.606999993F), new Vector2(-7.45100021F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(-7.45100021F, -0.0680000037F), new Vector2(-8.23200035F, 0.745999992F), new Vector2(-8.23200035F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-8.55799961F, 1.08599997F), new Vector2(-8.77900028F, 1.55599999F), new Vector2(-8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-8.33300018F, 2.64299989F), new Vector2(-7.71400023F, 3.09899998F), new Vector2(-6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-6.02699995F, 3.09899998F), new Vector2(-5.24399996F, 2.28299999F), new Vector2(-5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-5.24399996F, 2.28299999F), new Vector2(-4.46099997F, 3.09899998F), new Vector2(-3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.5309999F, 3.09899998F), new Vector2(-1.74800003F, 2.28299999F), new Vector2(-1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.74800003F, 2.28299999F), new Vector2(-0.964999974F, 3.09899998F), new Vector2(0F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.964999974F, 3.09899998F), new Vector2(1.74800003F, 2.28299999F), new Vector2(1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.74800003F, 2.28299999F), new Vector2(2.5309999F, 3.09899998F), new Vector2(3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.46099997F, 3.09899998F), new Vector2(5.24399996F, 2.28299999F), new Vector2(5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(5.24399996F, 2.28299999F), new Vector2(6.02699995F, 3.09899998F), new Vector2(6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(7.71400023F, 3.09899998F), new Vector2(8.33300018F, 2.64299989F), new Vector2(8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(8.77900028F, 1.55599999F), new Vector2(8.55799961F, 1.08599997F), new Vector2(8.23200035F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(8.23200035F, 0.745999992F), new Vector2(7.45100021F, -0.0680000037F), new Vector2(7.45100021F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(6.93400002F, -0.606999993F), new Vector2(6.21999979F, -0.912F), new Vector2(5.47399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(5.47399998F, -0.912F), new Vector2(-5.47399998F, -0.912F), new Vector2(-5.47399998F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - - ShapeGroup: Vector
            // - - - - Path 2+Path 1
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-1.99399996F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-2.74000001F, -0.912F), new Vector2(-3.454F, -0.606999993F), new Vector2(-3.97099996F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(-3.97099996F, -0.0680000037F), new Vector2(-4.75199986F, 0.745999992F), new Vector2(-4.75199986F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-5.07800007F, 1.08599997F), new Vector2(-5.29899979F, 1.55599999F), new Vector2(-5.11999989F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-4.85300016F, 2.64299989F), new Vector2(-4.23400021F, 3.09899998F), new Vector2(-3.51200008F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.54699993F, 3.09899998F), new Vector2(-1.76400006F, 2.28299999F), new Vector2(-1.76400006F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.76400006F, 2.28299999F), new Vector2(-0.981000006F, 3.09899998F), new Vector2(-0.0160000008F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.949000001F, 3.09899998F), new Vector2(1.73199999F, 2.28299999F), new Vector2(1.73199999F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.73199999F, 2.28299999F), new Vector2(2.5150001F, 3.09899998F), new Vector2(3.48000002F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.44500017F, 3.09899998F), new Vector2(5.22800016F, 2.28299999F), new Vector2(5.22800016F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(5.22800016F, 2.28299999F), new Vector2(6.01100016F, 3.09899998F), new Vector2(6.97599983F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(7.94099998F, 3.09899998F), new Vector2(8.72399998F, 2.28299999F), new Vector2(8.72399998F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(8.72399998F, 2.28299999F), new Vector2(9.50699997F, 3.09899998F), new Vector2(10.4720001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(11.1940002F, 3.09899998F), new Vector2(11.8140001F, 2.64299989F), new Vector2(12.0810003F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(12.2600002F, 1.55599999F), new Vector2(12.0389996F, 1.08599997F), new Vector2(11.7130003F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(11.7130003F, 0.745999992F), new Vector2(10.9320002F, -0.0680000037F), new Vector2(10.9320002F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(10.415F, -0.606999993F), new Vector2(9.69999981F, -0.912F), new Vector2(8.95400047F, -0.912F));
                    builder.AddCubicBezier(new Vector2(8.95400047F, -0.912F), new Vector2(-1.99399996F, -0.912F), new Vector2(-1.99399996F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Masks
            CanvasGeometry Geometry_6()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-54.7509995F, -9.13500023F));
                    builder.AddCubicBezier(new Vector2(-62.2179985F, -9.13700008F), new Vector2(-69.3619995F, -6.09200001F), new Vector2(-74.5309982F, -0.703000009F));
                    builder.AddLine(new Vector2(-82.3450012F, 7.44299984F));
                    builder.AddCubicBezier(new Vector2(-85.6060028F, 10.8430004F), new Vector2(-87.8150024F, 15.5430002F), new Vector2(-86.0299988F, 19.9029999F));
                    builder.AddCubicBezier(new Vector2(-83.362999F, 26.4169998F), new Vector2(-77.1679993F, 30.9829998F), new Vector2(-69.947998F, 30.9850006F));
                    builder.AddCubicBezier(new Vector2(-60.2910004F, 30.9880009F), new Vector2(-44.6339989F, 30.9920006F), new Vector2(-34.9770012F, 30.9950008F));
                    builder.AddCubicBezier(new Vector2(-25.3199997F, 30.9979992F), new Vector2(-9.66399956F, 31.0020008F), new Vector2(-0.00700000022F, 31.0049992F));
                    builder.AddCubicBezier(new Vector2(9.64999962F, 31.0079994F), new Vector2(25.3059998F, 31.0109997F), new Vector2(34.9630013F, 31.0139999F));
                    builder.AddCubicBezier(new Vector2(44.6199989F, 31.0170002F), new Vector2(60.276001F, 31.0209999F), new Vector2(69.9329987F, 31.0240002F));
                    builder.AddCubicBezier(new Vector2(77.1529999F, 31.0259991F), new Vector2(83.3519974F, 26.4640007F), new Vector2(86.0220032F, 19.9519997F));
                    builder.AddCubicBezier(new Vector2(87.8089981F, 15.5930004F), new Vector2(85.6039963F, 10.8920002F), new Vector2(82.3440018F, 7.48999977F));
                    builder.AddLine(new Vector2(74.5350037F, -0.661000013F));
                    builder.AddCubicBezier(new Vector2(69.3690033F, -6.05299997F), new Vector2(62.2260017F, -9.10200024F), new Vector2(54.7589989F, -9.10400009F));
                    builder.AddLine(new Vector2(-54.7509995F, -9.13500023F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Layer aggregator
            // - - - - ShapeGroup: Vector
            // Path 2
            CanvasGeometry Geometry_7()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.09800005F, -3.09899998F));
                    builder.AddCubicBezier(new Vector2(-5.50099993F, -3.09899998F), new Vector2(-5.82700014F, -2.773F), new Vector2(-5.82700014F, -2.36999989F));
                    builder.AddCubicBezier(new Vector2(-5.82700014F, -1.96700001F), new Vector2(-5.50099993F, -1.64100003F), new Vector2(-5.09800005F, -1.64100003F));
                    builder.AddLine(new Vector2(5.09700012F, -1.64100003F));
                    builder.AddCubicBezier(new Vector2(5.5F, -1.64100003F), new Vector2(5.82700014F, -1.96700001F), new Vector2(5.82700014F, -2.36999989F));
                    builder.AddCubicBezier(new Vector2(5.82700014F, -2.773F), new Vector2(5.5F, -3.09899998F), new Vector2(5.09700012F, -3.09899998F));
                    builder.AddLine(new Vector2(-5.09800005F, -3.09899998F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Layer aggregator
            // - - - - ShapeGroup: Union
            // - - Path 1
            CanvasGeometry Geometry_8()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.5F, -3.5F));
                    builder.AddCubicBezier(new Vector2(-5.5F, -3.91400003F), new Vector2(-5.83599997F, -4.25F), new Vector2(-6.25F, -4.25F));
                    builder.AddCubicBezier(new Vector2(-6.66400003F, -4.25F), new Vector2(-7F, -3.91400003F), new Vector2(-7F, -3.5F));
                    builder.AddLine(new Vector2(-7F, 2.58699989F));
                    builder.AddCubicBezier(new Vector2(-7F, 3.50500011F), new Vector2(-6.25500011F, 4.25F), new Vector2(-5.33699989F, 4.25F));
                    builder.AddLine(new Vector2(5.33699989F, 4.25F));
                    builder.AddCubicBezier(new Vector2(6.25500011F, 4.25F), new Vector2(7F, 3.50500011F), new Vector2(7F, 2.58699989F));
                    builder.AddLine(new Vector2(7F, -3.5F));
                    builder.AddCubicBezier(new Vector2(7F, -3.91400003F), new Vector2(6.66400003F, -4.25F), new Vector2(6.25F, -4.25F));
                    builder.AddCubicBezier(new Vector2(5.83599997F, -4.25F), new Vector2(5.5F, -3.91400003F), new Vector2(5.5F, -3.5F));
                    builder.AddLine(new Vector2(5.5F, -2.32599998F));
                    builder.AddCubicBezier(new Vector2(5.5F, -1.73199999F), new Vector2(5.01800013F, -1.25F), new Vector2(4.42399979F, -1.25F));
                    builder.AddLine(new Vector2(-4.42399979F, -1.25F));
                    builder.AddCubicBezier(new Vector2(-5.01800013F, -1.25F), new Vector2(-5.5F, -1.73199999F), new Vector2(-5.5F, -2.32599998F));
                    builder.AddLine(new Vector2(-5.5F, -3.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Masks
            CompositionColorBrush ColorBrush_Black()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Vector
            CompositionColorBrush ColorBrush_SemiTransparentBlack()
            {
                return _c.CreateColorBrush(Color.FromArgb(0x33, 0x00, 0x00, 0x00));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostCornflowerBlue_FF6B92FF()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0x6B, 0x92, 0xFF));
            }

            // - - - - - - Layer aggregator
            // - - - ShapeGroup: Union
            // - Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0p35_AlmostMediumOrchid_FFA95DE3()
            {
                return _c.CreateColorGradientStop(0.349999994F, Color.FromArgb(0xFF, 0xA9, 0x5D, 0xE3));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_0p484_AlmostMediumSlateBlue_FF966EFF()
            {
                return _c.CreateColorGradientStop(0.483999997F, Color.FromArgb(0xFF, 0x96, 0x6E, 0xFF));
            }

            // - - - - - - Layer aggregator
            // - - - ShapeGroup: Union
            // - Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostLightCoral_FFF46C7C()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xF4, 0x6C, 0x7C));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 2
            CompositionColorGradientStop GradientStop_1_AlmostOrchid_FFE36ACE()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xE3, 0x6A, 0xCE));
            }

            // Shape tree root for layer: Vector 3
            CompositionContainerShape ContainerShape_00()
            {
                if (_containerShape_00 != null) { return _containerShape_00; }
                var result = _containerShape_00 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(99.9380035F, 50.9949989F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_01());
                return result;
            }

            // - Shape tree root for layer: Vector 3
            CompositionContainerShape ContainerShape_01()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Vector
                result.Shapes.Add(ContainerShape_02());
                return result;
            }

            // - - Shape tree root for layer: Vector 3
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_02()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_03());
                return result;
            }

            // - - - Shape tree root for layer: Vector 3
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_03()
            {
                var result = _c.CreateContainerShape();
                // Path 2+Path 1
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // Masks
            CompositionContainerShape ContainerShape_04()
            {
                if (_containerShape_04 != null) { return _containerShape_04; }
                var result = _containerShape_04 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(99.9380035F, 50.9949989F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_05()
            {
                if (_containerShape_05 != null) { return _containerShape_05; }
                var result = _containerShape_05 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(99.9380035F, 50.9949989F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_06());
                return result;
            }

            // - Layer aggregator
            CompositionContainerShape ContainerShape_06()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Vector
                result.Shapes.Add(ContainerShape_07());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_07()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_08());
                return result;
            }

            // - - - Layer aggregator
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_08()
            {
                var result = _c.CreateContainerShape();
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_09()
            {
                if (_containerShape_09 != null) { return _containerShape_09; }
                var result = _containerShape_09 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(100F, 137.5F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_10());
                return result;
            }

            // - Layer aggregator
            CompositionContainerShape ContainerShape_10()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Union
                result.Shapes.Add(ContainerShape_11());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Union
            CompositionContainerShape ContainerShape_11()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_12());
                return result;
            }

            // - - - Layer aggregator
            // ShapeGroup: Union
            CompositionContainerShape ContainerShape_12()
            {
                var result = _c.CreateContainerShape();
                // Path 1
                result.Shapes.Add(SpriteShape_3());
                return result;
            }

            CompositionEffectBrush EffectBrush()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectFactory EffectFactory()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var result = _c.CreateEffectFactory(compositeEffect);
                return result;
            }

            // - - - - - Shape tree root for layer: Vector 3
            // - - ShapeGroup: Vector
            // Path 2+Path 1
            CompositionLinearGradientBrush LinearGradientBrush_0()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostCornflowerBlue_FF6B92FF());
                colorStops.Add(GradientStop_0p484_AlmostMediumSlateBlue_FF966EFF());
                colorStops.Add(GradientStop_1_AlmostOrchid_FFE36ACE());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(-8.66399956F, 3.09899998F);
                result.EndPoint = new Vector2(8.66399956F, -3.09899998F);
                return result;
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Union
            // Path 1
            CompositionLinearGradientBrush LinearGradientBrush_1()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0p35_AlmostMediumOrchid_FFA95DE3());
                colorStops.Add(GradientStop_1_AlmostLightCoral_FFF46C7C());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(0F, -4.25F);
                result.EndPoint = new Vector2(0F, 4.25F);
                return result;
            }

            // - - - - - Shape tree root for layer: Vector 3
            // - - ShapeGroup: Vector
            // Path 2+Path 1
            // Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                if (_pathGeometry_0 != null) { return _pathGeometry_0; }
                var result = _pathGeometry_0 = _c.CreatePathGeometry();
                return result;
            }

            // - - Masks
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_6()));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Vector
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_7()));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Union
            // Path 1
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_8()));
            }

            // - - - - Shape tree root for layer: Vector 3
            // - ShapeGroup: Vector
            // Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = LinearGradientBrush_0();
                return result;
            }

            // - Masks
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = ColorBrush_Black();
                return result;
            }

            // - - - - Layer aggregator
            // - ShapeGroup: Vector
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.FillBrush = ColorBrush_SemiTransparentBlack();
                return result;
            }

            // - - - - Layer aggregator
            // - ShapeGroup: Union
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape(PathGeometry_3());
                result.FillBrush = LinearGradientBrush_1();
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(200F, 200F);
                result.SourceOffset = new Vector2(0F, 0F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_2();
                result.SourceSize = new Vector2(200F, 200F);
                result.SourceOffset = new Vector2(0F, 0F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                result.Children.InsertAtTop(ContainerVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                // Shape tree root for layer: Vector 3
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            ContainerVisual ContainerVisual_2()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                children.InsertAtTop(SpriteVisual_0());
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_1;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return (_cubicBezierEasingFunction_2 == null)
                    ? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_2;
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Path 2+Path 1.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, new CompositionPath(Geometry_0()), HoldThenStepEasingFunction());
                // Frame 29.
                result.InsertKeyFrame(0.966666639F, new CompositionPath(Geometry_3()), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // Shape tree root for layer: Vector 3
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                result.Shapes.Add(ContainerShape_00());
                return result;
            }

            // Masks
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                result.Shapes.Add(ContainerShape_04());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_05());
                shapes.Add(ContainerShape_09());
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Offset = new Vector3(0F, 0F, 0F);
                result.Size = new Vector2(200F, 200F);
                result.Brush = EffectBrush();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsFinalStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - - Layer aggregator
            // Scale
            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsInitialStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - Shape tree root for layer: Vector 3
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), CubicBezierEasingFunction_0());
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), CubicBezierEasingFunction_1());
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), CubicBezierEasingFunction_2());
                return result;
            }

            // - Masks
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), CubicBezierEasingFunction_0());
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), CubicBezierEasingFunction_1());
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), CubicBezierEasingFunction_2());
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_3()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.100000001F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.366666675F, new Vector2(1.12F, 1.12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                // Frame 19.
                result.InsertKeyFrame(0.633333325F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                // Frame 27.
                result.InsertKeyFrame(0.899999976F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                return result;
            }

            internal Business_AnimatedVisual_UAPv11(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_00.StartAnimation("Scale", ScaleVector2Animation_0());
                var controller = _containerShape_00.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_04.StartAnimation("Scale", ScaleVector2Animation_1());
                controller = _containerShape_04.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_05.StartAnimation("Scale", ScaleVector2Animation_2());
                controller = _containerShape_05.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_09.StartAnimation("Scale", ScaleVector2Animation_3());
                controller = _containerShape_09.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _pathGeometry_0.StartAnimation("Path", PathKeyFrameAnimation_0());
                controller = _pathGeometry_0.TryGetAnimationController("Path");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
            }

            public void DestroyAnimations()
            {
                _containerShape_00.StopAnimation("Scale");
                _containerShape_04.StopAnimation("Scale");
                _containerShape_05.StopAnimation("Scale");
                _containerShape_09.StopAnimation("Scale");
                _pathGeometry_0.StopAnimation("Path");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }

        sealed class Business_AnimatedVisual_UAPv8 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 5000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionContainerShape _containerShape_00;
            CompositionContainerShape _containerShape_04;
            CompositionContainerShape _containerShape_05;
            CompositionContainerShape _containerShape_09;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            // - - - - - - - Shape tree root for layer: Vector 3
            // - - - - ShapeGroup: Vector
            // - - Path 2+Path 1
            // - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_0()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_1(), Geometry_2() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - ShapeGroup: Vector
            // - - - Path 2+Path 1
            // - - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-8.97399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-9.72000027F, -0.912F), new Vector2(-10.434F, -0.606999993F), new Vector2(-10.9510002F, -0.0680000037F));
                    builder.AddLine(new Vector2(-11.7320004F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-12.0579996F, 1.08599997F), new Vector2(-12.2790003F, 1.55599999F), new Vector2(-12.1000004F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-11.8330002F, 2.64299989F), new Vector2(-11.2139997F, 3.09899998F), new Vector2(-10.4919996F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-9.52700043F, 3.09899998F), new Vector2(-8.74400043F, 2.28299999F), new Vector2(-8.74400043F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-8.74400043F, 2.28299999F), new Vector2(-7.96099997F, 3.09899998F), new Vector2(-6.99599981F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-6.03100014F, 3.09899998F), new Vector2(-5.24800014F, 2.28299999F), new Vector2(-5.24800014F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-5.24800014F, 2.28299999F), new Vector2(-4.46500015F, 3.09899998F), new Vector2(-3.5F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.53500009F, 3.09899998F), new Vector2(-1.75199997F, 2.28299999F), new Vector2(-1.75199997F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.75199997F, 2.28299999F), new Vector2(-0.968999982F, 3.09899998F), new Vector2(-0.00400000019F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.961000025F, 3.09899998F), new Vector2(1.74399996F, 2.28299999F), new Vector2(1.74399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.74399996F, 2.28299999F), new Vector2(2.52699995F, 3.09899998F), new Vector2(3.4920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.21400023F, 3.09899998F), new Vector2(4.83300018F, 2.64299989F), new Vector2(5.0999999F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(5.27899981F, 1.55599999F), new Vector2(5.05800009F, 1.08599997F), new Vector2(4.73199987F, 0.745999992F));
                    builder.AddLine(new Vector2(3.95099998F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(3.43400002F, -0.606999993F), new Vector2(2.72000003F, -0.912F), new Vector2(1.97399998F, -0.912F));
                    builder.AddLine(new Vector2(-8.97399998F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - ShapeGroup: Vector
            // - - - Path 2+Path 1
            // - - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.47399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-6.21999979F, -0.912F), new Vector2(-6.93400002F, -0.606999993F), new Vector2(-7.45100021F, -0.0680000037F));
                    builder.AddLine(new Vector2(-8.23200035F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-8.55799961F, 1.08599997F), new Vector2(-8.77900028F, 1.55599999F), new Vector2(-8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-8.33300018F, 2.64299989F), new Vector2(-7.71400023F, 3.09899998F), new Vector2(-6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-6.02699995F, 3.09899998F), new Vector2(-5.24399996F, 2.28299999F), new Vector2(-5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-5.24399996F, 2.28299999F), new Vector2(-4.46099997F, 3.09899998F), new Vector2(-3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.5309999F, 3.09899998F), new Vector2(-1.74800003F, 2.28299999F), new Vector2(-1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.74800003F, 2.28299999F), new Vector2(-0.964999974F, 3.09899998F), new Vector2(0F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.964999974F, 3.09899998F), new Vector2(1.74800003F, 2.28299999F), new Vector2(1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.74800003F, 2.28299999F), new Vector2(2.5309999F, 3.09899998F), new Vector2(3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.46099997F, 3.09899998F), new Vector2(5.24399996F, 2.28299999F), new Vector2(5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(5.24399996F, 2.28299999F), new Vector2(6.02699995F, 3.09899998F), new Vector2(6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(7.71400023F, 3.09899998F), new Vector2(8.33300018F, 2.64299989F), new Vector2(8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(8.77900028F, 1.55599999F), new Vector2(8.55799961F, 1.08599997F), new Vector2(8.23200035F, 0.745999992F));
                    builder.AddLine(new Vector2(7.45100021F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(6.93400002F, -0.606999993F), new Vector2(6.21999979F, -0.912F), new Vector2(5.47399998F, -0.912F));
                    builder.AddLine(new Vector2(-5.47399998F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Masks
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-54.7509995F, -9.13500023F));
                    builder.AddCubicBezier(new Vector2(-62.2179985F, -9.13700008F), new Vector2(-69.3619995F, -6.09200001F), new Vector2(-74.5309982F, -0.703000009F));
                    builder.AddLine(new Vector2(-82.3450012F, 7.44299984F));
                    builder.AddCubicBezier(new Vector2(-85.6060028F, 10.8430004F), new Vector2(-87.8150024F, 15.5430002F), new Vector2(-86.0299988F, 19.9029999F));
                    builder.AddCubicBezier(new Vector2(-83.362999F, 26.4169998F), new Vector2(-77.1679993F, 30.9829998F), new Vector2(-69.947998F, 30.9850006F));
                    builder.AddCubicBezier(new Vector2(-60.2910004F, 30.9880009F), new Vector2(-44.6339989F, 30.9920006F), new Vector2(-34.9770012F, 30.9950008F));
                    builder.AddCubicBezier(new Vector2(-25.3199997F, 30.9979992F), new Vector2(-9.66399956F, 31.0020008F), new Vector2(-0.00700000022F, 31.0049992F));
                    builder.AddCubicBezier(new Vector2(9.64999962F, 31.0079994F), new Vector2(25.3059998F, 31.0109997F), new Vector2(34.9630013F, 31.0139999F));
                    builder.AddCubicBezier(new Vector2(44.6199989F, 31.0170002F), new Vector2(60.276001F, 31.0209999F), new Vector2(69.9329987F, 31.0240002F));
                    builder.AddCubicBezier(new Vector2(77.1529999F, 31.0259991F), new Vector2(83.3519974F, 26.4640007F), new Vector2(86.0220032F, 19.9519997F));
                    builder.AddCubicBezier(new Vector2(87.8089981F, 15.5930004F), new Vector2(85.6039963F, 10.8920002F), new Vector2(82.3440018F, 7.48999977F));
                    builder.AddLine(new Vector2(74.5350037F, -0.661000013F));
                    builder.AddCubicBezier(new Vector2(69.3690033F, -6.05299997F), new Vector2(62.2260017F, -9.10200024F), new Vector2(54.7589989F, -9.10400009F));
                    builder.AddLine(new Vector2(-54.7509995F, -9.13500023F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Layer aggregator
            // - - - - ShapeGroup: Vector
            // Path 2
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.09800005F, -3.09899998F));
                    builder.AddCubicBezier(new Vector2(-5.50099993F, -3.09899998F), new Vector2(-5.82700014F, -2.773F), new Vector2(-5.82700014F, -2.36999989F));
                    builder.AddCubicBezier(new Vector2(-5.82700014F, -1.96700001F), new Vector2(-5.50099993F, -1.64100003F), new Vector2(-5.09800005F, -1.64100003F));
                    builder.AddLine(new Vector2(5.09700012F, -1.64100003F));
                    builder.AddCubicBezier(new Vector2(5.5F, -1.64100003F), new Vector2(5.82700014F, -1.96700001F), new Vector2(5.82700014F, -2.36999989F));
                    builder.AddCubicBezier(new Vector2(5.82700014F, -2.773F), new Vector2(5.5F, -3.09899998F), new Vector2(5.09700012F, -3.09899998F));
                    builder.AddLine(new Vector2(-5.09800005F, -3.09899998F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Layer aggregator
            // - - - - ShapeGroup: Union
            // - - Path 1
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.5F, -3.5F));
                    builder.AddCubicBezier(new Vector2(-5.5F, -3.91400003F), new Vector2(-5.83599997F, -4.25F), new Vector2(-6.25F, -4.25F));
                    builder.AddCubicBezier(new Vector2(-6.66400003F, -4.25F), new Vector2(-7F, -3.91400003F), new Vector2(-7F, -3.5F));
                    builder.AddLine(new Vector2(-7F, 2.58699989F));
                    builder.AddCubicBezier(new Vector2(-7F, 3.50500011F), new Vector2(-6.25500011F, 4.25F), new Vector2(-5.33699989F, 4.25F));
                    builder.AddLine(new Vector2(5.33699989F, 4.25F));
                    builder.AddCubicBezier(new Vector2(6.25500011F, 4.25F), new Vector2(7F, 3.50500011F), new Vector2(7F, 2.58699989F));
                    builder.AddLine(new Vector2(7F, -3.5F));
                    builder.AddCubicBezier(new Vector2(7F, -3.91400003F), new Vector2(6.66400003F, -4.25F), new Vector2(6.25F, -4.25F));
                    builder.AddCubicBezier(new Vector2(5.83599997F, -4.25F), new Vector2(5.5F, -3.91400003F), new Vector2(5.5F, -3.5F));
                    builder.AddLine(new Vector2(5.5F, -2.32599998F));
                    builder.AddCubicBezier(new Vector2(5.5F, -1.73199999F), new Vector2(5.01800013F, -1.25F), new Vector2(4.42399979F, -1.25F));
                    builder.AddLine(new Vector2(-4.42399979F, -1.25F));
                    builder.AddCubicBezier(new Vector2(-5.01800013F, -1.25F), new Vector2(-5.5F, -1.73199999F), new Vector2(-5.5F, -2.32599998F));
                    builder.AddLine(new Vector2(-5.5F, -3.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Masks
            CompositionColorBrush ColorBrush_Black()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Vector
            CompositionColorBrush ColorBrush_SemiTransparentBlack()
            {
                return _c.CreateColorBrush(Color.FromArgb(0x33, 0x00, 0x00, 0x00));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostCornflowerBlue_FF6B92FF()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0x6B, 0x92, 0xFF));
            }

            // - - - - - - Layer aggregator
            // - - - ShapeGroup: Union
            // - Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0p35_AlmostMediumOrchid_FFA95DE3()
            {
                return _c.CreateColorGradientStop(0.349999994F, Color.FromArgb(0xFF, 0xA9, 0x5D, 0xE3));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_0p484_AlmostMediumSlateBlue_FF966EFF()
            {
                return _c.CreateColorGradientStop(0.483999997F, Color.FromArgb(0xFF, 0x96, 0x6E, 0xFF));
            }

            // - - - - - - Layer aggregator
            // - - - ShapeGroup: Union
            // - Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostLightCoral_FFF46C7C()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xF4, 0x6C, 0x7C));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 2
            CompositionColorGradientStop GradientStop_1_AlmostOrchid_FFE36ACE()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xE3, 0x6A, 0xCE));
            }

            // Shape tree root for layer: Vector 3
            CompositionContainerShape ContainerShape_00()
            {
                if (_containerShape_00 != null) { return _containerShape_00; }
                var result = _containerShape_00 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(99.9380035F, 50.9949989F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_01());
                return result;
            }

            // - Shape tree root for layer: Vector 3
            CompositionContainerShape ContainerShape_01()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Vector
                result.Shapes.Add(ContainerShape_02());
                return result;
            }

            // - - Shape tree root for layer: Vector 3
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_02()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_03());
                return result;
            }

            // - - - Shape tree root for layer: Vector 3
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_03()
            {
                var result = _c.CreateContainerShape();
                // Path 2+Path 1
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // Masks
            CompositionContainerShape ContainerShape_04()
            {
                if (_containerShape_04 != null) { return _containerShape_04; }
                var result = _containerShape_04 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(99.9380035F, 50.9949989F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_05()
            {
                if (_containerShape_05 != null) { return _containerShape_05; }
                var result = _containerShape_05 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(99.9380035F, 50.9949989F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_06());
                return result;
            }

            // - Layer aggregator
            CompositionContainerShape ContainerShape_06()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Vector
                result.Shapes.Add(ContainerShape_07());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_07()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_08());
                return result;
            }

            // - - - Layer aggregator
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_08()
            {
                var result = _c.CreateContainerShape();
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_09()
            {
                if (_containerShape_09 != null) { return _containerShape_09; }
                var result = _containerShape_09 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(100F, 137.5F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_10());
                return result;
            }

            // - Layer aggregator
            CompositionContainerShape ContainerShape_10()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Union
                result.Shapes.Add(ContainerShape_11());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Union
            CompositionContainerShape ContainerShape_11()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_12());
                return result;
            }

            // - - - Layer aggregator
            // ShapeGroup: Union
            CompositionContainerShape ContainerShape_12()
            {
                var result = _c.CreateContainerShape();
                // Path 1
                result.Shapes.Add(SpriteShape_3());
                return result;
            }

            CompositionEffectBrush EffectBrush()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectFactory EffectFactory()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var result = _c.CreateEffectFactory(compositeEffect);
                return result;
            }

            // - - - - - Shape tree root for layer: Vector 3
            // - - ShapeGroup: Vector
            // Path 2+Path 1
            CompositionLinearGradientBrush LinearGradientBrush_0()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostCornflowerBlue_FF6B92FF());
                colorStops.Add(GradientStop_0p484_AlmostMediumSlateBlue_FF966EFF());
                colorStops.Add(GradientStop_1_AlmostOrchid_FFE36ACE());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(-8.66399956F, 3.09899998F);
                result.EndPoint = new Vector2(8.66399956F, -3.09899998F);
                return result;
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Union
            // Path 1
            CompositionLinearGradientBrush LinearGradientBrush_1()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0p35_AlmostMediumOrchid_FFA95DE3());
                colorStops.Add(GradientStop_1_AlmostLightCoral_FFF46C7C());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(0F, -4.25F);
                result.EndPoint = new Vector2(0F, 4.25F);
                return result;
            }

            // - - - - - Shape tree root for layer: Vector 3
            // - - ShapeGroup: Vector
            // Path 2+Path 1
            // Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - Masks
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Vector
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Union
            // Path 1
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_5()));
            }

            // - - - - Shape tree root for layer: Vector 3
            // - ShapeGroup: Vector
            // Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = LinearGradientBrush_0();
                return result;
            }

            // - Masks
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = ColorBrush_Black();
                return result;
            }

            // - - - - Layer aggregator
            // - ShapeGroup: Vector
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.FillBrush = ColorBrush_SemiTransparentBlack();
                return result;
            }

            // - - - - Layer aggregator
            // - ShapeGroup: Union
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape(PathGeometry_3());
                result.FillBrush = LinearGradientBrush_1();
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(200F, 200F);
                result.SourceOffset = new Vector2(0F, 0F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_2();
                result.SourceSize = new Vector2(200F, 200F);
                result.SourceOffset = new Vector2(0F, 0F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                result.Children.InsertAtTop(ContainerVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                // Shape tree root for layer: Vector 3
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            ContainerVisual ContainerVisual_2()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                children.InsertAtTop(SpriteVisual_0());
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_1;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return (_cubicBezierEasingFunction_2 == null)
                    ? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_2;
            }

            // Shape tree root for layer: Vector 3
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                result.Shapes.Add(ContainerShape_00());
                return result;
            }

            // Masks
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                result.Shapes.Add(ContainerShape_04());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_05());
                shapes.Add(ContainerShape_09());
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Offset = new Vector3(0F, 0F, 0F);
                result.Size = new Vector2(200F, 200F);
                result.Brush = EffectBrush();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsFinalStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - - Layer aggregator
            // Scale
            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsInitialStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - Shape tree root for layer: Vector 3
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), CubicBezierEasingFunction_0());
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), CubicBezierEasingFunction_1());
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), CubicBezierEasingFunction_2());
                return result;
            }

            // - Masks
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), CubicBezierEasingFunction_0());
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), CubicBezierEasingFunction_1());
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), CubicBezierEasingFunction_2());
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_3()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.100000001F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.366666675F, new Vector2(1.12F, 1.12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                // Frame 19.
                result.InsertKeyFrame(0.633333325F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                // Frame 27.
                result.InsertKeyFrame(0.899999976F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                return result;
            }

            internal Business_AnimatedVisual_UAPv8(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_00.StartAnimation("Scale", ScaleVector2Animation_0());
                var controller = _containerShape_00.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_04.StartAnimation("Scale", ScaleVector2Animation_1());
                controller = _containerShape_04.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_05.StartAnimation("Scale", ScaleVector2Animation_2());
                controller = _containerShape_05.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_09.StartAnimation("Scale", ScaleVector2Animation_3());
                controller = _containerShape_09.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
            }

            public void DestroyAnimations()
            {
                _containerShape_00.StopAnimation("Scale");
                _containerShape_04.StopAnimation("Scale");
                _containerShape_05.StopAnimation("Scale");
                _containerShape_09.StopAnimation("Scale");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 8);
            }
        }

        sealed class Business_AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 5000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionContainerShape _containerShape_00;
            CompositionContainerShape _containerShape_04;
            CompositionContainerShape _containerShape_08;
            ContainerVisual _root;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            // - - - - - - - Shape tree root for layer: Vector 3
            // - - - - ShapeGroup: Vector
            // - - Path 2+Path 1
            // - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_0()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_1(), Geometry_2() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - ShapeGroup: Vector
            // - - - Path 2+Path 1
            // - - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-8.97399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-9.72000027F, -0.912F), new Vector2(-10.434F, -0.606999993F), new Vector2(-10.9510002F, -0.0680000037F));
                    builder.AddLine(new Vector2(-11.7320004F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-12.0579996F, 1.08599997F), new Vector2(-12.2790003F, 1.55599999F), new Vector2(-12.1000004F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-11.8330002F, 2.64299989F), new Vector2(-11.2139997F, 3.09899998F), new Vector2(-10.4919996F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-9.52700043F, 3.09899998F), new Vector2(-8.74400043F, 2.28299999F), new Vector2(-8.74400043F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-8.74400043F, 2.28299999F), new Vector2(-7.96099997F, 3.09899998F), new Vector2(-6.99599981F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-6.03100014F, 3.09899998F), new Vector2(-5.24800014F, 2.28299999F), new Vector2(-5.24800014F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-5.24800014F, 2.28299999F), new Vector2(-4.46500015F, 3.09899998F), new Vector2(-3.5F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.53500009F, 3.09899998F), new Vector2(-1.75199997F, 2.28299999F), new Vector2(-1.75199997F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.75199997F, 2.28299999F), new Vector2(-0.968999982F, 3.09899998F), new Vector2(-0.00400000019F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.961000025F, 3.09899998F), new Vector2(1.74399996F, 2.28299999F), new Vector2(1.74399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.74399996F, 2.28299999F), new Vector2(2.52699995F, 3.09899998F), new Vector2(3.4920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.21400023F, 3.09899998F), new Vector2(4.83300018F, 2.64299989F), new Vector2(5.0999999F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(5.27899981F, 1.55599999F), new Vector2(5.05800009F, 1.08599997F), new Vector2(4.73199987F, 0.745999992F));
                    builder.AddLine(new Vector2(3.95099998F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(3.43400002F, -0.606999993F), new Vector2(2.72000003F, -0.912F), new Vector2(1.97399998F, -0.912F));
                    builder.AddLine(new Vector2(-8.97399998F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - - Shape tree root for layer: Vector 3
            // - - - - - ShapeGroup: Vector
            // - - - Path 2+Path 1
            // - - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.47399998F, -0.912F));
                    builder.AddCubicBezier(new Vector2(-6.21999979F, -0.912F), new Vector2(-6.93400002F, -0.606999993F), new Vector2(-7.45100021F, -0.0680000037F));
                    builder.AddLine(new Vector2(-8.23200035F, 0.745999992F));
                    builder.AddCubicBezier(new Vector2(-8.55799961F, 1.08599997F), new Vector2(-8.77900028F, 1.55599999F), new Vector2(-8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(-8.33300018F, 2.64299989F), new Vector2(-7.71400023F, 3.09899998F), new Vector2(-6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-6.02699995F, 3.09899998F), new Vector2(-5.24399996F, 2.28299999F), new Vector2(-5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-5.24399996F, 2.28299999F), new Vector2(-4.46099997F, 3.09899998F), new Vector2(-3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(-2.5309999F, 3.09899998F), new Vector2(-1.74800003F, 2.28299999F), new Vector2(-1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(-1.74800003F, 2.28299999F), new Vector2(-0.964999974F, 3.09899998F), new Vector2(0F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(0.964999974F, 3.09899998F), new Vector2(1.74800003F, 2.28299999F), new Vector2(1.74800003F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(1.74800003F, 2.28299999F), new Vector2(2.5309999F, 3.09899998F), new Vector2(3.49600005F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(4.46099997F, 3.09899998F), new Vector2(5.24399996F, 2.28299999F), new Vector2(5.24399996F, 1.27600002F));
                    builder.AddCubicBezier(new Vector2(5.24399996F, 2.28299999F), new Vector2(6.02699995F, 3.09899998F), new Vector2(6.9920001F, 3.09899998F));
                    builder.AddCubicBezier(new Vector2(7.71400023F, 3.09899998F), new Vector2(8.33300018F, 2.64299989F), new Vector2(8.60000038F, 1.99199998F));
                    builder.AddCubicBezier(new Vector2(8.77900028F, 1.55599999F), new Vector2(8.55799961F, 1.08599997F), new Vector2(8.23200035F, 0.745999992F));
                    builder.AddLine(new Vector2(7.45100021F, -0.0680000037F));
                    builder.AddCubicBezier(new Vector2(6.93400002F, -0.606999993F), new Vector2(6.21999979F, -0.912F), new Vector2(5.47399998F, -0.912F));
                    builder.AddLine(new Vector2(-5.47399998F, -0.912F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Layer aggregator
            // - - - - ShapeGroup: Vector
            // Path 2
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.09800005F, -3.09899998F));
                    builder.AddCubicBezier(new Vector2(-5.50099993F, -3.09899998F), new Vector2(-5.82700014F, -2.773F), new Vector2(-5.82700014F, -2.36999989F));
                    builder.AddCubicBezier(new Vector2(-5.82700014F, -1.96700001F), new Vector2(-5.50099993F, -1.64100003F), new Vector2(-5.09800005F, -1.64100003F));
                    builder.AddLine(new Vector2(5.09700012F, -1.64100003F));
                    builder.AddCubicBezier(new Vector2(5.5F, -1.64100003F), new Vector2(5.82700014F, -1.96700001F), new Vector2(5.82700014F, -2.36999989F));
                    builder.AddCubicBezier(new Vector2(5.82700014F, -2.773F), new Vector2(5.5F, -3.09899998F), new Vector2(5.09700012F, -3.09899998F));
                    builder.AddLine(new Vector2(-5.09800005F, -3.09899998F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Layer aggregator
            // - - - - ShapeGroup: Union
            // - - Path 1
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-5.5F, -3.5F));
                    builder.AddCubicBezier(new Vector2(-5.5F, -3.91400003F), new Vector2(-5.83599997F, -4.25F), new Vector2(-6.25F, -4.25F));
                    builder.AddCubicBezier(new Vector2(-6.66400003F, -4.25F), new Vector2(-7F, -3.91400003F), new Vector2(-7F, -3.5F));
                    builder.AddLine(new Vector2(-7F, 2.58699989F));
                    builder.AddCubicBezier(new Vector2(-7F, 3.50500011F), new Vector2(-6.25500011F, 4.25F), new Vector2(-5.33699989F, 4.25F));
                    builder.AddLine(new Vector2(5.33699989F, 4.25F));
                    builder.AddCubicBezier(new Vector2(6.25500011F, 4.25F), new Vector2(7F, 3.50500011F), new Vector2(7F, 2.58699989F));
                    builder.AddLine(new Vector2(7F, -3.5F));
                    builder.AddCubicBezier(new Vector2(7F, -3.91400003F), new Vector2(6.66400003F, -4.25F), new Vector2(6.25F, -4.25F));
                    builder.AddCubicBezier(new Vector2(5.83599997F, -4.25F), new Vector2(5.5F, -3.91400003F), new Vector2(5.5F, -3.5F));
                    builder.AddLine(new Vector2(5.5F, -2.32599998F));
                    builder.AddCubicBezier(new Vector2(5.5F, -1.73199999F), new Vector2(5.01800013F, -1.25F), new Vector2(4.42399979F, -1.25F));
                    builder.AddLine(new Vector2(-4.42399979F, -1.25F));
                    builder.AddCubicBezier(new Vector2(-5.01800013F, -1.25F), new Vector2(-5.5F, -1.73199999F), new Vector2(-5.5F, -2.32599998F));
                    builder.AddLine(new Vector2(-5.5F, -3.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Vector
            CompositionColorBrush ColorBrush_SemiTransparentBlack()
            {
                return _c.CreateColorBrush(Color.FromArgb(0x33, 0x00, 0x00, 0x00));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostCornflowerBlue_FF6B92FF()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0x6B, 0x92, 0xFF));
            }

            // - - - - - - Layer aggregator
            // - - - ShapeGroup: Union
            // - Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0p35_AlmostMediumOrchid_FFA95DE3()
            {
                return _c.CreateColorGradientStop(0.349999994F, Color.FromArgb(0xFF, 0xA9, 0x5D, 0xE3));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_0p484_AlmostMediumSlateBlue_FF966EFF()
            {
                return _c.CreateColorGradientStop(0.483999997F, Color.FromArgb(0xFF, 0x96, 0x6E, 0xFF));
            }

            // - - - - - - Layer aggregator
            // - - - ShapeGroup: Union
            // - Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostLightCoral_FFF46C7C()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xF4, 0x6C, 0x7C));
            }

            // - - - - - - Shape tree root for layer: Vector 3
            // - - - ShapeGroup: Vector
            // - Path 2+Path 1
            // Stop 2
            CompositionColorGradientStop GradientStop_1_AlmostOrchid_FFE36ACE()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xE3, 0x6A, 0xCE));
            }

            // Shape tree root for layer: Vector 3
            CompositionContainerShape ContainerShape_00()
            {
                if (_containerShape_00 != null) { return _containerShape_00; }
                var result = _containerShape_00 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(99.9380035F, 50.9949989F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_01());
                return result;
            }

            // - Shape tree root for layer: Vector 3
            CompositionContainerShape ContainerShape_01()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Vector
                result.Shapes.Add(ContainerShape_02());
                return result;
            }

            // - - Shape tree root for layer: Vector 3
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_02()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_03());
                return result;
            }

            // - - - Shape tree root for layer: Vector 3
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_03()
            {
                var result = _c.CreateContainerShape();
                // Path 2+Path 1
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_04()
            {
                if (_containerShape_04 != null) { return _containerShape_04; }
                var result = _containerShape_04 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(99.9380035F, 50.9949989F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_05());
                return result;
            }

            // - Layer aggregator
            CompositionContainerShape ContainerShape_05()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Vector
                result.Shapes.Add(ContainerShape_06());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_06()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_07());
                return result;
            }

            // - - - Layer aggregator
            // ShapeGroup: Vector
            CompositionContainerShape ContainerShape_07()
            {
                var result = _c.CreateContainerShape();
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_08()
            {
                if (_containerShape_08 != null) { return _containerShape_08; }
                var result = _containerShape_08 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(100F, 137.5F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_09());
                return result;
            }

            // - Layer aggregator
            CompositionContainerShape ContainerShape_09()
            {
                var result = _c.CreateContainerShape();
                // ShapeGroup: Union
                result.Shapes.Add(ContainerShape_10());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Union
            CompositionContainerShape ContainerShape_10()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.Offset = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_11());
                return result;
            }

            // - - - Layer aggregator
            // ShapeGroup: Union
            CompositionContainerShape ContainerShape_11()
            {
                var result = _c.CreateContainerShape();
                // Path 1
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // - - - - - Shape tree root for layer: Vector 3
            // - - ShapeGroup: Vector
            // Path 2+Path 1
            CompositionLinearGradientBrush LinearGradientBrush_0()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostCornflowerBlue_FF6B92FF());
                colorStops.Add(GradientStop_0p484_AlmostMediumSlateBlue_FF966EFF());
                colorStops.Add(GradientStop_1_AlmostOrchid_FFE36ACE());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(-8.66399956F, 3.09899998F);
                result.EndPoint = new Vector2(8.66399956F, -3.09899998F);
                return result;
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Union
            // Path 1
            CompositionLinearGradientBrush LinearGradientBrush_1()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0p35_AlmostMediumOrchid_FFA95DE3());
                colorStops.Add(GradientStop_1_AlmostLightCoral_FFF46C7C());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(0F, -4.25F);
                result.EndPoint = new Vector2(0F, 4.25F);
                return result;
            }

            // - - - - - Shape tree root for layer: Vector 3
            // - - ShapeGroup: Vector
            // Path 2+Path 1
            // Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Vector
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // - - - - - Layer aggregator
            // - - ShapeGroup: Union
            // Path 1
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
            }

            // - - - - Shape tree root for layer: Vector 3
            // - ShapeGroup: Vector
            // Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = LinearGradientBrush_0();
                return result;
            }

            // - - - - Layer aggregator
            // - ShapeGroup: Vector
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = ColorBrush_SemiTransparentBlack();
                return result;
            }

            // - - - - Layer aggregator
            // - ShapeGroup: Union
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.FillBrush = LinearGradientBrush_1();
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                // Shape tree root for layer: Vector 3
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                children.InsertAtTop(ContainerVisual_0());
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            // Shape tree root for layer: Vector 3
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                result.Shapes.Add(ContainerShape_00());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_04());
                shapes.Add(ContainerShape_08());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsFinalStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - - Layer aggregator
            // Scale
            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsInitialStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - Shape tree root for layer: Vector 3
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.266666681F, new Vector2(1.12F, 1.12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 16.
                result.InsertKeyFrame(0.533333361F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 24.
                result.InsertKeyFrame(0.800000012F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.100000001F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 11.
                result.InsertKeyFrame(0.366666675F, new Vector2(1.12F, 1.12F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                // Frame 19.
                result.InsertKeyFrame(0.633333325F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                // Frame 27.
                result.InsertKeyFrame(0.899999976F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                return result;
            }

            internal Business_AnimatedVisual_UAPv7(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_00.StartAnimation("Scale", ScaleVector2Animation_0());
                var controller = _containerShape_00.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_04.StartAnimation("Scale", ScaleVector2Animation_1());
                controller = _containerShape_04.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_08.StartAnimation("Scale", ScaleVector2Animation_2());
                controller = _containerShape_08.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
            }

            public void DestroyAnimations()
            {
                _containerShape_00.StopAnimation("Scale");
                _containerShape_04.StopAnimation("Scale");
                _containerShape_08.StopAnimation("Scale");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
