//
// Copyright Fela Ameghino 2015-2024
//
// Distributed under the GNU General Public License v3.0. (See accompanying
// file LICENSE or copy at https://www.gnu.org/licenses/gpl-3.0.txt)
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.2-build.19+gd2624816c7
//       
//       Command:
//           LottieGen -GenerateColorBindings -Language CSharp -MinimumUapVersion 8 -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.7 -InputFile Sun.json
//       
//       Input file:
//           Sun.json (22933 bytes created 3:00+01:00 Jan 1 1980)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |           223 |          217 |
// |--------------------------+---------------+--------------|
// | Expression animators     |            54 |           53 |
// | KeyFrame animators       |            37 |           36 |
// | Reference parameters     |            54 |           53 |
// | Expression operations    |             4 |            4 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             1 |            1 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |            18 |           18 |
// | PathKeyFrameAnimations   |             1 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             3 |            3 |
// | ShapeVisuals             |             2 |            2 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             3 |            3 |
// | CompositionSpriteShapes  |            11 |           11 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             1 |            1 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Windows.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        Sun Lottie 2
    // Frame rate:  60 fps
    // Frame count: 36
    // Duration:    600.0 mS
    // ___________________________________________________________
    // | Theme property |   Accessor   | Type  |  Default value  |
    // |________________|______________|_______|_________________|
    // | #000000        | Foreground   | Color | #000000FF White |
    // -----------------------------------------------------------
    public sealed class Sun
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 0.600 seconds.
        internal const long c_durationTicks = 6000000;

        // Theme property: Foreground.
        internal static readonly Color c_themeForeground = Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF);

        CompositionPropertySet _themeProperties;
        Color _themeForeground = c_themeForeground;

        // Theme properties.
        public Color Foreground
        {
            get => _themeForeground;
            set
            {
                _themeForeground = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)_themeForeground));
                }
            }
        }

        static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties == null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)Foreground));
            }
            return _themeProperties;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (Sun_AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                var res =
                    new Sun_AnimatedVisual_UAPv11(
                        compositor,
                        _themeProperties
                        );
                res.CreateAnimations();
                return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 36d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(6000000);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 36d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToChecked_Start", 0.0 },
                { "NormalToChecked_End", 1.0 },
                { "CheckedToNormal_Start", 1.0 },
                { "CheckedToNormal_End", 0.0 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
            if (propertyName == "Foreground")
            {
                _themeForeground = value;
            }
            else
            {
                return;
            }

            if (_themeProperties != null)
            {
                _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
            }
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class Sun_AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 6000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Foreground;
            CompositionContainerShape _containerShape_0;
            CompositionContainerShape _containerShape_1;
            CompositionContainerShape _containerShape_2;
            CompositionPath _path;
            CompositionPathGeometry _pathGeometry_02;
            CompositionPathGeometry _pathGeometry_03;
            CompositionPathGeometry _pathGeometry_04;
            CompositionPathGeometry _pathGeometry_05;
            CompositionPathGeometry _pathGeometry_06;
            CompositionPathGeometry _pathGeometry_07;
            CompositionPathGeometry _pathGeometry_08;
            CompositionPathGeometry _pathGeometry_09;
            CompositionPathGeometry _pathGeometry_10;
            ContainerVisual _containerVisual_0;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            ExpressionAnimation _rootProgress;
            ScalarKeyFrameAnimation _scalarAnimation_0p767_to_0p76;
            ScalarKeyFrameAnimation _scalarAnimation_1_to_0_0;
            ScalarKeyFrameAnimation _scalarAnimation_1_to_0_1;
            ScalarKeyFrameAnimation _scalarAnimation_1p1_to_1;
            ScalarKeyFrameAnimation _tEndScalarAnimation_0p01_to_0p18;
            ScalarKeyFrameAnimation _trimOffsetScalarAnimation_0_to_0p478;
            ScalarKeyFrameAnimation _tStartScalarAnimation_0_to_0p3;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
            {
                var result = _c.CreateBooleanKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue);
                return result;
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // PreComp layer: Sunny
            BooleanKeyFrameAnimation IsVisibleBooleanAnimation()
            {
                // Frame 0.
                var result = CreateBooleanKeyFrameAnimation(0F, false);
                // Frame 14.
                result.InsertKeyFrame(0.388888896F, true);
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Path Scale:4,4
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(2F, 0F));
                    builder.AddCubicBezier(new Vector2(2F, 0.100000001F), new Vector2(1.91999996F, 0.180000007F), new Vector2(1.82000005F, 0.180000007F));
                    builder.AddCubicBezier(new Vector2(0.920000017F, 0.180000007F), new Vector2(0.180000007F, 0.920000017F), new Vector2(0.180000007F, 1.82000005F));
                    builder.AddCubicBezier(new Vector2(0.180000007F, 1.91999996F), new Vector2(0.100000001F, 2F), new Vector2(0F, 2F));
                    builder.AddCubicBezier(new Vector2(-0.100000001F, 2F), new Vector2(-0.180000007F, 1.91999996F), new Vector2(-0.180000007F, 1.82000005F));
                    builder.AddCubicBezier(new Vector2(-0.180000007F, 0.920000017F), new Vector2(-0.920000017F, 0.180000007F), new Vector2(-1.82000005F, 0.180000007F));
                    builder.AddCubicBezier(new Vector2(-1.91999996F, 0.180000007F), new Vector2(-2F, 0.100000001F), new Vector2(-2F, 0F));
                    builder.AddCubicBezier(new Vector2(-2F, -0.100000001F), new Vector2(-1.91999996F, -0.180000007F), new Vector2(-1.82000005F, -0.180000007F));
                    builder.AddCubicBezier(new Vector2(-0.920000017F, -0.180000007F), new Vector2(-0.180000007F, -0.920000017F), new Vector2(-0.180000007F, -1.82000005F));
                    builder.AddCubicBezier(new Vector2(-0.180000007F, -1.91999996F), new Vector2(-0.100000001F, -2F), new Vector2(0F, -2F));
                    builder.AddCubicBezier(new Vector2(0.100000001F, -2F), new Vector2(0.180000007F, -1.91999996F), new Vector2(0.180000007F, -1.82000005F));
                    builder.AddCubicBezier(new Vector2(0.180000007F, -0.920000017F), new Vector2(0.920000017F, -0.180000007F), new Vector2(1.82000005F, -0.180000007F));
                    builder.AddCubicBezier(new Vector2(1.91999996F, -0.180000007F), new Vector2(2F, -0.100000001F), new Vector2(2F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Path Scale:4,4
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(1.5F, 0F));
                    builder.AddCubicBezier(new Vector2(1.5F, 0.0799999982F), new Vector2(1.44000006F, 0.140000001F), new Vector2(1.36000001F, 0.140000001F));
                    builder.AddCubicBezier(new Vector2(0.689999998F, 0.140000001F), new Vector2(0.140000001F, 0.689999998F), new Vector2(0.140000001F, 1.36000001F));
                    builder.AddCubicBezier(new Vector2(0.140000001F, 1.44000006F), new Vector2(0.0799999982F, 1.5F), new Vector2(0F, 1.5F));
                    builder.AddCubicBezier(new Vector2(-0.0700000003F, 1.5F), new Vector2(-0.140000001F, 1.44000006F), new Vector2(-0.140000001F, 1.36000001F));
                    builder.AddCubicBezier(new Vector2(-0.140000001F, 0.689999998F), new Vector2(-0.689999998F, 0.140000001F), new Vector2(-1.36000001F, 0.140000001F));
                    builder.AddCubicBezier(new Vector2(-1.44000006F, 0.140000001F), new Vector2(-1.5F, 0.0799999982F), new Vector2(-1.5F, 0F));
                    builder.AddCubicBezier(new Vector2(-1.5F, -0.0799999982F), new Vector2(-1.44000006F, -0.140000001F), new Vector2(-1.36000001F, -0.140000001F));
                    builder.AddCubicBezier(new Vector2(-0.689999998F, -0.140000001F), new Vector2(-0.140000001F, -0.689999998F), new Vector2(-0.140000001F, -1.36000001F));
                    builder.AddCubicBezier(new Vector2(-0.140000001F, -1.44000006F), new Vector2(-0.0700000003F, -1.5F), new Vector2(0F, -1.5F));
                    builder.AddCubicBezier(new Vector2(0.0799999982F, -1.5F), new Vector2(0.140000001F, -1.44000006F), new Vector2(0.140000001F, -1.36000001F));
                    builder.AddCubicBezier(new Vector2(0.140000001F, -0.689999998F), new Vector2(0.689999998F, -0.140000001F), new Vector2(1.36000001F, -0.140000001F));
                    builder.AddCubicBezier(new Vector2(1.44000006F, -0.140000001F), new Vector2(1.5F, -0.0799999982F), new Vector2(1.5F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - ShapeGroup: Path Scale:4.47223,4.36847, Offset:<0.25, 0>
            // - Path
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(4.52600002F, -9.18799973F));
                    builder.AddCubicBezier(new Vector2(4.11600018F, -9.47799969F), new Vector2(3.73600006F, -9.0880003F), new Vector2(3.73600006F, -8.73799992F));
                    builder.AddCubicBezier(new Vector2(3.73600006F, -7.24800014F), new Vector2(4.95599985F, -2.46799994F), new Vector2(0.69599998F, 1.18200004F));
                    builder.AddCubicBezier(new Vector2(-3.56399989F, 4.83199978F), new Vector2(-7.79400015F, 3.64199996F), new Vector2(-9.5340004F, 2.96199989F));
                    builder.AddCubicBezier(new Vector2(-9.99400043F, 2.78200006F), new Vector2(-10.3439999F, 3.31200004F), new Vector2(-10.1540003F, 3.66199994F));
                    builder.AddCubicBezier(new Vector2(-8.22399998F, 7.41200018F), new Vector2(-5.13399982F, 9.29199982F), new Vector2(-0.853999972F, 9.29199982F));
                    builder.AddCubicBezier(new Vector2(4.34600019F, 9.29199982F), new Vector2(9.03600025F, 4.65199995F), new Vector2(9.03600025F, -0.677999973F));
                    builder.AddCubicBezier(new Vector2(9.03600025F, -4.16800022F), new Vector2(7.43599987F, -7.13800001F), new Vector2(4.52600002F, -9.18799973F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - ShapeGroup: Path Scale:4.47223,4.36847, Offset:<0.25, 0>
            // - Path
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(2.58599997F, -4.58500004F));
                    builder.AddCubicBezier(new Vector2(2.32599998F, -4.7750001F), new Vector2(1.63600004F, -5.15500021F), new Vector2(1.18599999F, -5.32499981F));
                    builder.AddCubicBezier(new Vector2(-0.493999988F, -5.9749999F), new Vector2(-3.32399988F, -6.10500002F), new Vector2(-5.65399981F, -3.96499991F));
                    builder.AddCubicBezier(new Vector2(-7.97399998F, -1.82500005F), new Vector2(-7.69399977F, 1.245F), new Vector2(-7.48400021F, 2.18499994F));
                    builder.AddCubicBezier(new Vector2(-7.39400005F, 2.625F), new Vector2(-7.09399986F, 3.38499999F), new Vector2(-6.97399998F, 3.61500001F));
                    builder.AddCubicBezier(new Vector2(-5.72399998F, 6.03499985F), new Vector2(-3.5539999F, 7.24499989F), new Vector2(-0.963999987F, 7.24499989F));
                    builder.AddCubicBezier(new Vector2(2.39599991F, 7.24499989F), new Vector2(5.35599995F, 4.19500017F), new Vector2(5.35599995F, 0.754999995F));
                    builder.AddCubicBezier(new Vector2(5.35599995F, -1.17499995F), new Vector2(4.46600008F, -3.2650001F), new Vector2(2.58599997F, -4.58500004F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, 2.5F));
                    builder.AddLine(new Vector2(0F, -2.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground()
            {
                if (_themeColor_Foreground != null) { return _themeColor_Foreground; }
                var result = _themeColor_Foreground = _c.CreateColorBrush();
                BindProperty(_themeColor_Foreground, "Color", "ColorRGB(_theme.Foreground.W,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_0()
            {
                if (_containerShape_0 != null) { return _containerShape_0; }
                var result = _containerShape_0 = _c.CreateContainerShape();
                result.Offset = new Vector2(25.875F, 28.625F);
                // ShapeGroup: Path Scale:4,4
                result.Shapes.Add(SpriteShape_00());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_1()
            {
                if (_containerShape_1 != null) { return _containerShape_1; }
                var result = _containerShape_1 = _c.CreateContainerShape();
                result.Offset = new Vector2(43.875F, 40.625F);
                // ShapeGroup: Path Scale:4,4
                result.Shapes.Add(SpriteShape_01());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_2()
            {
                if (_containerShape_2 != null) { return _containerShape_2; }
                var result = _containerShape_2 = _c.CreateContainerShape();
                result.Offset = new Vector2(53.4480019F, 53.382F);
                // ShapeGroup: Path Scale:4.47223,4.36847, Offset:<0.25, 0>
                result.Shapes.Add(SpriteShape_02());
                return result;
            }

            CompositionPath Path()
            {
                if (_path != null) { return _path; }
                var result = _path = new CompositionPath(Geometry_4());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Path Scale:4,4
            CompositionPathGeometry PathGeometry_00()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - Layer aggregator
            // ShapeGroup: Path Scale:4,4
            CompositionPathGeometry PathGeometry_01()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - - Layer aggregator
            // ShapeGroup: Path Scale:4.47223,4.36847, Offset:<0.25, 0>
            CompositionPathGeometry PathGeometry_02()
            {
                if (_pathGeometry_02 != null) { return _pathGeometry_02; }
                var result = _pathGeometry_02 = _c.CreatePathGeometry();
                return result;
            }

            CompositionPathGeometry PathGeometry_03()
            {
                if (_pathGeometry_03 != null) { return _pathGeometry_03; }
                var result = _pathGeometry_03 = _c.CreatePathGeometry(Path());
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0.00999999978F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(_pathGeometry_03, "TrimStart", "Min(my.TStart,my.TEnd)", "my", _pathGeometry_03);
                BindProperty(_pathGeometry_03, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", _pathGeometry_03);
                return result;
            }

            CompositionPathGeometry PathGeometry_04()
            {
                if (_pathGeometry_04 != null) { return _pathGeometry_04; }
                var result = _pathGeometry_04 = _c.CreatePathGeometry(Path());
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0.00999999978F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(_pathGeometry_04, "TrimStart", "Min(my.TStart,my.TEnd)", "my", _pathGeometry_04);
                BindProperty(_pathGeometry_04, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", _pathGeometry_04);
                return result;
            }

            CompositionPathGeometry PathGeometry_05()
            {
                if (_pathGeometry_05 != null) { return _pathGeometry_05; }
                var result = _pathGeometry_05 = _c.CreatePathGeometry(Path());
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0.00999999978F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(_pathGeometry_05, "TrimStart", "Min(my.TStart,my.TEnd)", "my", _pathGeometry_05);
                BindProperty(_pathGeometry_05, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", _pathGeometry_05);
                return result;
            }

            CompositionPathGeometry PathGeometry_06()
            {
                if (_pathGeometry_06 != null) { return _pathGeometry_06; }
                var result = _pathGeometry_06 = _c.CreatePathGeometry(Path());
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0.00999999978F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(_pathGeometry_06, "TrimStart", "Min(my.TStart,my.TEnd)", "my", _pathGeometry_06);
                BindProperty(_pathGeometry_06, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", _pathGeometry_06);
                return result;
            }

            CompositionPathGeometry PathGeometry_07()
            {
                if (_pathGeometry_07 != null) { return _pathGeometry_07; }
                var result = _pathGeometry_07 = _c.CreatePathGeometry(Path());
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0.00999999978F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(_pathGeometry_07, "TrimStart", "Min(my.TStart,my.TEnd)", "my", _pathGeometry_07);
                BindProperty(_pathGeometry_07, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", _pathGeometry_07);
                return result;
            }

            CompositionPathGeometry PathGeometry_08()
            {
                if (_pathGeometry_08 != null) { return _pathGeometry_08; }
                var result = _pathGeometry_08 = _c.CreatePathGeometry(Path());
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0.00999999978F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(_pathGeometry_08, "TrimStart", "Min(my.TStart,my.TEnd)", "my", _pathGeometry_08);
                BindProperty(_pathGeometry_08, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", _pathGeometry_08);
                return result;
            }

            CompositionPathGeometry PathGeometry_09()
            {
                if (_pathGeometry_09 != null) { return _pathGeometry_09; }
                var result = _pathGeometry_09 = _c.CreatePathGeometry(Path());
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0.00999999978F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(_pathGeometry_09, "TrimStart", "Min(my.TStart,my.TEnd)", "my", _pathGeometry_09);
                BindProperty(_pathGeometry_09, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", _pathGeometry_09);
                return result;
            }

            CompositionPathGeometry PathGeometry_10()
            {
                if (_pathGeometry_10 != null) { return _pathGeometry_10; }
                var result = _pathGeometry_10 = _c.CreatePathGeometry(Path());
                var propertySet = result.Properties;
                propertySet.InsertScalar("TEnd", 0.00999999978F);
                propertySet.InsertScalar("TStart", 0F);
                BindProperty(_pathGeometry_10, "TrimStart", "Min(my.TStart,my.TEnd)", "my", _pathGeometry_10);
                BindProperty(_pathGeometry_10, "TrimEnd", "Max(my.TStart,my.TEnd)", "my", _pathGeometry_10);
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_00()
            {
                // Scale:<4, 4>
                var geometry = PathGeometry_00();
                var result = CreateSpriteShape(geometry, new Matrix3x2(4F, 0F, 0F, 4F, 0F, 0F), ThemeColor_Foreground()); ;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_01()
            {
                // Scale:<4, 4>
                var geometry = PathGeometry_01();
                var result = CreateSpriteShape(geometry, new Matrix3x2(4F, 0F, 0F, 4F, 0F, 0F), ThemeColor_Foreground()); ;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_02()
            {
                // Offset:<0.25, 0>, Rotation:-0.007549698971537098 degrees, Scale:<4.47223, 4.36847>
                var result = CreateSpriteShape(PathGeometry_02(), new Matrix3x2(4.47222996F, 0F, 0F, 4.36847019F, 0.25F, 0F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.39999998F;
                return result;
            }

            // - - PreComp layer: Sunny
            // - Opacity for layer: Sunny
            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_03()
            {
                // Offset:<68, 34.5>, Scale:<4, 4>
                var result = CreateSpriteShape(PathGeometry_03(), new Matrix3x2(4F, 0F, 0F, 4F, 68F, 34.5F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // - - PreComp layer: Sunny
            // - Opacity for layer: Sunny
            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_04()
            {
                // Offset:<100.625, 68.5>, Rotation:90 degrees, Scale:<4, 4>
                var result = CreateSpriteShape(PathGeometry_04(), new Matrix3x2(0F, 4F, -4F, 0F, 100.625F, 68.5F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // - - PreComp layer: Sunny
            // - Opacity for layer: Sunny
            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_05()
            {
                // Offset:<43.688, 44.25>, Rotation:-45.00000581024828 degrees, Scale:<4, 4>
                var result = CreateSpriteShape(PathGeometry_05(), new Matrix3x2(2.82842684F, -2.82842731F, 2.82842731F, 2.82842684F, 43.6879997F, 44.25F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // - - PreComp layer: Sunny
            // - Opacity for layer: Sunny
            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_06()
            {
                // Offset:<92.375, 44.125>, Rotation:-134.9999941897517 degrees, Scale:<4, -4>
                var result = CreateSpriteShape(PathGeometry_06(), new Matrix3x2(-2.82842684F, -2.82842731F, -2.82842731F, 2.82842684F, 92.375F, 44.125F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // - - PreComp layer: Sunny
            // - Opacity for layer: Sunny
            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_07()
            {
                // Offset:<92.437, 92.956>, Rotation:135.0000038490977 degrees, Scale:<4, 4>
                var result = CreateSpriteShape(PathGeometry_07(), new Matrix3x2(-2.82842731F, 2.82842684F, -2.82842684F, -2.82842731F, 92.4369965F, 92.9560013F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // - - PreComp layer: Sunny
            // - Opacity for layer: Sunny
            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_08()
            {
                // Offset:<44.303, 92.581>, Rotation:44.99999615090229 degrees, Scale:<4, -4>
                var result = CreateSpriteShape(PathGeometry_08(), new Matrix3x2(2.82842731F, 2.82842684F, 2.82842684F, -2.82842731F, 44.3030014F, 92.5810013F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // - - PreComp layer: Sunny
            // - Opacity for layer: Sunny
            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_09()
            {
                // Offset:<33.625, 68.5>, Rotation:90 degrees, Scale:<4, -4>
                var result = CreateSpriteShape(PathGeometry_09(), new Matrix3x2(0F, 4F, 4F, 0F, 33.625F, 68.5F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // - - PreComp layer: Sunny
            // - Opacity for layer: Sunny
            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_10()
            {
                // Offset:<68, 102.75>, Scale:<4, -4>
                var result = CreateSpriteShape(PathGeometry_10(), new Matrix3x2(4F, 0F, 0F, -4F, 68F, 102.75F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // PreComp layer: Sunny
            ContainerVisual ContainerVisual_0()
            {
                if (_containerVisual_0 != null) { return _containerVisual_0; }
                var result = _containerVisual_0 = _c.CreateContainerVisual();
                result.CenterPoint = new Vector3(68F, 68F, 0F);
                result.IsVisible = false;
                result.Offset = new Vector3(-18F, -18F, 0F);
                // Opacity for layer: Sunny
                result.Children.InsertAtTop(ContainerVisual_1());
                return result;
            }

            // PreComp layer: Sunny
            // Transforms for Sunny
            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.Clip = InsetClip_0();
                result.Size = new Vector2(136F, 136F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_0());
                // PreComp layer: Sunny
                children.InsertAtTop(ContainerVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.606999993F, 0F), new Vector2(0.839999974F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_1;
            }

            ExpressionAnimation RootProgress()
            {
                if (_rootProgress != null) { return _rootProgress; }
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - PreComp layer: Sunny
            // Opacity for layer: Sunny
            InsetClip InsetClip_0()
            {
                var result = _c.CreateInsetClip();
                return result;
            }

            // - - - Layer aggregator
            // - ShapeGroup: Path Scale:4.47223,4.36847, Offset:<0.25, 0>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, new CompositionPath(Geometry_2()), HoldThenStepEasingFunction());
                // Frame 18.
                result.InsertKeyFrame(0.5F, new CompositionPath(Geometry_3()), _c.CreateCubicBezierEasingFunction(new Vector2(0.856999993F, 0F), new Vector2(0.735000014F, 1F)));
                return result;
            }

            // PreComp layer: Sunny
            // Layer opacity animation
            ScalarKeyFrameAnimation OpacityScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.388888896F, 0F, HoldThenStepEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.583333313F, 1F, CubicBezierEasingFunction_1());
                return result;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_80()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.555555582F, 80F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // PreComp layer: Sunny
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_m50_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, -50F, StepThenHoldEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.333333343F, -50F, HoldThenStepEasingFunction());
                // Frame 36.
                result.InsertKeyFrame(1F, 0F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.316000015F, 1F)));
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_0p767_to_0p76()
            {
                // Frame 0.
                if (_scalarAnimation_0p767_to_0p76 != null) { return _scalarAnimation_0p767_to_0p76; }
                var result = _scalarAnimation_0p767_to_0p76 = CreateScalarKeyFrameAnimation(0F, 0.766659975F, StepThenHoldEasingFunction());
                // Frame 1.
                result.InsertKeyFrame(0.027777778F, 0.766659975F, HoldThenStepEasingFunction());
                // Frame 18.
                result.InsertKeyFrame(0.5F, 0.709999979F, _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.666999996F, 1F)));
                // Frame 35.
                result.InsertKeyFrame(0.972222209F, 0.75999999F, _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.833000004F, 1F)));
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_1_to_0_0()
            {
                // Frame 0.
                if (_scalarAnimation_1_to_0_0 != null) { return _scalarAnimation_1_to_0_0; }
                var result = _scalarAnimation_1_to_0_0 = CreateScalarKeyFrameAnimation(0F, 1F, HoldThenStepEasingFunction());
                // Frame 5.
                result.InsertKeyFrame(0.138888896F, 1.20000005F, CubicBezierEasingFunction_0());
                // Frame 12.
                result.InsertKeyFrame(0.333333343F, 0F, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.5F, 1F)));
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_1_to_0_1()
            {
                // Frame 0.
                if (_scalarAnimation_1_to_0_1 != null) { return _scalarAnimation_1_to_0_1; }
                var result = _scalarAnimation_1_to_0_1 = CreateScalarKeyFrameAnimation(0F, 1F, StepThenHoldEasingFunction());
                // Frame 1.
                result.InsertKeyFrame(0.027777778F, 1F, HoldThenStepEasingFunction());
                // Frame 6.
                result.InsertKeyFrame(0.166666672F, 1.20000005F, CubicBezierEasingFunction_0());
                // Frame 13.
                result.InsertKeyFrame(0.361111104F, 0F, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.513999999F, 1F)));
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_1p1_to_1()
            {
                // Frame 0.
                if (_scalarAnimation_1p1_to_1 != null) { return _scalarAnimation_1p1_to_1; }
                var result = _scalarAnimation_1p1_to_1 = CreateScalarKeyFrameAnimation(0F, 1.10000002F, StepThenHoldEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.333333343F, 1.10000002F, HoldThenStepEasingFunction());
                // Frame 23.
                result.InsertKeyFrame(0.638888896F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.215000004F, 0F), new Vector2(0.379999995F, 1F)));
                return result;
            }

            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0p01_to_0p18()
            {
                // Frame 0.
                if (_tEndScalarAnimation_0p01_to_0p18 != null) { return _tEndScalarAnimation_0p01_to_0p18; }
                var result = _tEndScalarAnimation_0p01_to_0p18 = CreateScalarKeyFrameAnimation(0F, 0.00999999978F, StepThenHoldEasingFunction());
                // Frame 16.5.
                result.InsertKeyFrame(0.458333343F, 0.00999999978F, HoldThenStepEasingFunction());
                // Frame 25.5.
                result.InsertKeyFrame(0.708333313F, 0F, CubicBezierEasingFunction_1());
                // Frame 35.5.
                result.InsertKeyFrame(0.986111104F, 0.180000007F, CubicBezierEasingFunction_1());
                return result;
            }

            // TrimOffset
            ScalarKeyFrameAnimation TrimOffsetScalarAnimation_0_to_0p478()
            {
                // Frame 0.
                if (_trimOffsetScalarAnimation_0_to_0p478 != null) { return _trimOffsetScalarAnimation_0_to_0p478; }
                var result = _trimOffsetScalarAnimation_0_to_0p478 = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 16.5.
                result.InsertKeyFrame(0.458333343F, 0F, HoldThenStepEasingFunction());
                // Frame 25.5.
                result.InsertKeyFrame(0.708333313F, 0.333333343F, CubicBezierEasingFunction_1());
                // Frame 35.5.
                result.InsertKeyFrame(0.986111104F, 0.477777779F, CubicBezierEasingFunction_1());
                return result;
            }

            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_0p3()
            {
                // Frame 0.
                if (_tStartScalarAnimation_0_to_0p3 != null) { return _tStartScalarAnimation_0_to_0p3; }
                var result = _tStartScalarAnimation_0_to_0p3 = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 16.5.
                result.InsertKeyFrame(0.458333343F, 0F, HoldThenStepEasingFunction());
                // Frame 25.5.
                result.InsertKeyFrame(0.708333313F, 0.300000012F, CubicBezierEasingFunction_1());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(100F, 100F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_0());
                shapes.Add(ContainerShape_1());
                shapes.Add(ContainerShape_2());
                return result;
            }

            // - PreComp layer: Sunny
            // Opacity for layer: Sunny
            // Layer aggregator
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(136F, 136F);
                var shapes = result.Shapes;
                // Layer: Path 14
                shapes.Add(SpriteShape_03());
                // Layer: Path 14
                shapes.Add(SpriteShape_04());
                // Layer: Path 14
                shapes.Add(SpriteShape_05());
                // Layer: Path 14
                shapes.Add(SpriteShape_06());
                // Layer: Path 14
                shapes.Add(SpriteShape_07());
                // Layer: Path 14
                shapes.Add(SpriteShape_08());
                // Layer: Path 14
                shapes.Add(SpriteShape_09());
                // Layer: Path 14
                shapes.Add(SpriteShape_10());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            internal Sun_AnimatedVisual_UAPv11(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(100F, 100F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                StartProgressBoundAnimation(_containerShape_0, "Scale.X", ScalarAnimation_1_to_0_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_0, "Scale.Y", ScalarAnimation_1_to_0_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "Scale.X", ScalarAnimation_1_to_0_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "Scale.Y", ScalarAnimation_1_to_0_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_2, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_80(), RootProgress());
                StartProgressBoundAnimation(_containerShape_2, "Scale.X", ScalarAnimation_0p767_to_0p76(), RootProgress());
                StartProgressBoundAnimation(_containerShape_2, "Scale.Y", ScalarAnimation_0p767_to_0p76(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_02, "Path", PathKeyFrameAnimation_0(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_03, "TStart", TStartScalarAnimation_0_to_0p3(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_03, "TEnd", TEndScalarAnimation_0p01_to_0p18(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_03, "TrimOffset", TrimOffsetScalarAnimation_0_to_0p478(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_04, "TStart", TStartScalarAnimation_0_to_0p3(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_04, "TEnd", TEndScalarAnimation_0p01_to_0p18(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_04, "TrimOffset", TrimOffsetScalarAnimation_0_to_0p478(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_05, "TStart", TStartScalarAnimation_0_to_0p3(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_05, "TEnd", TEndScalarAnimation_0p01_to_0p18(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_05, "TrimOffset", TrimOffsetScalarAnimation_0_to_0p478(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_06, "TStart", TStartScalarAnimation_0_to_0p3(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_06, "TEnd", TEndScalarAnimation_0p01_to_0p18(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_06, "TrimOffset", TrimOffsetScalarAnimation_0_to_0p478(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_07, "TStart", TStartScalarAnimation_0_to_0p3(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_07, "TEnd", TEndScalarAnimation_0p01_to_0p18(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_07, "TrimOffset", TrimOffsetScalarAnimation_0_to_0p478(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_08, "TStart", TStartScalarAnimation_0_to_0p3(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_08, "TEnd", TEndScalarAnimation_0p01_to_0p18(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_08, "TrimOffset", TrimOffsetScalarAnimation_0_to_0p478(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_09, "TStart", TStartScalarAnimation_0_to_0p3(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_09, "TEnd", TEndScalarAnimation_0p01_to_0p18(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_09, "TrimOffset", TrimOffsetScalarAnimation_0_to_0p478(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_10, "TStart", TStartScalarAnimation_0_to_0p3(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_10, "TEnd", TEndScalarAnimation_0p01_to_0p18(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_10, "TrimOffset", TrimOffsetScalarAnimation_0_to_0p478(), RootProgress());
                StartProgressBoundAnimation(_containerVisual_0, "Opacity", OpacityScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_containerVisual_0, "IsVisible", IsVisibleBooleanAnimation(), RootProgress());
                StartProgressBoundAnimation(_containerVisual_0, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_m50_to_0(), RootProgress());
                StartProgressBoundAnimation(_containerVisual_0, "Scale.X", ScalarAnimation_1p1_to_1(), RootProgress());
                StartProgressBoundAnimation(_containerVisual_0, "Scale.Y", ScalarAnimation_1p1_to_1(), RootProgress());
            }

            public void DestroyAnimations()
            {
                _containerShape_0.StopAnimation("Scale.X");
                _containerShape_0.StopAnimation("Scale.Y");
                _containerShape_1.StopAnimation("Scale.X");
                _containerShape_1.StopAnimation("Scale.Y");
                _containerShape_2.StopAnimation("RotationAngleInDegrees");
                _containerShape_2.StopAnimation("Scale.X");
                _containerShape_2.StopAnimation("Scale.Y");
                _pathGeometry_02.StopAnimation("Path");
                _pathGeometry_03.StopAnimation("TStart");
                _pathGeometry_03.StopAnimation("TEnd");
                _pathGeometry_03.StopAnimation("TrimOffset");
                _pathGeometry_04.StopAnimation("TStart");
                _pathGeometry_04.StopAnimation("TEnd");
                _pathGeometry_04.StopAnimation("TrimOffset");
                _pathGeometry_05.StopAnimation("TStart");
                _pathGeometry_05.StopAnimation("TEnd");
                _pathGeometry_05.StopAnimation("TrimOffset");
                _pathGeometry_06.StopAnimation("TStart");
                _pathGeometry_06.StopAnimation("TEnd");
                _pathGeometry_06.StopAnimation("TrimOffset");
                _pathGeometry_07.StopAnimation("TStart");
                _pathGeometry_07.StopAnimation("TEnd");
                _pathGeometry_07.StopAnimation("TrimOffset");
                _pathGeometry_08.StopAnimation("TStart");
                _pathGeometry_08.StopAnimation("TEnd");
                _pathGeometry_08.StopAnimation("TrimOffset");
                _pathGeometry_09.StopAnimation("TStart");
                _pathGeometry_09.StopAnimation("TEnd");
                _pathGeometry_09.StopAnimation("TrimOffset");
                _pathGeometry_10.StopAnimation("TStart");
                _pathGeometry_10.StopAnimation("TEnd");
                _pathGeometry_10.StopAnimation("TrimOffset");
                _containerVisual_0.StopAnimation("Opacity");
                _containerVisual_0.StopAnimation("IsVisible");
                _containerVisual_0.StopAnimation("RotationAngleInDegrees");
                _containerVisual_0.StopAnimation("Scale.X");
                _containerVisual_0.StopAnimation("Scale.Y");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }
    }
}
