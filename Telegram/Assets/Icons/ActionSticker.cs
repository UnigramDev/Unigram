//
// Copyright Fela Ameghino 2015-2024
//
// Distributed under the GNU General Public License v3.0. (See accompanying
// file LICENSE or copy at https://www.gnu.org/licenses/gpl-3.0.txt)
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.0+ge1fa92580f
//       
//       Command:
//           LottieGen -Language CSharp -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.7 -InputFile ActionSticker.json
//       
//       Input file:
//           ActionSticker.json (5522 bytes created 16:38+01:00 Dec 22 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |            32 |           14 |
// |--------------------------+---------------+--------------|
// | Expression animators     |             2 |            0 |
// | KeyFrame animators       |             2 |            0 |
// | Reference parameters     |             2 |            0 |
// | Expression operations    |             0 |            0 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             - |            - |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             1 |            - |
// | PathKeyFrameAnimations   |             2 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             1 |            1 |
// | ShapeVisuals             |             1 |            1 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             - |            - |
// | CompositionSpriteShapes  |             2 |            2 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             1 |            1 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Windows.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        u_choosing_a_sticker
    // Frame rate:  60 fps
    // Frame count: 120
    // Duration:    2000.0 mS
    public sealed class ActionSticker
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 2.000 seconds.
        internal const long c_durationTicks = 20000000;
        internal readonly Color m_foreground;

        public ActionSticker(Color foreground)
        {
            m_foreground = foreground;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (ActionSticker_AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                return
                    new ActionSticker_AnimatedVisual_UAPv11(
                        compositor,
                        m_foreground
                        );
            }

            if (ActionSticker_AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                return
                    new ActionSticker_AnimatedVisual_UAPv7(
                        compositor,
                        m_foreground
                        );
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 120d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 120d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class ActionSticker_AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 20000000;
            readonly Compositor _c;
            readonly Color _f;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_Black;
            CompositionPath _path_0;
            CompositionPath _path_1;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            CanvasGeometry Geometry_00()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_01(), Geometry_02() },
                    CanvasFilledRegionDetermination.Alternate);
                return result;
            }

            CanvasGeometry Geometry_01()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(80F, 50F));
                    builder.AddCubicBezier(new Vector2(96.5690002F, 50F), new Vector2(110F, 27.6140003F), new Vector2(110F, 0F));
                    builder.AddCubicBezier(new Vector2(110F, -27.6140003F), new Vector2(96.5690002F, -50F), new Vector2(80F, -50F));
                    builder.AddCubicBezier(new Vector2(63.4309998F, -50F), new Vector2(50F, -27.6140003F), new Vector2(50F, 0F));
                    builder.AddCubicBezier(new Vector2(50F, 27.6140003F), new Vector2(63.4309998F, 50F), new Vector2(80F, 50F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_02()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, 50F));
                    builder.AddCubicBezier(new Vector2(16.5690002F, 50F), new Vector2(30F, 27.6140003F), new Vector2(30F, 0F));
                    builder.AddCubicBezier(new Vector2(30F, -27.6140003F), new Vector2(16.5690002F, -50F), new Vector2(0F, -50F));
                    builder.AddCubicBezier(new Vector2(-16.5690002F, -50F), new Vector2(-30F, -27.6140003F), new Vector2(-30F, 0F));
                    builder.AddCubicBezier(new Vector2(-30F, 27.6140003F), new Vector2(-16.5690002F, 50F), new Vector2(0F, 50F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - -  Offset:<-3.8320007, 0>
            // - - Path 2+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_03()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_04(), Geometry_05() },
                    CanvasFilledRegionDetermination.Alternate);
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - -  Offset:<-3.8320007, 0>
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_04()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(60F, 55F));
                    builder.AddCubicBezier(new Vector2(76.5690002F, 55F), new Vector2(90F, 30.3759995F), new Vector2(90F, 0F));
                    builder.AddCubicBezier(new Vector2(90F, -30.3759995F), new Vector2(76.5690002F, -55F), new Vector2(60F, -55F));
                    builder.AddCubicBezier(new Vector2(43.4309998F, -55F), new Vector2(30F, -30.3759995F), new Vector2(30F, 0F));
                    builder.AddCubicBezier(new Vector2(30F, 30.3759995F), new Vector2(43.4309998F, 55F), new Vector2(60F, 55F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - -  Offset:<-3.8320007, 0>
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_05()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-20F, 55F));
                    builder.AddCubicBezier(new Vector2(-3.43099999F, 55F), new Vector2(10F, 30.3759995F), new Vector2(10F, 0F));
                    builder.AddCubicBezier(new Vector2(10F, -30.3759995F), new Vector2(-3.43099999F, -55F), new Vector2(-20F, -55F));
                    builder.AddCubicBezier(new Vector2(-36.5690002F, -55F), new Vector2(-50F, -30.3759995F), new Vector2(-50F, 0F));
                    builder.AddCubicBezier(new Vector2(-50F, 30.3759995F), new Vector2(-36.5690002F, 55F), new Vector2(-20F, 55F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - -  Offset:<-3.8320007, 0>
            // - - Path 2+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_06()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_07(), Geometry_08() },
                    CanvasFilledRegionDetermination.Alternate);
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - -  Offset:<-3.8320007, 0>
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_07()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(100F, 55F));
                    builder.AddCubicBezier(new Vector2(116.569F, 55F), new Vector2(130F, 30.3759995F), new Vector2(130F, 0F));
                    builder.AddCubicBezier(new Vector2(130F, -30.3759995F), new Vector2(116.569F, -55F), new Vector2(100F, -55F));
                    builder.AddCubicBezier(new Vector2(83.4309998F, -55F), new Vector2(70F, -30.3759995F), new Vector2(70F, 0F));
                    builder.AddCubicBezier(new Vector2(70F, 30.3759995F), new Vector2(83.4309998F, 55F), new Vector2(100F, 55F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - -  Offset:<-3.8320007, 0>
            // - - - Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_08()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(20F, 55F));
                    builder.AddCubicBezier(new Vector2(36.5690002F, 55F), new Vector2(50F, 30.3759995F), new Vector2(50F, 0F));
                    builder.AddCubicBezier(new Vector2(50F, -30.3759995F), new Vector2(36.5690002F, -55F), new Vector2(20F, -55F));
                    builder.AddCubicBezier(new Vector2(3.43099999F, -55F), new Vector2(-10F, -30.3759995F), new Vector2(-10F, 0F));
                    builder.AddCubicBezier(new Vector2(-10F, 30.3759995F), new Vector2(3.43099999F, 55F), new Vector2(20F, 55F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_09()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_10(), Geometry_11() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            CanvasGeometry Geometry_10()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(40F, 30F));
                    builder.AddCubicBezier(new Vector2(51.0460014F, 30F), new Vector2(60F, 21.0459995F), new Vector2(60F, 10F));
                    builder.AddCubicBezier(new Vector2(60F, -1.046F), new Vector2(51.0460014F, -10F), new Vector2(40F, -10F));
                    builder.AddCubicBezier(new Vector2(28.9540005F, -10F), new Vector2(20F, -1.046F), new Vector2(20F, 10F));
                    builder.AddCubicBezier(new Vector2(20F, 21.0459995F), new Vector2(28.9540005F, 30F), new Vector2(40F, 30F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_11()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-40F, 30F));
                    builder.AddCubicBezier(new Vector2(-28.9540005F, 30F), new Vector2(-20F, 21.0459995F), new Vector2(-20F, 10F));
                    builder.AddCubicBezier(new Vector2(-20F, -1.046F), new Vector2(-28.9540005F, -10F), new Vector2(-40F, -10F));
                    builder.AddCubicBezier(new Vector2(-51.0460014F, -10F), new Vector2(-60F, -1.046F), new Vector2(-60F, 10F));
                    builder.AddCubicBezier(new Vector2(-60F, 21.0459995F), new Vector2(-51.0460014F, 30F), new Vector2(-40F, 30F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - -  Offset:<-3.8320007, 0>
            // - - Path 3+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_12()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_13(), Geometry_14() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - -  Offset:<-3.8320007, 0>
            // - - - Path 3+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_13()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(10F, 30F));
                    builder.AddCubicBezier(new Vector2(21.0459995F, 30F), new Vector2(30F, 21.0459995F), new Vector2(30F, 10F));
                    builder.AddCubicBezier(new Vector2(30F, -1.046F), new Vector2(21.0459995F, -10F), new Vector2(10F, -10F));
                    builder.AddCubicBezier(new Vector2(-1.046F, -10F), new Vector2(-10F, -1.046F), new Vector2(-10F, 10F));
                    builder.AddCubicBezier(new Vector2(-10F, 21.0459995F), new Vector2(-1.046F, 30F), new Vector2(10F, 30F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - -  Offset:<-3.8320007, 0>
            // - - - Path 3+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_14()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-70F, 30F));
                    builder.AddCubicBezier(new Vector2(-58.9539986F, 30F), new Vector2(-50F, 21.0459995F), new Vector2(-50F, 10F));
                    builder.AddCubicBezier(new Vector2(-50F, -1.046F), new Vector2(-58.9539986F, -10F), new Vector2(-70F, -10F));
                    builder.AddCubicBezier(new Vector2(-81.0459976F, -10F), new Vector2(-90F, -1.046F), new Vector2(-90F, 10F));
                    builder.AddCubicBezier(new Vector2(-90F, 21.0459995F), new Vector2(-81.0459976F, 30F), new Vector2(-70F, 30F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - -  Offset:<-3.8320007, 0>
            // - - Path 3+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_15()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_16(), Geometry_17() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - -  Offset:<-3.8320007, 0>
            // - - - Path 3+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_16()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(70F, 30F));
                    builder.AddCubicBezier(new Vector2(81.0459976F, 30F), new Vector2(90F, 21.0459995F), new Vector2(90F, 10F));
                    builder.AddCubicBezier(new Vector2(90F, -1.046F), new Vector2(81.0459976F, -10F), new Vector2(70F, -10F));
                    builder.AddCubicBezier(new Vector2(58.9539986F, -10F), new Vector2(50F, -1.046F), new Vector2(50F, 10F));
                    builder.AddCubicBezier(new Vector2(50F, 21.0459995F), new Vector2(58.9539986F, 30F), new Vector2(70F, 30F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - -  Offset:<-3.8320007, 0>
            // - - - Path 3+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_17()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-10F, 30F));
                    builder.AddCubicBezier(new Vector2(1.046F, 30F), new Vector2(10F, 21.0459995F), new Vector2(10F, 10F));
                    builder.AddCubicBezier(new Vector2(10F, -1.046F), new Vector2(1.046F, -10F), new Vector2(-10F, -10F));
                    builder.AddCubicBezier(new Vector2(-21.0459995F, -10F), new Vector2(-30F, -1.046F), new Vector2(-30F, 10F));
                    builder.AddCubicBezier(new Vector2(-30F, 21.0459995F), new Vector2(-21.0459995F, 30F), new Vector2(-10F, 30F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, _f.R, _f.G, _f.B));
            }

            CompositionPath Path_0()
            {
                var result = _path_0 = new CompositionPath(Geometry_00());
                return result;
            }

            CompositionPath Path_1()
            {
                var result = _path_1 = new CompositionPath(Geometry_09());
                return result;
            }

            // - Shape tree root for layer: icon
            // Offset:<-3.8320007, 0>
            // Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_0(), RootProgress());
                return result;
            }

            // - Shape tree root for layer: icon
            // Offset:<-3.8320007, 0>
            // Path 3+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_1(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: icon
            // Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<61.967003, 110>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 61.9670029F, 110F));
                result.StrokeBrush = ColorBrush_Black();
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 10F;
                return result;
            }

            // Shape tree root for layer: icon
            // Path 3+Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<101.967, 100>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 101.967003F, 100F), _colorBrush_Black);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Shape tree root for layer: icon
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.400000006F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.833000004F, 0.833000004F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - Shape tree root for layer: icon
            // -  Offset:<-3.8320007, 0>
            // Path 2+Path 1.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), HoldThenStepEasingFunction());
                // Frame 30.
                result.InsertKeyFrame(0.25F, new CompositionPath(Geometry_03()), CubicBezierEasingFunction_0());
                // Frame 60.
                result.InsertKeyFrame(0.5F, _path_0, CubicBezierEasingFunction_1());
                // Frame 90.
                result.InsertKeyFrame(0.75F, new CompositionPath(Geometry_06()), _cubicBezierEasingFunction_0);
                // Frame 119.
                result.InsertKeyFrame(0.991666675F, _path_0, _cubicBezierEasingFunction_1);
                return result;
            }

            // - - Shape tree root for layer: icon
            // -  Offset:<-3.8320007, 0>
            // Path 3+Path 1.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_1(), _holdThenStepEasingFunction);
                // Frame 30.
                result.InsertKeyFrame(0.25F, new CompositionPath(Geometry_12()), _cubicBezierEasingFunction_0);
                // Frame 90.
                result.InsertKeyFrame(0.75F, new CompositionPath(Geometry_15()), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 119.
                result.InsertKeyFrame(0.991666675F, _path_1, _cubicBezierEasingFunction_1);
                return result;
            }

            // Shape tree root for layer: icon
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                var shapes = result.Shapes;
                // Offset:<-3.8320007, 0>
                shapes.Add(SpriteShape_0());
                // Offset:<-3.8320007, 0>
                shapes.Add(SpriteShape_1());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            internal ActionSticker_AnimatedVisual_UAPv11(
                Compositor compositor,
                Color foreground
                )
            {
                _c = compositor;
                _f = foreground;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }

        sealed class ActionSticker_AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 20000000;
            readonly Compositor _c;
            readonly Color _f;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_Black;
            ContainerVisual _root;

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // - - - Shape tree root for layer: icon
            // - -  Offset:<-3.8320007, 0>
            // - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_0()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_1(), Geometry_2() },
                    CanvasFilledRegionDetermination.Alternate);
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - -  Offset:<-3.8320007, 0>
            // - - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(80F, 50F));
                    builder.AddCubicBezier(new Vector2(96.5690002F, 50F), new Vector2(110F, 27.6140003F), new Vector2(110F, 0F));
                    builder.AddCubicBezier(new Vector2(110F, -27.6140003F), new Vector2(96.5690002F, -50F), new Vector2(80F, -50F));
                    builder.AddCubicBezier(new Vector2(63.4309998F, -50F), new Vector2(50F, -27.6140003F), new Vector2(50F, 0F));
                    builder.AddCubicBezier(new Vector2(50F, 27.6140003F), new Vector2(63.4309998F, 50F), new Vector2(80F, 50F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - -  Offset:<-3.8320007, 0>
            // - - Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, 50F));
                    builder.AddCubicBezier(new Vector2(16.5690002F, 50F), new Vector2(30F, 27.6140003F), new Vector2(30F, 0F));
                    builder.AddCubicBezier(new Vector2(30F, -27.6140003F), new Vector2(16.5690002F, -50F), new Vector2(0F, -50F));
                    builder.AddCubicBezier(new Vector2(-16.5690002F, -50F), new Vector2(-30F, -27.6140003F), new Vector2(-30F, 0F));
                    builder.AddCubicBezier(new Vector2(-30F, 27.6140003F), new Vector2(-16.5690002F, 50F), new Vector2(0F, 50F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: icon
            // - -  Offset:<-3.8320007, 0>
            // - Path 3+Path 1.PathGeometry
            CanvasGeometry Geometry_3()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_4(), Geometry_5() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - -  Offset:<-3.8320007, 0>
            // - - Path 3+Path 1.PathGeometry
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(40F, 30F));
                    builder.AddCubicBezier(new Vector2(51.0460014F, 30F), new Vector2(60F, 21.0459995F), new Vector2(60F, 10F));
                    builder.AddCubicBezier(new Vector2(60F, -1.046F), new Vector2(51.0460014F, -10F), new Vector2(40F, -10F));
                    builder.AddCubicBezier(new Vector2(28.9540005F, -10F), new Vector2(20F, -1.046F), new Vector2(20F, 10F));
                    builder.AddCubicBezier(new Vector2(20F, 21.0459995F), new Vector2(28.9540005F, 30F), new Vector2(40F, 30F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - -  Offset:<-3.8320007, 0>
            // - - Path 3+Path 1.PathGeometry
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-40F, 30F));
                    builder.AddCubicBezier(new Vector2(-28.9540005F, 30F), new Vector2(-20F, 21.0459995F), new Vector2(-20F, 10F));
                    builder.AddCubicBezier(new Vector2(-20F, -1.046F), new Vector2(-28.9540005F, -10F), new Vector2(-40F, -10F));
                    builder.AddCubicBezier(new Vector2(-51.0460014F, -10F), new Vector2(-60F, -1.046F), new Vector2(-60F, 10F));
                    builder.AddCubicBezier(new Vector2(-60F, 21.0459995F), new Vector2(-51.0460014F, 30F), new Vector2(-40F, 30F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, _f.R, _f.G, _f.B));
            }

            // - Shape tree root for layer: icon
            // Offset:<-3.8320007, 0>
            // Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - Shape tree root for layer: icon
            // Offset:<-3.8320007, 0>
            // Path 3+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // Shape tree root for layer: icon
            // Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<61.967003, 110>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 61.9670029F, 110F));
                result.StrokeBrush = ColorBrush_Black();
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 10F;
                return result;
            }

            // Shape tree root for layer: icon
            // Path 3+Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<101.967, 100>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 101.967003F, 100F), _colorBrush_Black);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Shape tree root for layer: icon
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            // Shape tree root for layer: icon
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                var shapes = result.Shapes;
                // Offset:<-3.8320007, 0>
                shapes.Add(SpriteShape_0());
                // Offset:<-3.8320007, 0>
                shapes.Add(SpriteShape_1());
                return result;
            }

            internal ActionSticker_AnimatedVisual_UAPv7(
                Compositor compositor,
                Color foreground
                )
            {
                _c = compositor;
                _f = foreground;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
