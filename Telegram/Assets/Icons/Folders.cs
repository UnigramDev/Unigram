//
// Copyright Fela Ameghino 2015-2024
//
// Distributed under the GNU General Public License v3.0. (See accompanying
// file LICENSE or copy at https://www.gnu.org/licenses/gpl-3.0.txt)
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.0+ge1fa92580f
//       
//       Command:
//           LottieGen -Language CSharp -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.7 -InputFile Folders.json
//       
//       Input file:
//           Folders.json (5589 bytes created 17:41+01:00 Dec 21 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |            40 |           32 |
// |--------------------------+---------------+--------------|
// | Expression animators     |             3 |            1 |
// | KeyFrame animators       |             3 |            1 |
// | Reference parameters     |             3 |            1 |
// | Expression operations    |             0 |            0 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             - |            - |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             1 |            1 |
// | PathKeyFrameAnimations   |             2 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             1 |            1 |
// | ShapeVisuals             |             1 |            1 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             1 |            1 |
// | CompositionSpriteShapes  |             2 |            2 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             2 |            2 |
// | Gradient stops           |             2 |            2 |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Microsoft.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        u_folder
    // Frame rate:  60 fps
    // Frame count: 30
    // Duration:    500.0 mS
    sealed class Folders
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 0.500 seconds.
        internal const long c_durationTicks = 5000000;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (Folders_AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                return
                    new Folders_AnimatedVisual_UAPv11(
                        compositor
                        );
            }

            if (Folders_AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                return
                    new Folders_AnimatedVisual_UAPv7(
                        compositor
                        );
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 30d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 30d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToPointerOver_Start", 0.0 },
                { "NormalToPointerOver_End", 1 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class Folders_AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 5000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionPath _path_0;
            CompositionPath _path_1;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-62.2669983F, 64.0650024F));
                    builder.AddCubicBezier(new Vector2(-62.8689995F, 67.1520004F), new Vector2(-60.5040016F, 70.0210037F), new Vector2(-57.3590012F, 70.0210037F));
                    builder.AddCubicBezier(new Vector2(-57.3590012F, 70.0210037F), new Vector2(51.7989998F, 70.0210037F), new Vector2(51.7989998F, 70.0210037F));
                    builder.AddCubicBezier(new Vector2(58.9819984F, 70.0210037F), new Vector2(65.1569977F, 64.9290009F), new Vector2(66.5250015F, 57.8769989F));
                    builder.AddCubicBezier(new Vector2(66.5250015F, 57.8769989F), new Vector2(80.4680023F, -14.0270004F), new Vector2(80.4680023F, -14.0270004F));
                    builder.AddCubicBezier(new Vector2(81.0660019F, -17.1130009F), new Vector2(78.7030029F, -19.9790001F), new Vector2(75.5589981F, -19.9790001F));
                    builder.AddCubicBezier(new Vector2(75.5589981F, -19.9790001F), new Vector2(-41.7630005F, -19.9790001F), new Vector2(-41.7630005F, -19.9790001F));
                    builder.AddCubicBezier(new Vector2(-44.1559982F, -19.9790001F), new Vector2(-46.2130013F, -18.2830009F), new Vector2(-46.6710014F, -15.9350004F));
                    builder.AddCubicBezier(new Vector2(-46.6710014F, -15.9350004F), new Vector2(-62.2669983F, 64.0650024F), new Vector2(-62.2669983F, 64.0650024F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - - ShapeGroup: Group 2
            // - - - Path 1
            // - Path
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-62.2669983F, 64.0650024F));
                    builder.AddCubicBezier(new Vector2(-62.8689995F, 67.1520004F), new Vector2(-60.5040016F, 70.0210037F), new Vector2(-57.3590012F, 70.0210037F));
                    builder.AddCubicBezier(new Vector2(-57.3590012F, 70.0210037F), new Vector2(51.7989998F, 70.0210037F), new Vector2(51.7989998F, 70.0210037F));
                    builder.AddCubicBezier(new Vector2(58.9819984F, 70.0210037F), new Vector2(65.1569977F, 64.9290009F), new Vector2(66.5250015F, 57.8769989F));
                    builder.AddCubicBezier(new Vector2(66.5250015F, 57.8769989F), new Vector2(90.4680023F, -4.02699995F), new Vector2(90.4680023F, -4.02699995F));
                    builder.AddCubicBezier(new Vector2(91.0660019F, -7.11299992F), new Vector2(88.7030029F, -9.97900009F), new Vector2(85.5589981F, -9.97900009F));
                    builder.AddCubicBezier(new Vector2(85.5589981F, -9.97900009F), new Vector2(-31.7630005F, -9.97900009F), new Vector2(-31.7630005F, -9.97900009F));
                    builder.AddCubicBezier(new Vector2(-34.1559982F, -9.97900009F), new Vector2(-36.2130013F, -8.28299999F), new Vector2(-36.6710014F, -5.93499994F));
                    builder.AddCubicBezier(new Vector2(-36.6710014F, -5.93499994F), new Vector2(-62.2669983F, 64.0650024F), new Vector2(-62.2669983F, 64.0650024F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - - ShapeGroup: Group 2
            // - - - Path 1
            // - Path
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-62.2669983F, 64.0650024F));
                    builder.AddCubicBezier(new Vector2(-62.8689995F, 67.1520004F), new Vector2(-60.5040016F, 70.0210037F), new Vector2(-57.3590012F, 70.0210037F));
                    builder.AddCubicBezier(new Vector2(-57.3590012F, 70.0210037F), new Vector2(51.7989998F, 70.0210037F), new Vector2(51.7989998F, 70.0210037F));
                    builder.AddCubicBezier(new Vector2(58.9819984F, 70.0210037F), new Vector2(65.1569977F, 64.9290009F), new Vector2(66.5250015F, 57.8769989F));
                    builder.AddCubicBezier(new Vector2(66.5250015F, 57.8769989F), new Vector2(70.4680023F, -19.0270004F), new Vector2(70.4680023F, -19.0270004F));
                    builder.AddCubicBezier(new Vector2(71.0660019F, -22.1130009F), new Vector2(68.7030029F, -24.9790001F), new Vector2(65.5589981F, -24.9790001F));
                    builder.AddCubicBezier(new Vector2(65.5589981F, -24.9790001F), new Vector2(-51.7630005F, -24.9790001F), new Vector2(-51.7630005F, -24.9790001F));
                    builder.AddCubicBezier(new Vector2(-54.1559982F, -24.9790001F), new Vector2(-56.2130013F, -23.2830009F), new Vector2(-56.6710014F, -20.9349995F));
                    builder.AddCubicBezier(new Vector2(-56.6710014F, -20.9349995F), new Vector2(-62.2669983F, 64.0650024F), new Vector2(-62.2669983F, 64.0650024F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-80F, -44.9970016F));
                    builder.AddCubicBezier(new Vector2(-80.0019989F, -58.8050003F), new Vector2(-68.8079987F, -70F), new Vector2(-55F, -70F));
                    builder.AddCubicBezier(new Vector2(-55F, -70F), new Vector2(-28.3600006F, -70F), new Vector2(-28.3600006F, -70F));
                    builder.AddCubicBezier(new Vector2(-25.1149998F, -70F), new Vector2(-21.9570007F, -68.947998F), new Vector2(-19.3610001F, -67.0009995F));
                    builder.AddCubicBezier(new Vector2(-19.3610001F, -67.0009995F), new Vector2(-3.35800004F, -55F), new Vector2(-3.35800004F, -55F));
                    builder.AddCubicBezier(new Vector2(-3.35800004F, -55F), new Vector2(44.9560013F, -55F), new Vector2(44.9560013F, -55F));
                    builder.AddCubicBezier(new Vector2(58.7630005F, -55F), new Vector2(69.9560013F, -43.9070015F), new Vector2(69.9560013F, -30.1000004F));
                    builder.AddCubicBezier(new Vector2(69.9560013F, -30.1000004F), new Vector2(70F, -30F), new Vector2(70F, -30F));
                    builder.AddCubicBezier(new Vector2(70F, -30F), new Vector2(-41.7639999F, -29.9790001F), new Vector2(-41.7639999F, -29.9790001F));
                    builder.AddCubicBezier(new Vector2(-48.9420013F, -29.9790001F), new Vector2(-55F, -25.3400002F), new Vector2(-56.4869995F, -17.8490009F));
                    builder.AddCubicBezier(new Vector2(-56.4869995F, -17.8490009F), new Vector2(-72.2580032F, 63.0509987F), new Vector2(-72.2580032F, 63.0509987F));
                    builder.AddCubicBezier(new Vector2(-77.0199966F, 58.5F), new Vector2(-79.9869995F, 52.0849991F), new Vector2(-79.987999F, 44.9780006F));
                    builder.AddCubicBezier(new Vector2(-79.987999F, 44.9780006F), new Vector2(-80F, -44.9970016F), new Vector2(-80F, -44.9970016F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - - ShapeGroup: Group 2
            // - - - Path 1
            // - Path
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-80F, -44.9970016F));
                    builder.AddCubicBezier(new Vector2(-80.0019989F, -58.8050003F), new Vector2(-68.8079987F, -70F), new Vector2(-55F, -70F));
                    builder.AddCubicBezier(new Vector2(-55F, -70F), new Vector2(-28.3600006F, -70F), new Vector2(-28.3600006F, -70F));
                    builder.AddCubicBezier(new Vector2(-25.1149998F, -70F), new Vector2(-21.9570007F, -68.947998F), new Vector2(-19.3610001F, -67.0009995F));
                    builder.AddCubicBezier(new Vector2(-19.3610001F, -67.0009995F), new Vector2(-3.35800004F, -55F), new Vector2(-3.35800004F, -55F));
                    builder.AddCubicBezier(new Vector2(-3.35800004F, -55F), new Vector2(44.9560013F, -55F), new Vector2(44.9560013F, -55F));
                    builder.AddCubicBezier(new Vector2(58.7630005F, -55F), new Vector2(69.9560013F, -43.8069992F), new Vector2(69.9560013F, -30F));
                    builder.AddCubicBezier(new Vector2(69.9560013F, -30F), new Vector2(70F, -20F), new Vector2(70F, -20F));
                    builder.AddCubicBezier(new Vector2(70F, -20F), new Vector2(-31.7639999F, -19.9790001F), new Vector2(-31.7639999F, -19.9790001F));
                    builder.AddCubicBezier(new Vector2(-38.9420013F, -19.9790001F), new Vector2(-43.901001F, -14.8369999F), new Vector2(-46.4869995F, -7.84899998F));
                    builder.AddCubicBezier(new Vector2(-46.4869995F, -7.84899998F), new Vector2(-72.2580032F, 63.0509987F), new Vector2(-72.2580032F, 63.0509987F));
                    builder.AddCubicBezier(new Vector2(-77.0199966F, 58.5F), new Vector2(-79.9869995F, 52.0849991F), new Vector2(-79.987999F, 44.9780006F));
                    builder.AddCubicBezier(new Vector2(-79.987999F, 44.9780006F), new Vector2(-80F, -44.9970016F), new Vector2(-80F, -44.9970016F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: icon
            // - - - - ShapeGroup: Group 2
            // - - - Path 1
            // - Path
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-80F, -44.9970016F));
                    builder.AddCubicBezier(new Vector2(-80.0019989F, -58.8050003F), new Vector2(-68.8079987F, -70F), new Vector2(-55F, -70F));
                    builder.AddCubicBezier(new Vector2(-55F, -70F), new Vector2(-28.3600006F, -70F), new Vector2(-28.3600006F, -70F));
                    builder.AddCubicBezier(new Vector2(-25.1149998F, -70F), new Vector2(-21.9570007F, -68.947998F), new Vector2(-19.3610001F, -67.0009995F));
                    builder.AddCubicBezier(new Vector2(-19.3610001F, -67.0009995F), new Vector2(-3.35800004F, -55F), new Vector2(-3.35800004F, -55F));
                    builder.AddCubicBezier(new Vector2(-3.35800004F, -55F), new Vector2(44.9560013F, -55F), new Vector2(44.9560013F, -55F));
                    builder.AddCubicBezier(new Vector2(58.7630005F, -55F), new Vector2(68.3479996F, -43.5089989F), new Vector2(69.362999F, -35.3810005F));
                    builder.AddCubicBezier(new Vector2(69.362999F, -35.3810005F), new Vector2(69.362999F, -34.9790001F), new Vector2(69.362999F, -34.9790001F));
                    builder.AddCubicBezier(new Vector2(69.362999F, -34.9790001F), new Vector2(-51.7639999F, -34.9790001F), new Vector2(-51.7639999F, -34.9790001F));
                    builder.AddCubicBezier(new Vector2(-58.9420013F, -34.9790001F), new Vector2(-65F, -30.3400002F), new Vector2(-66.4869995F, -22.8490009F));
                    builder.AddCubicBezier(new Vector2(-66.4869995F, -22.8490009F), new Vector2(-72.2580032F, 63.0509987F), new Vector2(-72.2580032F, 63.0509987F));
                    builder.AddCubicBezier(new Vector2(-77.0199966F, 58.5F), new Vector2(-79.9869995F, 52.0849991F), new Vector2(-79.987999F, 44.9780006F));
                    builder.AddCubicBezier(new Vector2(-79.987999F, 44.9780006F), new Vector2(-80F, -44.9970016F), new Vector2(-80F, -44.9970016F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: Group 2
            // Path 1
            CompositionColorBrush ColorBrush_AlmostGoldenrod_FFD6A137()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xD6, 0xA1, 0x37));
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: Group 2
            // - Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostKhaki_FFF8DA79()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0xF8, 0xDA, 0x79));
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: Group 2
            // - Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostSandyBrown_FFEDBB43()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xED, 0xBB, 0x43));
            }

            // Shape tree root for layer: icon
            // ShapeGroup: Group 2
            CompositionContainerShape ContainerShape()
            {
                var result = _c.CreateContainerShape();
                result.Offset = new Vector2(100F, 100F);
                var shapes = result.Shapes;
                // Path 1
                shapes.Add(SpriteShape_0());
                // Path 1
                shapes.Add(SpriteShape_1());
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation(), _rootProgress);
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: Group 2
            // Path 1
            CompositionLinearGradientBrush LinearGradientBrush()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostKhaki_FFF8DA79());
                colorStops.Add(GradientStop_1_AlmostSandyBrown_FFEDBB43());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(25.9750004F, -18.0330009F);
                result.EndPoint = new Vector2(7.22300005F, 72.2949982F);
                return result;
            }

            CompositionPath Path_0()
            {
                var result = _path_0 = new CompositionPath(Geometry_0());
                return result;
            }

            CompositionPath Path_1()
            {
                var result = _path_1 = new CompositionPath(Geometry_3());
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: Group 2
            // Path 1
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_0(), RootProgress());
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: Group 2
            // Path 1
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_1(), _rootProgress);
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: Group 2
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = LinearGradientBrush();
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: Group 2
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = ColorBrush_AlmostGoldenrod_FFD6A137();
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Shape tree root for layer: icon
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: Group 2
            // - Path 1
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.333333343F, new CompositionPath(Geometry_1()), CubicBezierEasingFunction_0());
                // Frame 20.
                result.InsertKeyFrame(0.666666687F, new CompositionPath(Geometry_2()), _cubicBezierEasingFunction_0);
                // Frame 29.
                result.InsertKeyFrame(0.966666639F, _path_0, _cubicBezierEasingFunction_0);
                return result;
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: Group 2
            // - Path 1
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_1(), _holdThenStepEasingFunction);
                // Frame 10.
                result.InsertKeyFrame(0.333333343F, new CompositionPath(Geometry_4()), _cubicBezierEasingFunction_0);
                // Frame 20.
                result.InsertKeyFrame(0.666666687F, new CompositionPath(Geometry_5()), _cubicBezierEasingFunction_0);
                // Frame 29.
                result.InsertKeyFrame(0.966666639F, _path_1, _cubicBezierEasingFunction_0);
                return result;
            }

            // Shape tree root for layer: icon
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                // ShapeGroup: Group 2
                result.Shapes.Add(ContainerShape());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: Group 2
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                // Frame 10.
                result.InsertKeyFrame(0.333333343F, new Vector2(1.10000002F, 1.10000002F), _cubicBezierEasingFunction_0);
                // Frame 20.
                result.InsertKeyFrame(0.666666687F, new Vector2(0.949999988F, 0.949999988F), _cubicBezierEasingFunction_0);
                // Frame 29.
                result.InsertKeyFrame(0.966666639F, new Vector2(1F, 1F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal Folders_AnimatedVisual_UAPv11(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }

        sealed class Folders_AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 5000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - - ShapeGroup: Group 2
            // - - Path 1
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-62.2669983F, 64.0650024F));
                    builder.AddCubicBezier(new Vector2(-62.8689995F, 67.1520004F), new Vector2(-60.5040016F, 70.0210037F), new Vector2(-57.3590012F, 70.0210037F));
                    builder.AddLine(new Vector2(51.7989998F, 70.0210037F));
                    builder.AddCubicBezier(new Vector2(58.9819984F, 70.0210037F), new Vector2(65.1569977F, 64.9290009F), new Vector2(66.5250015F, 57.8769989F));
                    builder.AddLine(new Vector2(80.4680023F, -14.0270004F));
                    builder.AddCubicBezier(new Vector2(81.0660019F, -17.1130009F), new Vector2(78.7030029F, -19.9790001F), new Vector2(75.5589981F, -19.9790001F));
                    builder.AddLine(new Vector2(-41.7630005F, -19.9790001F));
                    builder.AddCubicBezier(new Vector2(-44.1559982F, -19.9790001F), new Vector2(-46.2130013F, -18.2830009F), new Vector2(-46.6710014F, -15.9350004F));
                    builder.AddLine(new Vector2(-62.2669983F, 64.0650024F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: icon
            // - - - ShapeGroup: Group 2
            // - - Path 1
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-80F, -44.9970016F));
                    builder.AddCubicBezier(new Vector2(-80.0019989F, -58.8050003F), new Vector2(-68.8079987F, -70F), new Vector2(-55F, -70F));
                    builder.AddLine(new Vector2(-28.3600006F, -70F));
                    builder.AddCubicBezier(new Vector2(-25.1149998F, -70F), new Vector2(-21.9570007F, -68.947998F), new Vector2(-19.3610001F, -67.0009995F));
                    builder.AddLine(new Vector2(-3.35800004F, -55F));
                    builder.AddLine(new Vector2(44.9560013F, -55F));
                    builder.AddCubicBezier(new Vector2(58.7630005F, -55F), new Vector2(69.9560013F, -43.9070015F), new Vector2(69.9560013F, -30.1000004F));
                    builder.AddLine(new Vector2(70F, -30F));
                    builder.AddLine(new Vector2(-41.7639999F, -29.9790001F));
                    builder.AddCubicBezier(new Vector2(-48.9420013F, -29.9790001F), new Vector2(-55F, -25.3400002F), new Vector2(-56.4869995F, -17.8490009F));
                    builder.AddLine(new Vector2(-72.2580032F, 63.0509987F));
                    builder.AddCubicBezier(new Vector2(-77.0199966F, 58.5F), new Vector2(-79.9869995F, 52.0849991F), new Vector2(-79.987999F, 44.9780006F));
                    builder.AddLine(new Vector2(-80F, -44.9970016F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: Group 2
            // Path 1
            CompositionColorBrush ColorBrush_AlmostGoldenrod_FFD6A137()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xD6, 0xA1, 0x37));
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: Group 2
            // - Path 1
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostKhaki_FFF8DA79()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0xF8, 0xDA, 0x79));
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: Group 2
            // - Path 1
            // Stop 1
            CompositionColorGradientStop GradientStop_1_AlmostSandyBrown_FFEDBB43()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xED, 0xBB, 0x43));
            }

            // Shape tree root for layer: icon
            // ShapeGroup: Group 2
            CompositionContainerShape ContainerShape()
            {
                var result = _c.CreateContainerShape();
                result.Offset = new Vector2(100F, 100F);
                var shapes = result.Shapes;
                // Path 1
                shapes.Add(SpriteShape_0());
                // Path 1
                shapes.Add(SpriteShape_1());
                result.StartAnimation("Scale", ScaleVector2Animation());
                var controller = result.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: Group 2
            // Path 1
            CompositionLinearGradientBrush LinearGradientBrush()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostKhaki_FFF8DA79());
                colorStops.Add(GradientStop_1_AlmostSandyBrown_FFEDBB43());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(25.9750004F, -18.0330009F);
                result.EndPoint = new Vector2(7.22300005F, 72.2949982F);
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: Group 2
            // Path 1
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: Group 2
            // Path 1
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: Group 2
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = LinearGradientBrush();
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: Group 2
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = ColorBrush_AlmostGoldenrod_FFD6A137();
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Shape tree root for layer: icon
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F));
            }

            // Shape tree root for layer: icon
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                // ShapeGroup: Group 2
                result.Shapes.Add(ContainerShape());
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: Group 2
            // Scale
            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: Group 2
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.333333343F, new Vector2(1.10000002F, 1.10000002F), CubicBezierEasingFunction_0());
                // Frame 20.
                result.InsertKeyFrame(0.666666687F, new Vector2(0.949999988F, 0.949999988F), _cubicBezierEasingFunction_0);
                // Frame 29.
                result.InsertKeyFrame(0.966666639F, new Vector2(1F, 1F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal Folders_AnimatedVisual_UAPv7(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
