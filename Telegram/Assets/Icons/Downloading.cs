//
// Copyright Fela Ameghino 2015-2024
//
// Distributed under the GNU General Public License v3.0. (See accompanying
// file LICENSE or copy at https://www.gnu.org/licenses/gpl-3.0.txt)
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.0+ge1fa92580f
//       
//       Command:
//           LottieGen -Language CSharp -MinimumUapVersion 8 -Public -WinUIVersion 2.7 -InputFile downloading.json
//       
//       Input file:
//           downloading.json (7520 bytes created 14:08+01:00 Feb 17 2022)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v8 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |           134 |          130 |
// |--------------------------+---------------+--------------|
// | Expression animators     |            12 |           11 |
// | KeyFrame animators       |            12 |           11 |
// | Reference parameters     |            12 |           11 |
// | Expression operations    |             0 |            0 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             - |            - |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             1 |            1 |
// | PathKeyFrameAnimations   |             1 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             5 |            5 |
// | ShapeVisuals             |             6 |            6 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             - |            - |
// | CompositionSpriteShapes  |             8 |            8 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             9 |            9 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             4 |            4 |
// -----------------------------------------------------------
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Microsoft.UI;
using Microsoft.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        downloading
    // Frame rate:  60 fps
    // Frame count: 90
    // Duration:    1500.0 mS
    sealed partial class Downloading
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.500 seconds.
        internal const long c_durationTicks = 15000000;

        internal CompositionPropertySet _themeProperties;
        internal Color _themeForeground;
        //internal Color _themeBackground;
        internal Color _themeStroke;
        internal Color _themeAccent;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            EnsureThemeProperties(compositor);

            diagnostics = null;

            if (Downloading_AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                return
                    new Downloading_AnimatedVisual_UAPv11(
                        compositor,
                        _themeProperties
                        );
            }

            if (Downloading_AnimatedVisual_UAPv8.IsRuntimeCompatible())
            {
                return
                    new Downloading_AnimatedVisual_UAPv8(
                        compositor
                        );
            }

            return null;
        }

        Vector4 ColorAsVector4(Color color)
        {
            return new Vector4(color.R, color.G, color.B, color.A);
        }


        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties == null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4(_themeForeground));
                //_themeProperties.InsertVector4("Background", ColorAsVector4(_themeBackground));
                _themeProperties.InsertVector4("Stroke", ColorAsVector4(_themeStroke));
                _themeProperties.InsertVector4("Accent", ColorAsVector4(_themeAccent));
            }

            return _themeProperties;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 90d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 90d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
            if (propertyName == "Foreground")
            {
                _themeForeground = value;
            }
            //else if (propertyName == "Background")
            //{
            //    _themeBackground = value;
            //}
            else if (propertyName == "Stroke")
            {
                _themeStroke = value;
            }
            else if (propertyName == "Accent")
            {
                _themeAccent = value;
            }
            else
            {
                return;
            }

            if (_themeProperties != null)
            {
                _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
            }
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class Downloading_AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 15000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_1;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_2;
            CompositionColorBrush _colorBrush_AlmostDarkCyan_FF005FB7;
            CompositionColorBrush _colorBrush_Gray;
            CompositionColorBrush _colorBrush_Black;
            CompositionColorBrush _colorBrush_White;
            CompositionPath _path;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
            {
                var result = _c.CreateBooleanKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue);
                return result;
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            // Opacity for layer: circle
            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
            {
                // Frame 64.
                var result = CreateBooleanKeyFrameAnimation(0.711111128F, false);
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
            {
                // Frame 61.
                var result = _isVisibleBooleanAnimation_1 = CreateBooleanKeyFrameAnimation(0.677777767F, false);
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_2()
            {
                // Frame 60.
                var result = _isVisibleBooleanAnimation_2 = CreateBooleanKeyFrameAnimation(0.666666687F, true);
                return result;
            }

            // - - - Opacity for layer: circle
            // - - ShapeGroup: Group 1 Offset:<120, 120>
            CanvasGeometry Geometry_0()
            {
                return CanvasGeometry.CreateCircle(null, 0, 0, 92.5F);

                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, 92.5F));
                    builder.AddCubicBezier(new Vector2(51.0859985F, 92.5F), new Vector2(92.5F, 51.0859985F), new Vector2(92.5F, 0F));
                    builder.AddCubicBezier(new Vector2(92.5F, -51.0859985F), new Vector2(51.0859985F, -92.5F), new Vector2(0F, -92.5F));
                    builder.AddCubicBezier(new Vector2(-51.0859985F, -92.5F), new Vector2(-92.5F, -51.0859985F), new Vector2(-92.5F, 0F));
                    builder.AddCubicBezier(new Vector2(-92.5F, 51.0859985F), new Vector2(-51.0859985F, 92.5F), new Vector2(0F, 92.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(120F, 75F));
                    builder.AddLine(new Vector2(120F, 160F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-40F, -20F));
                    builder.AddLine(new Vector2(0F, 20F));
                    builder.AddLine(new Vector2(40F, -20F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Masks
            // - - Layer: arrow
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(120F, 205F));
                    builder.AddCubicBezier(new Vector2(166.944F, 205F), new Vector2(205F, 166.944F), new Vector2(205F, 120F));
                    builder.AddCubicBezier(new Vector2(205F, 73.0559998F), new Vector2(166.944F, 35F), new Vector2(120F, 35F));
                    builder.AddCubicBezier(new Vector2(73.0559998F, 35F), new Vector2(35F, 73.0559998F), new Vector2(35F, 120F));
                    builder.AddCubicBezier(new Vector2(35F, 166.944F), new Vector2(73.0559998F, 205F), new Vector2(120F, 205F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_4()
            {
                return CanvasGeometry.CreateCircle(null, 0, 0, 100F);

                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, 100F));
                    builder.AddCubicBezier(new Vector2(55.2290001F, 100F), new Vector2(100F, 55.2290001F), new Vector2(100F, 0F));
                    builder.AddCubicBezier(new Vector2(100F, -55.2280006F), new Vector2(55.2290001F, -100F), new Vector2(0F, -100F));
                    builder.AddCubicBezier(new Vector2(-55.2280006F, -100F), new Vector2(-100F, -55.2280006F), new Vector2(-100F, 0F));
                    builder.AddCubicBezier(new Vector2(-100F, 55.2290001F), new Vector2(-55.2280006F, 100F), new Vector2(0F, 100F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: circleFinal
            // - - - ShapeGroup: Group 1 Offset:<120, 120>
            // - Path
            CanvasGeometry Geometry_5()
            {
                return CanvasGeometry.CreateCircle(null, 0, 0, 50F);

                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, 50F));
                    builder.AddCubicBezier(new Vector2(27.6140003F, 50F), new Vector2(50F, 27.6140003F), new Vector2(50F, 0F));
                    builder.AddCubicBezier(new Vector2(50F, -27.6140003F), new Vector2(27.6140003F, -50F), new Vector2(0F, -50F));
                    builder.AddCubicBezier(new Vector2(-27.6140003F, -50F), new Vector2(-50F, -27.6140003F), new Vector2(-50F, 0F));
                    builder.AddCubicBezier(new Vector2(-50F, 27.6140003F), new Vector2(-27.6140003F, 50F), new Vector2(0F, 50F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Masks
            // - - Layer: arrowFinal
            CanvasGeometry Geometry_6()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(120.5F, 220.5F));
                    builder.AddCubicBezier(new Vector2(175.729004F, 220.5F), new Vector2(220.5F, 175.729004F), new Vector2(220.5F, 120.5F));
                    builder.AddCubicBezier(new Vector2(220.5F, 65.2720032F), new Vector2(175.729004F, 20.5F), new Vector2(120.5F, 20.5F));
                    builder.AddCubicBezier(new Vector2(65.2720032F, 20.5F), new Vector2(20.5F, 65.2720032F), new Vector2(20.5F, 120.5F));
                    builder.AddCubicBezier(new Vector2(20.5F, 175.729004F), new Vector2(65.2720032F, 220.5F), new Vector2(120.5F, 220.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostDarkCyan_FF005FB7()
            {
                var result = _colorBrush_AlmostDarkCyan_FF005FB7 = _c.CreateColorBrush();
                BindProperty(result, "Color", "ColorRGB(_theme.Accent.W,_theme.Accent.X,_theme.Accent.Y,_theme.Accent.Z)", "_theme", _themeProperties);
                return result;
            }

            CompositionColorBrush ColorBrush_Gray()
            {
                var result = _colorBrush_Gray = _c.CreateColorBrush();
                BindProperty(result, "Color", "ColorRGB(_theme.Stroke.W,_theme.Stroke.X,_theme.Stroke.Y,_theme.Stroke.Z)", "_theme", _themeProperties);
                return result;
            }

            CompositionColorBrush ColorBrush_Black()
            {
                var result = _colorBrush_Black = _c.CreateColorBrush();
                BindProperty(result, "Color", "ColorRGB(_theme.Foreground.W,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            CompositionColorBrush ColorBrush_White()
            {
                return _colorBrush_White = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF));
            }

            CompositionEffectBrush EffectBrush_0()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var effectFactory = _c.CreateEffectFactory(compositeEffect);
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectBrush EffectBrush_1()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var effectFactory = _c.CreateEffectFactory(compositeEffect);
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_2());
                result.SetSourceParameter("source", SurfaceBrush_3());
                return result;
            }

            CompositionPath Path()
            {
                var result = _path = new CompositionPath(Geometry_4());
                return result;
            }

            // - Opacity for layer: circle
            // ShapeGroup: Group 1 Offset:<120, 120>
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            CompositionPathGeometry PathGeometry_1()
            {
                return _pathGeometry_1 = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            CompositionPathGeometry PathGeometry_2()
            {
                return _pathGeometry_2 = _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - Masks
            // Layer: arrow
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // - Shape tree root for layer: circleFinal
            // ShapeGroup: Group 1 Offset:<120, 120>
            CompositionPathGeometry PathGeometry_4()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_0(), _rootProgress);
                return result;
            }

            // - Masks
            // Layer: arrowFinal
            CompositionPathGeometry PathGeometry_5()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_6()));
            }

            // Opacity for layer: circle
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<120, 120>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 120F, 120F));
                result.StrokeBrush = ColorBrush_Gray();
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 10F;
                return result;
            }

            // Shape tree root for layer: arrow
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.StrokeBrush = ColorBrush_AlmostDarkCyan_FF005FB7();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 15F;
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_0(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: arrow
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.StrokeBrush = _colorBrush_AlmostDarkCyan_FF005FB7;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 15F;
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_1(), _rootProgress);
                return result;
            }

            // Masks
            // Layer: arrow
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape(PathGeometry_3());
                result.FillBrush = ColorBrush_Black();
                return result;
            }

            // Shape tree root for layer: circleFinal
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<120, 120>
                var result = CreateSpriteShape(PathGeometry_4(), new Matrix3x2(1F, 0F, 0F, 1F, 120F, 120F));
                result.StrokeBrush = _colorBrush_AlmostDarkCyan_FF005FB7;
                result.StrokeMiterLimit = 5F;
                StartProgressBoundAnimation(result, "StrokeThickness", StrokeThicknessScalarAnimation_0_to_100(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: arrowFinal
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                var result = _c.CreateSpriteShape(_pathGeometry_1);
                result.StrokeBrush = ColorBrush_White();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 15F;
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_2(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: arrowFinal
            // Path 1
            CompositionSpriteShape SpriteShape_6()
            {
                var result = _c.CreateSpriteShape(_pathGeometry_2);
                result.StrokeBrush = _colorBrush_White;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 15F;
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_3(), _rootProgress);
                return result;
            }

            // Masks
            // Layer: arrowFinal
            CompositionSpriteShape SpriteShape_7()
            {
                var result = _c.CreateSpriteShape(PathGeometry_5());
                result.FillBrush = _colorBrush_Black;
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionSurfaceBrush SurfaceBrush_2()
            {
                return _c.CreateSurfaceBrush(VisualSurface_2());
            }

            CompositionSurfaceBrush SurfaceBrush_3()
            {
                return _c.CreateSurfaceBrush(VisualSurface_3());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_1();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            CompositionVisualSurface VisualSurface_2()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_2();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            CompositionVisualSurface VisualSurface_3()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_3();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: arrow
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            ContainerVisual ContainerVisual_2()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: arrowFinal
                result.Children.InsertAtTop(ShapeVisual_4());
                return result;
            }

            ContainerVisual ContainerVisual_3()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_5());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Opacity for layer: circle
                children.InsertAtTop(ShapeVisual_0());
                children.InsertAtTop(SpriteVisual_0());
                // Shape tree root for layer: circleFinal
                children.InsertAtTop(ShapeVisual_3());
                children.InsertAtTop(SpriteVisual_1());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.400000006F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.833000004F, 0.833000004F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - Shape tree root for layer: circleFinal
            // - ShapeGroup: Group 1 Offset:<120, 120>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path(), StepThenHoldEasingFunction());
                // Frame 60.
                result.InsertKeyFrame(0.666666687F, _path, _holdThenStepEasingFunction);
                // Frame 70.
                result.InsertKeyFrame(0.777777791F, new CompositionPath(Geometry_5()), CubicBezierEasingFunction_2());
                return result;
            }

            // - Shape tree root for layer: circleFinal
            // ShapeGroup: Group 1 Offset:<120, 120>
            // StrokeThickness
            ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_0_to_100()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                // Frame 60.
                result.InsertKeyFrame(0.666666687F, 0F, _holdThenStepEasingFunction);
                // Frame 70.
                result.InsertKeyFrame(0.777777791F, 100F, _cubicBezierEasingFunction_2);
                return result;
            }

            // Shape tree root for layer: circle
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(240F, 240F);
                // ShapeGroup: Group 1 Offset:<120, 120>
                result.Shapes.Add(SpriteShape_0());
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_0(), RootProgress());
                return result;
            }

            // Shape tree root for layer: arrow
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(240F, 240F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 2
                shapes.Add(SpriteShape_1());
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_2());
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_1(), _rootProgress);
                return result;
            }

            // Masks
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(240F, 240F);
                // Layer: arrow
                result.Shapes.Add(SpriteShape_3());
                StartProgressBoundAnimation(result, "IsVisible", _isVisibleBooleanAnimation_1, _rootProgress);
                return result;
            }

            // Shape tree root for layer: circleFinal
            ShapeVisual ShapeVisual_3()
            {
                var result = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(240F, 240F);
                // ShapeGroup: Group 1 Offset:<120, 120>
                result.Shapes.Add(SpriteShape_4());
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_2(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: arrowFinal
            ShapeVisual ShapeVisual_4()
            {
                var result = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(240F, 240F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 2
                shapes.Add(SpriteShape_5());
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_6());
                StartProgressBoundAnimation(result, "IsVisible", _isVisibleBooleanAnimation_2, _rootProgress);
                return result;
            }

            // Masks
            ShapeVisual ShapeVisual_5()
            {
                var result = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(240F, 240F);
                // Layer: arrowFinal
                result.Shapes.Add(SpriteShape_7());
                StartProgressBoundAnimation(result, "IsVisible", _isVisibleBooleanAnimation_2, _rootProgress);
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(240F, 240F);
                result.Brush = EffectBrush_0();
                return result;
            }

            SpriteVisual SpriteVisual_1()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(240F, 240F);
                result.Brush = EffectBrush_1();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Shape tree root for layer: arrow
            // ShapeGroup: Group 2
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, -150F), HoldThenStepEasingFunction());
                // Frame 29.
                result.InsertKeyFrame(0.322222233F, new Vector2(0F, 0F), CubicBezierEasingFunction_0());
                // Frame 59.
                result.InsertKeyFrame(0.655555546F, new Vector2(0F, 150F), CubicBezierEasingFunction_1());
                return result;
            }

            // - Shape tree root for layer: arrow
            // ShapeGroup: Group 1
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(120F, -7.5F), _holdThenStepEasingFunction);
                // Frame 29.
                result.InsertKeyFrame(0.322222233F, new Vector2(120F, 142.5F), _cubicBezierEasingFunction_0);
                // Frame 59.
                result.InsertKeyFrame(0.655555546F, new Vector2(120F, 292.5F), _cubicBezierEasingFunction_1);
                return result;
            }

            // - Shape tree root for layer: arrowFinal
            // ShapeGroup: Group 2
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, -150F), _stepThenHoldEasingFunction);
                // Frame 60.
                result.InsertKeyFrame(0.666666687F, new Vector2(0F, -150F), _holdThenStepEasingFunction);
                // Frame 89.
                result.InsertKeyFrame(0.98888886F, new Vector2(0F, 0F), _cubicBezierEasingFunction_0);
                return result;
            }

            // - Shape tree root for layer: arrowFinal
            // ShapeGroup: Group 1
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_3()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(120F, -7.5F), _stepThenHoldEasingFunction);
                // Frame 60.
                result.InsertKeyFrame(0.666666687F, new Vector2(120F, -7.5F), _holdThenStepEasingFunction);
                // Frame 89.
                result.InsertKeyFrame(0.98888886F, new Vector2(120F, 142.5F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal Downloading_AnimatedVisual_UAPv11(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(240F, 240F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }

        sealed partial class Downloading_AnimatedVisual_UAPv8 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 15000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_1;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_2;
            CompositionColorBrush _colorBrush_AlmostDarkCyan_FF005FB7;
            CompositionColorBrush _colorBrush_Black;
            CompositionColorBrush _colorBrush_White;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
            {
                var result = _c.CreateBooleanKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            // Opacity for layer: circle
            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
            {
                // Frame 64.
                var result = CreateBooleanKeyFrameAnimation(0.711111128F, false);
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
            {
                // Frame 61.
                var result = _isVisibleBooleanAnimation_1 = CreateBooleanKeyFrameAnimation(0.677777767F, false);
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_2()
            {
                // Frame 60.
                var result = _isVisibleBooleanAnimation_2 = CreateBooleanKeyFrameAnimation(0.666666687F, true);
                return result;
            }

            // - - - Opacity for layer: circle
            // - - ShapeGroup: Group 1 Offset:<120, 120>
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, 92.5F));
                    builder.AddCubicBezier(new Vector2(51.0859985F, 92.5F), new Vector2(92.5F, 51.0859985F), new Vector2(92.5F, 0F));
                    builder.AddCubicBezier(new Vector2(92.5F, -51.0859985F), new Vector2(51.0859985F, -92.5F), new Vector2(0F, -92.5F));
                    builder.AddCubicBezier(new Vector2(-51.0859985F, -92.5F), new Vector2(-92.5F, -51.0859985F), new Vector2(-92.5F, 0F));
                    builder.AddCubicBezier(new Vector2(-92.5F, 51.0859985F), new Vector2(-51.0859985F, 92.5F), new Vector2(0F, 92.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(120F, 75F));
                    builder.AddLine(new Vector2(120F, 160F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-40F, -20F));
                    builder.AddLine(new Vector2(0F, 20F));
                    builder.AddLine(new Vector2(40F, -20F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Masks
            // - - Layer: arrow
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(120F, 205F));
                    builder.AddCubicBezier(new Vector2(166.944F, 205F), new Vector2(205F, 166.944F), new Vector2(205F, 120F));
                    builder.AddCubicBezier(new Vector2(205F, 73.0559998F), new Vector2(166.944F, 35F), new Vector2(120F, 35F));
                    builder.AddCubicBezier(new Vector2(73.0559998F, 35F), new Vector2(35F, 73.0559998F), new Vector2(35F, 120F));
                    builder.AddCubicBezier(new Vector2(35F, 166.944F), new Vector2(73.0559998F, 205F), new Vector2(120F, 205F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: circleFinal
            // - - ShapeGroup: Group 1 Offset:<120, 120>
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, 100F));
                    builder.AddCubicBezier(new Vector2(55.2290001F, 100F), new Vector2(100F, 55.2290001F), new Vector2(100F, 0F));
                    builder.AddCubicBezier(new Vector2(100F, -55.2280006F), new Vector2(55.2290001F, -100F), new Vector2(0F, -100F));
                    builder.AddCubicBezier(new Vector2(-55.2280006F, -100F), new Vector2(-100F, -55.2280006F), new Vector2(-100F, 0F));
                    builder.AddCubicBezier(new Vector2(-100F, 55.2290001F), new Vector2(-55.2280006F, 100F), new Vector2(0F, 100F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Masks
            // - - Layer: arrowFinal
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(120.5F, 220.5F));
                    builder.AddCubicBezier(new Vector2(175.729004F, 220.5F), new Vector2(220.5F, 175.729004F), new Vector2(220.5F, 120.5F));
                    builder.AddCubicBezier(new Vector2(220.5F, 65.2720032F), new Vector2(175.729004F, 20.5F), new Vector2(120.5F, 20.5F));
                    builder.AddCubicBezier(new Vector2(65.2720032F, 20.5F), new Vector2(20.5F, 65.2720032F), new Vector2(20.5F, 120.5F));
                    builder.AddCubicBezier(new Vector2(20.5F, 175.729004F), new Vector2(65.2720032F, 220.5F), new Vector2(120.5F, 220.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostDarkCyan_FF005FB7()
            {
                return _colorBrush_AlmostDarkCyan_FF005FB7 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x5F, 0xB7));
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            CompositionColorBrush ColorBrush_White()
            {
                return _colorBrush_White = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF));
            }

            CompositionEffectBrush EffectBrush_0()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var effectFactory = _c.CreateEffectFactory(compositeEffect);
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectBrush EffectBrush_1()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var effectFactory = _c.CreateEffectFactory(compositeEffect);
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_2());
                result.SetSourceParameter("source", SurfaceBrush_3());
                return result;
            }

            // - Opacity for layer: circle
            // ShapeGroup: Group 1 Offset:<120, 120>
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            CompositionPathGeometry PathGeometry_1()
            {
                return _pathGeometry_1 = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            CompositionPathGeometry PathGeometry_2()
            {
                return _pathGeometry_2 = _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - Masks
            // Layer: arrow
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // - Shape tree root for layer: circleFinal
            // ShapeGroup: Group 1 Offset:<120, 120>
            CompositionPathGeometry PathGeometry_4()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
            }

            // - Masks
            // Layer: arrowFinal
            CompositionPathGeometry PathGeometry_5()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_5()));
            }

            // Opacity for layer: circle
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<120, 120>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 120F, 120F));
                result.StrokeBrush = ColorBrush_Black();
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 15F;
                return result;
            }

            // Shape tree root for layer: arrow
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.StrokeBrush = ColorBrush_AlmostDarkCyan_FF005FB7();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 15F;
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_0(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: arrow
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.StrokeBrush = _colorBrush_AlmostDarkCyan_FF005FB7;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 15F;
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_1(), _rootProgress);
                return result;
            }

            // Masks
            // Layer: arrow
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape(PathGeometry_3());
                result.FillBrush = _colorBrush_Black;
                return result;
            }

            // Shape tree root for layer: circleFinal
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<120, 120>
                var result = CreateSpriteShape(PathGeometry_4(), new Matrix3x2(1F, 0F, 0F, 1F, 120F, 120F));
                result.StrokeBrush = _colorBrush_AlmostDarkCyan_FF005FB7;
                result.StrokeMiterLimit = 5F;
                StartProgressBoundAnimation(result, "StrokeThickness", StrokeThicknessScalarAnimation_0_to_100(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: arrowFinal
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                var result = _c.CreateSpriteShape(_pathGeometry_1);
                result.StrokeBrush = ColorBrush_White();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 15F;
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_2(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: arrowFinal
            // Path 1
            CompositionSpriteShape SpriteShape_6()
            {
                var result = _c.CreateSpriteShape(_pathGeometry_2);
                result.StrokeBrush = _colorBrush_White;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 15F;
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_3(), _rootProgress);
                return result;
            }

            // Masks
            // Layer: arrowFinal
            CompositionSpriteShape SpriteShape_7()
            {
                var result = _c.CreateSpriteShape(PathGeometry_5());
                result.FillBrush = _colorBrush_Black;
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionSurfaceBrush SurfaceBrush_2()
            {
                return _c.CreateSurfaceBrush(VisualSurface_2());
            }

            CompositionSurfaceBrush SurfaceBrush_3()
            {
                return _c.CreateSurfaceBrush(VisualSurface_3());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_1();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            CompositionVisualSurface VisualSurface_2()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_2();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            CompositionVisualSurface VisualSurface_3()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_3();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: arrow
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            ContainerVisual ContainerVisual_2()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: arrowFinal
                result.Children.InsertAtTop(ShapeVisual_4());
                return result;
            }

            ContainerVisual ContainerVisual_3()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_5());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Opacity for layer: circle
                children.InsertAtTop(ShapeVisual_0());
                children.InsertAtTop(SpriteVisual_0());
                // Shape tree root for layer: circleFinal
                children.InsertAtTop(ShapeVisual_3());
                children.InsertAtTop(SpriteVisual_1());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.400000006F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.833000004F, 0.833000004F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - Shape tree root for layer: circleFinal
            // ShapeGroup: Group 1 Offset:<120, 120>
            // StrokeThickness
            ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_0_to_100()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 60.
                result.InsertKeyFrame(0.666666687F, 0F, _holdThenStepEasingFunction);
                // Frame 70.
                result.InsertKeyFrame(0.777777791F, 100F, _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // Shape tree root for layer: circle
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Opacity = 0.100000001F;
                result.Size = new Vector2(240F, 240F);
                // ShapeGroup: Group 1 Offset:<120, 120>
                result.Shapes.Add(SpriteShape_0());
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_0(), RootProgress());
                return result;
            }

            // Shape tree root for layer: arrow
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(240F, 240F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 2
                shapes.Add(SpriteShape_1());
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_2());
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_1(), _rootProgress);
                return result;
            }

            // Masks
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(240F, 240F);
                // Layer: arrow
                result.Shapes.Add(SpriteShape_3());
                StartProgressBoundAnimation(result, "IsVisible", _isVisibleBooleanAnimation_1, _rootProgress);
                return result;
            }

            // Shape tree root for layer: circleFinal
            ShapeVisual ShapeVisual_3()
            {
                var result = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(240F, 240F);
                // ShapeGroup: Group 1 Offset:<120, 120>
                result.Shapes.Add(SpriteShape_4());
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_2(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: arrowFinal
            ShapeVisual ShapeVisual_4()
            {
                var result = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(240F, 240F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 2
                shapes.Add(SpriteShape_5());
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_6());
                StartProgressBoundAnimation(result, "IsVisible", _isVisibleBooleanAnimation_2, _rootProgress);
                return result;
            }

            // Masks
            ShapeVisual ShapeVisual_5()
            {
                var result = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(240F, 240F);
                // Layer: arrowFinal
                result.Shapes.Add(SpriteShape_7());
                StartProgressBoundAnimation(result, "IsVisible", _isVisibleBooleanAnimation_2, _rootProgress);
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(240F, 240F);
                result.Brush = EffectBrush_0();
                return result;
            }

            SpriteVisual SpriteVisual_1()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(240F, 240F);
                result.Brush = EffectBrush_1();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Shape tree root for layer: arrow
            // ShapeGroup: Group 2
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, -150F), HoldThenStepEasingFunction());
                // Frame 29.
                result.InsertKeyFrame(0.322222233F, new Vector2(0F, 0F), CubicBezierEasingFunction_0());
                // Frame 59.
                result.InsertKeyFrame(0.655555546F, new Vector2(0F, 150F), CubicBezierEasingFunction_1());
                return result;
            }

            // - Shape tree root for layer: arrow
            // ShapeGroup: Group 1
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(120F, -7.5F), _holdThenStepEasingFunction);
                // Frame 29.
                result.InsertKeyFrame(0.322222233F, new Vector2(120F, 142.5F), _cubicBezierEasingFunction_0);
                // Frame 59.
                result.InsertKeyFrame(0.655555546F, new Vector2(120F, 292.5F), _cubicBezierEasingFunction_1);
                return result;
            }

            // - Shape tree root for layer: arrowFinal
            // ShapeGroup: Group 2
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, -150F), _stepThenHoldEasingFunction);
                // Frame 60.
                result.InsertKeyFrame(0.666666687F, new Vector2(0F, -150F), _holdThenStepEasingFunction);
                // Frame 89.
                result.InsertKeyFrame(0.98888886F, new Vector2(0F, 0F), _cubicBezierEasingFunction_0);
                return result;
            }

            // - Shape tree root for layer: arrowFinal
            // ShapeGroup: Group 1
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_3()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(120F, -7.5F), _stepThenHoldEasingFunction);
                // Frame 60.
                result.InsertKeyFrame(0.666666687F, new Vector2(120F, -7.5F), _holdThenStepEasingFunction);
                // Frame 89.
                result.InsertKeyFrame(0.98888886F, new Vector2(120F, 142.5F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal Downloading_AnimatedVisual_UAPv8(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(240F, 240F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 8);
            }
        }
    }
}
