//
// Copyright Fela Ameghino 2015-2024
//
// Distributed under the GNU General Public License v3.0. (See accompanying
// file LICENSE or copy at https://www.gnu.org/licenses/gpl-3.0.txt)
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.2-build.15+g2b49bb9edc
//       
//       Command:
//           LottieGen -GenerateColorBindings -Language CSharp -MinimumUapVersion 8 -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.7 -InputFile VoiceVideo.json
//       
//       Input file:
//           VoiceVideo.json (9204 bytes created 17:12+02:00 Jul 25 2022)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |           109 |           93 |
// |--------------------------+---------------+--------------|
// | Expression animators     |            17 |           13 |
// | KeyFrame animators       |            16 |           12 |
// | Reference parameters     |            17 |           13 |
// | Expression operations    |             4 |            4 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             1 |            1 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             2 |            2 |
// | PathKeyFrameAnimations   |             4 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             1 |            1 |
// | ShapeVisuals             |             1 |            1 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             2 |            2 |
// | CompositionSpriteShapes  |             6 |            6 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             1 |            1 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Microsoft.UI;
using Microsoft.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        mic_cam_mic
    // Frame rate:  60 fps
    // Frame count: 40
    // Duration:    666.7 mS
    // ___________________________________________________________
    // | Theme property |   Accessor   | Type  |  Default value  |
    // |________________|______________|_______|_________________|
    // | #000000        | Foreground   | Color | #FF000000 Black |
    // -----------------------------------------------------------
    public sealed class VoiceVideo
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 0.667 seconds.
        internal const long c_durationTicks = 6666666;

        // Theme property: Foreground.
        internal static readonly Color c_themeForeground = Color.FromArgb(0xFF, 0x00, 0x00, 0x00);

        CompositionPropertySet _themeProperties;
        Color _themeForeground = c_themeForeground;

        // Theme properties.
        public Color Foreground
        {
            get => _themeForeground;
            set
            {
                _themeForeground = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)_themeForeground));
                }
            }
        }

        static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties == null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)Foreground));
            }
            return _themeProperties;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (VoiceVideo_AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                var res =
                    new VoiceVideo_AnimatedVisual_UAPv11(
                        compositor,
                        _themeProperties
                        );
                res.CreateAnimations();
                return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 40d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 40d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToChecked_Start", 0.0 },
                { "NormalToChecked_End", 0.5 },
                { "CheckedToNormal_Start", 0.5 },
                { "CheckedToNormal_End", 1 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
            if (propertyName == "Foreground")
            {
                _themeForeground = value;
            }
            else
            {
                return;
            }

            if (_themeProperties != null)
            {
                _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
            }
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class VoiceVideo_AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 6666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Foreground;
            CompositionContainerShape _containerShape_0;
            CompositionContainerShape _containerShape_1;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPath _path_2;
            CompositionPath _path_3;
            CompositionPath _path_4;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            CompositionPathGeometry _pathGeometry_3;
            CompositionPathGeometry _pathGeometry_4;
            CompositionPathGeometry _pathGeometry_5;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -0.5F));
                    builder.AddCubicBezier(new Vector2(-1.93299997F, -0.5F), new Vector2(-3.5F, 1.05599999F), new Vector2(-3.5F, 2.98900008F));
                    builder.AddCubicBezier(new Vector2(-3.5F, 2.98900008F), new Vector2(-3.5F, 3F), new Vector2(-3.5F, 3F));
                    builder.AddCubicBezier(new Vector2(-3.5F, 4.93300009F), new Vector2(-1.93299997F, 6.5F), new Vector2(0F, 6.5F));
                    builder.AddCubicBezier(new Vector2(1.93299997F, 6.5F), new Vector2(3.5F, 4.93300009F), new Vector2(3.5F, 3F));
                    builder.AddCubicBezier(new Vector2(3.5F, 3F), new Vector2(3.5F, 2.98900008F), new Vector2(3.5F, 2.98900008F));
                    builder.AddCubicBezier(new Vector2(3.5F, 1.05599999F), new Vector2(1.93299997F, -0.5F), new Vector2(0F, -0.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -6.25F));
                    builder.AddCubicBezier(new Vector2(-1.79499996F, -6.25F), new Vector2(-3.25F, -4.79500008F), new Vector2(-3.25F, -3F));
                    builder.AddCubicBezier(new Vector2(-3.25F, -3F), new Vector2(-3.25F, 3F), new Vector2(-3.25F, 3F));
                    builder.AddCubicBezier(new Vector2(-3.25F, 4.79500008F), new Vector2(-1.79499996F, 6.25F), new Vector2(0F, 6.25F));
                    builder.AddCubicBezier(new Vector2(1.79499996F, 6.25F), new Vector2(3.25F, 4.79500008F), new Vector2(3.25F, 3F));
                    builder.AddCubicBezier(new Vector2(3.25F, 3F), new Vector2(3.25F, -3F), new Vector2(3.25F, -3F));
                    builder.AddCubicBezier(new Vector2(3.25F, -4.79500008F), new Vector2(1.79499996F, -6.25F), new Vector2(0F, -6.25F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, 1.375F));
                    builder.AddLine(new Vector2(0F, -1.375F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-4.37900019F, -7F));
                    builder.AddCubicBezier(new Vector2(-6.65500021F, -7F), new Vector2(-8.5F, -5.15500021F), new Vector2(-8.5F, -2.87899995F));
                    builder.AddCubicBezier(new Vector2(-8.5F, -2.87899995F), new Vector2(-8.5F, 5.87900019F), new Vector2(-8.5F, 5.87900019F));
                    builder.AddCubicBezier(new Vector2(-8.5F, 8.15499973F), new Vector2(-6.65500021F, 10F), new Vector2(-4.37900019F, 10F));
                    builder.AddCubicBezier(new Vector2(-4.37900019F, 10F), new Vector2(4.37900019F, 10F), new Vector2(4.37900019F, 10F));
                    builder.AddCubicBezier(new Vector2(6.65500021F, 10F), new Vector2(8.5F, 8.15499973F), new Vector2(8.5F, 5.87900019F));
                    builder.AddCubicBezier(new Vector2(8.5F, 5.87900019F), new Vector2(8.5F, -2.87899995F), new Vector2(8.5F, -2.87899995F));
                    builder.AddCubicBezier(new Vector2(8.5F, -5.15500021F), new Vector2(6.65500021F, -7F), new Vector2(4.37900019F, -7F));
                    builder.AddCubicBezier(new Vector2(4.37900019F, -7F), new Vector2(-4.37900019F, -7F), new Vector2(-4.37900019F, -7F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -7.75F));
                    builder.AddCubicBezier(new Vector2(-3F, -7.75F), new Vector2(-6.25F, -5.5F), new Vector2(-6.25F, -2.5F));
                    builder.AddCubicBezier(new Vector2(-6.25F, -2.5F), new Vector2(-6.25F, 1.5F), new Vector2(-6.25F, 1.5F));
                    builder.AddCubicBezier(new Vector2(-6.25F, 4.94999981F), new Vector2(-3.45000005F, 7.75F), new Vector2(0F, 7.75F));
                    builder.AddCubicBezier(new Vector2(0F, 7.75F), new Vector2(0.00999999978F, 7.75F), new Vector2(0.00999999978F, 7.75F));
                    builder.AddCubicBezier(new Vector2(3.45000005F, 7.75F), new Vector2(6.25F, 4.94999981F), new Vector2(6.25F, 1.5F));
                    builder.AddCubicBezier(new Vector2(6.25F, 1.5F), new Vector2(6.25F, -2.5F), new Vector2(6.25F, -2.5F));
                    builder.AddCubicBezier(new Vector2(6.25F, -5.5F), new Vector2(3F, -7.75F), new Vector2(0.00999999978F, -7.75F));
                    builder.AddCubicBezier(new Vector2(0.00999999978F, -7.75F), new Vector2(0F, -7.75F), new Vector2(0F, -7.75F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground()
            {
                if (_themeColor_Foreground != null) { return _themeColor_Foreground; }
                var result = _themeColor_Foreground = _c.CreateColorBrush();
                BindProperty(_themeColor_Foreground, "Color", "ColorRGB(_theme.Foreground.W,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            // Layer aggregator
            // Layer: 1
            CompositionContainerShape ContainerShape_0()
            {
                if (_containerShape_0 != null) { return _containerShape_0; }
                var result = _containerShape_0 = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                var shapes = result.Shapes;
                // Offset:<120, 90>
                shapes.Add(SpriteShape_0());
                // Offset:<120, 198.75>
                shapes.Add(SpriteShape_1());
                // Offset:<120, 105>
                shapes.Add(SpriteShape_2());
                return result;
            }

            // Layer aggregator
            // Layer: 4
            CompositionContainerShape ContainerShape_1()
            {
                if (_containerShape_1 != null) { return _containerShape_1; }
                var result = _containerShape_1 = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // Offset:<120, 90>
                shapes.Add(SpriteShape_3());
                // Offset:<120, 198.75>
                shapes.Add(SpriteShape_4());
                // Offset:<120, 105>
                shapes.Add(SpriteShape_5());
                return result;
            }

            CompositionPath Path_0()
            {
                if (_path_0 != null) { return _path_0; }
                var result = _path_0 = new CompositionPath(Geometry_0());
                return result;
            }

            CompositionPath Path_1()
            {
                if (_path_1 != null) { return _path_1; }
                var result = _path_1 = new CompositionPath(Geometry_1());
                return result;
            }

            CompositionPath Path_2()
            {
                if (_path_2 != null) { return _path_2; }
                var result = _path_2 = new CompositionPath(Geometry_2());
                return result;
            }

            CompositionPath Path_3()
            {
                if (_path_3 != null) { return _path_3; }
                var result = _path_3 = new CompositionPath(Geometry_3());
                return result;
            }

            CompositionPath Path_4()
            {
                if (_path_4 != null) { return _path_4; }
                var result = _path_4 = new CompositionPath(Geometry_4());
                return result;
            }

            // - - Layer aggregator
            // - Layer: 1
            // Offset:<120, 90>
            CompositionPathGeometry PathGeometry_0()
            {
                if (_pathGeometry_0 != null) { return _pathGeometry_0; }
                var result = _pathGeometry_0 = _c.CreatePathGeometry();
                return result;
            }

            // - - Layer aggregator
            // - Layer: 1
            // Offset:<120, 198.75>
            CompositionPathGeometry PathGeometry_1()
            {
                if (_pathGeometry_1 != null) { return _pathGeometry_1; }
                var result = _pathGeometry_1 = _c.CreatePathGeometry(Path_2());
                return result;
            }

            // - - Layer aggregator
            // - Layer: 1
            // Offset:<120, 105>
            CompositionPathGeometry PathGeometry_2()
            {
                if (_pathGeometry_2 != null) { return _pathGeometry_2; }
                var result = _pathGeometry_2 = _c.CreatePathGeometry();
                return result;
            }

            // - - Layer aggregator
            // - Layer: 4
            // Offset:<120, 90>
            CompositionPathGeometry PathGeometry_3()
            {
                if (_pathGeometry_3 != null) { return _pathGeometry_3; }
                var result = _pathGeometry_3 = _c.CreatePathGeometry();
                return result;
            }

            // - - Layer aggregator
            // - Layer: 4
            // Offset:<120, 198.75>
            CompositionPathGeometry PathGeometry_4()
            {
                if (_pathGeometry_4 != null) { return _pathGeometry_4; }
                var result = _pathGeometry_4 = _c.CreatePathGeometry(Path_2());
                return result;
            }

            // - - Layer aggregator
            // - Layer: 4
            // Offset:<120, 105>
            CompositionPathGeometry PathGeometry_5()
            {
                if (_pathGeometry_5 != null) { return _pathGeometry_5; }
                var result = _pathGeometry_5 = _c.CreatePathGeometry();
                return result;
            }

            // - Layer aggregator
            // Layer: 1
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<120, 90>, Scale:<10, 10>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(10F, 0F, 0F, 10F, 120F, 90F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            // - Layer aggregator
            // Layer: 1
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<120, 198.75>, Scale:<10, 10>
                var result = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(10F, 0F, 0F, 10F, 120F, 198.75F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            // - Layer aggregator
            // Layer: 1
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<120, 105>, Scale:<10, 10>
                var result = CreateSpriteShape(PathGeometry_2(), new Matrix3x2(10F, 0F, 0F, 10F, 120F, 105F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            // - Layer aggregator
            // Layer: 4
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<120, 90>, Scale:<10, 10>
                var result = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(10F, 0F, 0F, 10F, 120F, 90F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            // - Layer aggregator
            // Layer: 4
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<120, 198.75>, Scale:<10, 10>
                var result = CreateSpriteShape(PathGeometry_4(), new Matrix3x2(10F, 0F, 0F, 10F, 120F, 198.75F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            // - Layer aggregator
            // Layer: 4
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<120, 105>, Scale:<10, 10>
                var result = CreateSpriteShape(PathGeometry_5(), new Matrix3x2(10F, 0F, 0F, 10F, 120F, 105F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            ExpressionAnimation RootProgress()
            {
                if (_rootProgress != null) { return _rootProgress; }
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 1
            // -  Offset:<120, 90>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), StepThenHoldEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.5F, Path_0(), HoldThenStepEasingFunction());
                // Frame 32.
                result.InsertKeyFrame(0.800000012F, Path_1(), CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 1
            // -  Offset:<120, 105>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_3(), StepThenHoldEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.5F, Path_3(), HoldThenStepEasingFunction());
                // Frame 32.
                result.InsertKeyFrame(0.800000012F, Path_4(), CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 4
            // -  Offset:<120, 90>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_2()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_1(), HoldThenStepEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.300000012F, Path_0(), CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 4
            // -  Offset:<120, 105>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_3()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_4(), HoldThenStepEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.300000012F, Path_3(), CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 1
            // -  Offset:<120, 198.75>
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0p29_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0.289999992F, StepThenHoldEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.5F, 0.289999992F, HoldThenStepEasingFunction());
                // Frame 32.
                result.InsertKeyFrame(0.800000012F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 4
            // -  Offset:<120, 105>
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0p715_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0.714999974F, HoldThenStepEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.300000012F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 4
            // -  Offset:<120, 198.75>
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_1_to_0p29()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, HoldThenStepEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.300000012F, 0.289999992F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 1
            // -  Offset:<120, 105>
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_1_to_0p715()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, StepThenHoldEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.5F, 1F, HoldThenStepEasingFunction());
                // Frame 32.
                result.InsertKeyFrame(0.800000012F, 0.714999974F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 4
            // -  Offset:<120, 105>
            // TrimOffset
            ScalarKeyFrameAnimation TrimOffsetScalarAnimation_0_to_m0p069()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.300000012F, -0.0694444478F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 1
            // -  Offset:<120, 105>
            // TrimOffset
            ScalarKeyFrameAnimation TrimOffsetScalarAnimation_m0p069_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, -0.0694444478F, StepThenHoldEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.5F, -0.0694444478F, HoldThenStepEasingFunction());
                // Frame 32.
                result.InsertKeyFrame(0.800000012F, 0F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 4
            // -  Offset:<120, 198.75>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_0p29()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.300000012F, 0.289999992F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 1
            // -  Offset:<120, 105>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_0p285()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.5F, 0F, HoldThenStepEasingFunction());
                // Frame 32.
                result.InsertKeyFrame(0.800000012F, 0.284999996F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 1
            // -  Offset:<120, 198.75>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p29_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0.289999992F, StepThenHoldEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.5F, 0.289999992F, HoldThenStepEasingFunction());
                // Frame 32.
                result.InsertKeyFrame(0.800000012F, 0F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 4
            // -  Offset:<120, 105>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p285_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0.284999996F, HoldThenStepEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.300000012F, 0F, CubicBezierEasingFunction_0());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(240F, 240F);
                var shapes = result.Shapes;
                // Layer: 1
                shapes.Add(ContainerShape_0());
                // Layer: 4
                shapes.Add(ContainerShape_1());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Layer: 1
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.5F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            // - Layer aggregator
            // Layer: 4
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.5F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                return result;
            }

            internal VoiceVideo_AnimatedVisual_UAPv11(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(240F, 240F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                StartProgressBoundAnimation(_containerShape_0, "Scale", ShapeVisibilityAnimation_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "Scale", ShapeVisibilityAnimation_1(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_0, "Path", PathKeyFrameAnimation_0(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_1, "TrimStart", TrimStartScalarAnimation_0p29_to_0(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_1, "TrimEnd", TrimEndScalarAnimation_0p29_to_1(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_2, "Path", PathKeyFrameAnimation_1(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_2, "TrimStart", TrimStartScalarAnimation_0_to_0p285(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_2, "TrimEnd", TrimEndScalarAnimation_1_to_0p715(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_2, "TrimOffset", TrimOffsetScalarAnimation_m0p069_to_0(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_3, "Path", PathKeyFrameAnimation_2(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_4, "TrimStart", TrimStartScalarAnimation_0_to_0p29(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_4, "TrimEnd", TrimEndScalarAnimation_1_to_0p29(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_5, "Path", PathKeyFrameAnimation_3(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_5, "TrimStart", TrimStartScalarAnimation_0p285_to_0(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_5, "TrimEnd", TrimEndScalarAnimation_0p715_to_1(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_5, "TrimOffset", TrimOffsetScalarAnimation_0_to_m0p069(), RootProgress());
            }

            public void DestroyAnimations()
            {
                _containerShape_0.StopAnimation("Scale");
                _containerShape_1.StopAnimation("Scale");
                _pathGeometry_0.StopAnimation("Path");
                _pathGeometry_1.StopAnimation("TrimStart");
                _pathGeometry_1.StopAnimation("TrimEnd");
                _pathGeometry_2.StopAnimation("Path");
                _pathGeometry_2.StopAnimation("TrimStart");
                _pathGeometry_2.StopAnimation("TrimEnd");
                _pathGeometry_2.StopAnimation("TrimOffset");
                _pathGeometry_3.StopAnimation("Path");
                _pathGeometry_4.StopAnimation("TrimStart");
                _pathGeometry_4.StopAnimation("TrimEnd");
                _pathGeometry_5.StopAnimation("Path");
                _pathGeometry_5.StopAnimation("TrimStart");
                _pathGeometry_5.StopAnimation("TrimEnd");
                _pathGeometry_5.StopAnimation("TrimOffset");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }
    }
}
