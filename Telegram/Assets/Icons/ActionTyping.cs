//
// Copyright Fela Ameghino 2015-2024
//
// Distributed under the GNU General Public License v3.0. (See accompanying
// file LICENSE or copy at https://www.gnu.org/licenses/gpl-3.0.txt)
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.0+ge1fa92580f
//       
//       Command:
//           LottieGen -Language CSharp -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.7 -InputFile ActionTyping.json
//       
//       Input file:
//           ActionTyping.json (3756 bytes created 16:38+01:00 Dec 22 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    56 |
// |--------------------------+-------|
// | Expression animators     |     6 |
// | KeyFrame animators       |     6 |
// | Reference parameters     |     6 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     3 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     3 |
// |--------------------------+-------|
// | Brushes                  |     3 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Microsoft.UI;
using Microsoft.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        u_typing_text
    // Frame rate:  60 fps
    // Frame count: 40
    // Duration:    666.7 mS
    public sealed partial class ActionTyping
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 0.667 seconds.
        internal const long c_durationTicks = 6666666;
        internal readonly Color m_foreground;

        public ActionTyping(Color foreground)
        {
            m_foreground = foreground;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (ActionTyping_AnimatedVisual.IsRuntimeCompatible())
            {
                return
                    new ActionTyping_AnimatedVisual(
                        compositor,
                        m_foreground
                        );
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 40d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 40d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new DictionaryStringDouble
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class ActionTyping_AnimatedVisual : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 6666666;
            readonly Compositor _c;
            readonly Color _f;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            ColorKeyFrameAnimation CreateColorKeyFrameAnimation(float initialProgress, Color initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InterpolationColorSpace = CompositionColorSpace.Rgb;
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: dot 1
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-60F, 35F));
                    builder.AddCubicBezier(new Vector2(-46.1930008F, 35F), new Vector2(-35F, 23.8069992F), new Vector2(-35F, 10F));
                    builder.AddCubicBezier(new Vector2(-35F, -3.80699992F), new Vector2(-46.1930008F, -15F), new Vector2(-60F, -15F));
                    builder.AddCubicBezier(new Vector2(-73.8069992F, -15F), new Vector2(-85F, -3.80699992F), new Vector2(-85F, 10F));
                    builder.AddCubicBezier(new Vector2(-85F, 23.8069992F), new Vector2(-73.8069992F, 35F), new Vector2(-60F, 35F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: dot 2
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 35F));
                    builder.AddCubicBezier(new Vector2(13.8070002F, 35F), new Vector2(25F, 23.8069992F), new Vector2(25F, 10F));
                    builder.AddCubicBezier(new Vector2(25F, -3.80699992F), new Vector2(13.8070002F, -15F), new Vector2(0F, -15F));
                    builder.AddCubicBezier(new Vector2(-13.8070002F, -15F), new Vector2(-25F, -3.80699992F), new Vector2(-25F, 10F));
                    builder.AddCubicBezier(new Vector2(-25F, 23.8069992F), new Vector2(-13.8070002F, 35F), new Vector2(0F, 35F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: icon
            // - - ShapeGroup: dot 3
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(60F, 35F));
                    builder.AddCubicBezier(new Vector2(73.8069992F, 35F), new Vector2(85F, 23.8069992F), new Vector2(85F, 10F));
                    builder.AddCubicBezier(new Vector2(85F, -3.80699992F), new Vector2(73.8069992F, -15F), new Vector2(60F, -15F));
                    builder.AddCubicBezier(new Vector2(46.1930008F, -15F), new Vector2(35F, -3.80699992F), new Vector2(35F, 10F));
                    builder.AddCubicBezier(new Vector2(35F, 23.8069992F), new Vector2(46.1930008F, 35F), new Vector2(60F, 35F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: dot 1
            // Color
            ColorKeyFrameAnimation ColorAnimation_Black_to_Black()
            {
                // Frame 0.
                var result = CreateColorKeyFrameAnimation(0F, Color.FromArgb(0xFF, _f.R, _f.G, _f.B), HoldThenStepEasingFunction());
                // Frame 20.
                // SemiTransparentBlack
                result.InsertKeyFrame(0.5F, Color.FromArgb(0x99, _f.R, _f.G, _f.B), CubicBezierEasingFunction_0());
                // Frame 40.
                // Black
                result.InsertKeyFrame(1F, Color.FromArgb(0xFF, _f.R, _f.G, _f.B), _cubicBezierEasingFunction_0);
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: dot 2
            // Color
            ColorKeyFrameAnimation ColorAnimation_SemiTransparentBlack_to_SemiTransparentBlack_0()
            {
                // Frame 0.
                var result = CreateColorKeyFrameAnimation(0F, Color.FromArgb(0xCC, _f.R, _f.G, _f.B), _holdThenStepEasingFunction);
                // Frame 10.
                // Black
                result.InsertKeyFrame(0.25F, Color.FromArgb(0xFF, _f.R, _f.G, _f.B), CubicBezierEasingFunction_1());
                // Frame 30.
                // SemiTransparentBlack
                result.InsertKeyFrame(0.75F, Color.FromArgb(0x99, _f.R, _f.G, _f.B), _cubicBezierEasingFunction_0);
                // Frame 40.
                // SemiTransparentBlack
                result.InsertKeyFrame(1F, Color.FromArgb(0xCC, _f.R, _f.G, _f.B), CubicBezierEasingFunction_2());
                return result;
            }

            // - - Shape tree root for layer: icon
            // - ShapeGroup: dot 3
            // Color
            ColorKeyFrameAnimation ColorAnimation_SemiTransparentBlack_to_SemiTransparentBlack_1()
            {
                // Frame 0.
                var result = CreateColorKeyFrameAnimation(0F, Color.FromArgb(0x99, _f.R, _f.G, _f.B), _holdThenStepEasingFunction);
                // Frame 20.
                // Black
                result.InsertKeyFrame(0.5F, Color.FromArgb(0xFF, _f.R, _f.G, _f.B), _cubicBezierEasingFunction_0);
                // Frame 40.
                // SemiTransparentBlack
                result.InsertKeyFrame(1F, Color.FromArgb(0x99, _f.R, _f.G, _f.B), _cubicBezierEasingFunction_0);
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: dot 1
            CompositionColorBrush AnimatedColorBrush_Black_to_Black()
            {
                var result = _c.CreateColorBrush();
                StartProgressBoundAnimation(result, "Color", ColorAnimation_Black_to_Black(), RootProgress());
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: dot 2
            CompositionColorBrush AnimatedColorBrush_SemiTransparentBlack_to_SemiTransparentBlack_0()
            {
                var result = _c.CreateColorBrush();
                StartProgressBoundAnimation(result, "Color", ColorAnimation_SemiTransparentBlack_to_SemiTransparentBlack_0(), _rootProgress);
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: dot 3
            CompositionColorBrush AnimatedColorBrush_SemiTransparentBlack_to_SemiTransparentBlack_1()
            {
                var result = _c.CreateColorBrush();
                StartProgressBoundAnimation(result, "Color", ColorAnimation_SemiTransparentBlack_to_SemiTransparentBlack_1(), _rootProgress);
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: dot 1
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: dot 2
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: dot 3
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // Shape tree root for layer: icon
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.CenterPoint = new Vector2(-60F, 10F);
                result.Offset = new Vector2(100F, 100F);
                result.FillBrush = AnimatedColorBrush_Black_to_Black();
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_0(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: icon
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.CenterPoint = new Vector2(0F, 10F);
                result.Offset = new Vector2(100F, 100F);
                result.FillBrush = AnimatedColorBrush_SemiTransparentBlack_to_SemiTransparentBlack_0();
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_1(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: icon
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.CenterPoint = new Vector2(60F, 10F);
                result.Offset = new Vector2(100F, 100F);
                result.FillBrush = AnimatedColorBrush_SemiTransparentBlack_to_SemiTransparentBlack_1();
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation_2(), _rootProgress);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Shape tree root for layer: icon
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.400000006F, 0F), new Vector2(0.600000024F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.600000024F, 1F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.400000006F, 0F), new Vector2(0.833000004F, 0.833000004F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Shape tree root for layer: icon
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                var shapes = result.Shapes;
                // ShapeGroup: dot 1
                shapes.Add(SpriteShape_0());
                // ShapeGroup: dot 2
                shapes.Add(SpriteShape_1());
                // ShapeGroup: dot 3
                shapes.Add(SpriteShape_2());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: dot 1
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                // Frame 20.
                result.InsertKeyFrame(0.5F, new Vector2(0.699999988F, 0.699999988F), _cubicBezierEasingFunction_0);
                // Frame 40.
                result.InsertKeyFrame(1F, new Vector2(1F, 1F), _cubicBezierEasingFunction_0);
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: dot 2
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0.800000012F, 0.800000012F), _holdThenStepEasingFunction);
                // Frame 10.
                result.InsertKeyFrame(0.25F, new Vector2(1F, 1F), _cubicBezierEasingFunction_1);
                // Frame 30.
                result.InsertKeyFrame(0.75F, new Vector2(0.699999988F, 0.699999988F), _cubicBezierEasingFunction_0);
                // Frame 40.
                result.InsertKeyFrame(1F, new Vector2(0.800000012F, 0.800000012F), _cubicBezierEasingFunction_2);
                return result;
            }

            // - Shape tree root for layer: icon
            // ShapeGroup: dot 3
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0.699999988F, 0.699999988F), _holdThenStepEasingFunction);
                // Frame 20.
                result.InsertKeyFrame(0.5F, new Vector2(1F, 1F), _cubicBezierEasingFunction_0);
                // Frame 40.
                result.InsertKeyFrame(1F, new Vector2(0.699999988F, 0.699999988F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal ActionTyping_AnimatedVisual(
                Compositor compositor,
                Color foreground
                )
            {
                _c = compositor;
                _f = foreground;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
