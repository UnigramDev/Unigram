//
// Copyright Fela Ameghino 2015-2024
//
// Distributed under the GNU General Public License v3.0. (See accompanying
// file LICENSE or copy at https://www.gnu.org/licenses/gpl-3.0.txt)
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.2-build.15+g2b49bb9edc
//       
//       Command:
//           LottieGen -GenerateColorBindings -Language CSharp -MinimumUapVersion 8 -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.7 -InputFile MuteUnmute.json
//       
//       Input file:
//           MuteUnmute.json (10743 bytes created 15:57+02:00 Jul 25 2022)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v8 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |           205 |          197 |
// |--------------------------+---------------+--------------|
// | Expression animators     |            29 |           27 |
// | KeyFrame animators       |            28 |           26 |
// | Reference parameters     |            29 |           27 |
// | Expression operations    |             4 |            4 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             1 |            1 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             2 |            2 |
// | PathKeyFrameAnimations   |             2 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             5 |            5 |
// | ShapeVisuals             |             7 |            7 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |            10 |           10 |
// | CompositionSpriteShapes  |             8 |            8 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             8 |            8 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             4 |            4 |
// -----------------------------------------------------------
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Microsoft.UI;
using Microsoft.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        mute_unmute
    // Frame rate:  60 fps
    // Frame count: 80
    // Duration:    1333.3 mS
    // ___________________________________________________________
    // | Theme property |   Accessor   | Type  |  Default value  |
    // |________________|______________|_______|_________________|
    // | #000000        | Foreground   | Color | #FF000000 Black |
    // -----------------------------------------------------------
    public sealed partial class MuteUnmute
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.333 seconds.
        internal const long c_durationTicks = 13333333;

        // Theme property: Foreground.
        internal static readonly Color c_themeForeground = Color.FromArgb(0xFF, 0x00, 0x00, 0x00);

        CompositionPropertySet _themeProperties;
        Color _themeForeground = c_themeForeground;

        // Theme properties.
        public Color Foreground
        {
            get => _themeForeground;
            set
            {
                _themeForeground = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)_themeForeground));
                }
            }
        }

        static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties == null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)Foreground));
            }
            return _themeProperties;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (MuteUnmute_AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                var res =
                    new MuteUnmute_AnimatedVisual_UAPv11(
                        compositor,
                        _themeProperties
                        );
                res.CreateAnimations();
                return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 80d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 80d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToChecked_Start", 0.0 },
                { "NormalToChecked_End", 0.5 },
                { "CheckedToNormal_Start", 0.5 },
                { "CheckedToNormal_End", 1 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
            if (propertyName == "Foreground")
            {
                _themeForeground = value;
            }
            else
            {
                return;
            }

            if (_themeProperties != null)
            {
                _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
            }
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed partial class MuteUnmute_AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 13333333;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_0;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_1;
            CompositionColorBrush _colorBrush_Black;
            CompositionColorBrush _themeColor_Foreground;
            CompositionContainerShape _containerShape_0;
            CompositionContainerShape _containerShape_1;
            CompositionContainerShape _containerShape_2;
            CompositionContainerShape _containerShape_3;
            CompositionContainerShape _containerShape_4;
            CompositionContainerShape _containerShape_5;
            CompositionContainerShape _containerShape_6;
            CompositionContainerShape _containerShape_7;
            CompositionContainerShape _containerShape_8;
            CompositionContainerShape _containerShape_9;
            CompositionEffectFactory _effectFactory;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPath _path_2;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            CompositionPathGeometry _pathGeometry_3;
            CompositionPathGeometry _pathGeometry_4;
            CompositionPathGeometry _pathGeometry_5;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            CubicBezierEasingFunction _cubicBezierEasingFunction_3;
            CubicBezierEasingFunction _cubicBezierEasingFunction_4;
            ExpressionAnimation _rootProgress;
            ScalarKeyFrameAnimation _rotationAngleInDegreesScalarAnimation_0_to_0_0;
            ScalarKeyFrameAnimation _rotationAngleInDegreesScalarAnimation_0_to_0_1;
            ShapeVisual _shapeVisual_0;
            ShapeVisual _shapeVisual_1;
            ShapeVisual _shapeVisual_2;
            ShapeVisual _shapeVisual_4;
            ShapeVisual _shapeVisual_5;
            ShapeVisual _shapeVisual_6;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _offsetVector2Animation_0;
            Vector2KeyFrameAnimation _offsetVector2Animation_1;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
            {
                var result = _c.CreateBooleanKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue);
                return result;
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
            {
                // Frame 0.
                if (_isVisibleBooleanAnimation_0 != null) { return _isVisibleBooleanAnimation_0; }
                var result = _isVisibleBooleanAnimation_0 = CreateBooleanKeyFrameAnimation(0F, false);
                // Frame 40.
                result.InsertKeyFrame(0.5F, true);
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
            {
                // Frame 0.
                if (_isVisibleBooleanAnimation_1 != null) { return _isVisibleBooleanAnimation_1; }
                var result = _isVisibleBooleanAnimation_1 = CreateBooleanKeyFrameAnimation(0F, true);
                // Frame 40.
                result.InsertKeyFrame(0.5F, false);
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-2.25F, -1.125F));
                    builder.AddCubicBezier(new Vector2(-2.25F, 0.118000001F), new Vector2(-1.24300003F, 1.125F), new Vector2(0F, 1.125F));
                    builder.AddCubicBezier(new Vector2(1.24300003F, 1.125F), new Vector2(2.25F, 0.118000001F), new Vector2(2.25F, -1.125F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(6.75F, -0.75F));
                    builder.AddLine(new Vector2(6.75F, 3.29099989F));
                    builder.AddCubicBezier(new Vector2(6.75F, 3.4289999F), new Vector2(6.77899981F, 3.56599998F), new Vector2(6.83400011F, 3.69199991F));
                    builder.AddLine(new Vector2(8.19400024F, 6.80000019F));
                    builder.AddCubicBezier(new Vector2(8.33899975F, 7.13000011F), new Vector2(8.09599972F, 7.5F), new Vector2(7.73500013F, 7.5F));
                    builder.AddLine(new Vector2(-7.73500013F, 7.5F));
                    builder.AddCubicBezier(new Vector2(-8.09599972F, 7.5F), new Vector2(-8.33899975F, 7.13000011F), new Vector2(-8.19400024F, 6.80000019F));
                    builder.AddLine(new Vector2(-6.83400011F, 3.69199991F));
                    builder.AddCubicBezier(new Vector2(-6.77899981F, 3.56599998F), new Vector2(-6.75F, 3.4289999F), new Vector2(-6.75F, 3.29099989F));
                    builder.AddLine(new Vector2(-6.75F, -0.75F));
                    builder.AddCubicBezier(new Vector2(-6.75F, -4.47800016F), new Vector2(-3.72799993F, -7.5F), new Vector2(0F, -7.5F));
                    builder.AddCubicBezier(new Vector2(3.72799993F, -7.5F), new Vector2(6.75F, -4.47800016F), new Vector2(6.75F, -0.75F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-119.875F, -102.438004F));
                    builder.AddCubicBezier(new Vector2(-119.875F, -102.438004F), new Vector2(-110.487999F, -102.438004F), new Vector2(-110.487999F, -102.438004F));
                    builder.AddCubicBezier(new Vector2(-110.487999F, -102.438004F), new Vector2(99.9540024F, 108.058998F), new Vector2(99.9540024F, 108.058998F));
                    builder.AddCubicBezier(new Vector2(99.9540024F, 108.058998F), new Vector2(110.553001F, 97.4580002F), new Vector2(110.553001F, 97.4580002F));
                    builder.AddCubicBezier(new Vector2(110.553001F, 97.4580002F), new Vector2(-89.2910004F, -102.438004F), new Vector2(-89.2910004F, -102.438004F));
                    builder.AddCubicBezier(new Vector2(-89.2910004F, -102.438004F), new Vector2(119.938004F, -102.438004F), new Vector2(119.938004F, -102.438004F));
                    builder.AddCubicBezier(new Vector2(119.938004F, -102.438004F), new Vector2(119.938004F, 137.438004F), new Vector2(119.938004F, 137.438004F));
                    builder.AddCubicBezier(new Vector2(119.938004F, 137.438004F), new Vector2(-119.875F, 137.438004F), new Vector2(-119.875F, 137.438004F));
                    builder.AddCubicBezier(new Vector2(-119.875F, 137.438004F), new Vector2(-119.875F, -102.438004F), new Vector2(-119.875F, -102.438004F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-119.875F, -102.438004F));
                    builder.AddCubicBezier(new Vector2(-119.875F, -102.438004F), new Vector2(-110.485001F, -102.438004F), new Vector2(-110.485001F, -102.438004F));
                    builder.AddCubicBezier(new Vector2(-110.485001F, -102.438004F), new Vector2(-89.8899994F, -81.8470001F), new Vector2(-89.8899994F, -81.8470001F));
                    builder.AddCubicBezier(new Vector2(-89.8899994F, -81.8470001F), new Vector2(-79.288002F, -92.4449997F), new Vector2(-79.288002F, -92.4449997F));
                    builder.AddCubicBezier(new Vector2(-79.288002F, -92.4449997F), new Vector2(-89.2829971F, -102.438004F), new Vector2(-89.2829971F, -102.438004F));
                    builder.AddCubicBezier(new Vector2(-89.2829971F, -102.438004F), new Vector2(120F, -102.438004F), new Vector2(120F, -102.438004F));
                    builder.AddCubicBezier(new Vector2(120F, -102.438004F), new Vector2(120F, 137.375F), new Vector2(120F, 137.375F));
                    builder.AddCubicBezier(new Vector2(120F, 137.375F), new Vector2(-119.875F, 137.375F), new Vector2(-119.875F, 137.375F));
                    builder.AddCubicBezier(new Vector2(-119.875F, 137.375F), new Vector2(-119.875F, -102.438004F), new Vector2(-119.875F, -102.438004F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(9F, 9F));
                    builder.AddLine(new Vector2(-9F, -9F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return (_colorBrush_Black == null)
                    ? _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00))
                    : _colorBrush_Black;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground()
            {
                if (_themeColor_Foreground != null) { return _themeColor_Foreground; }
                var result = _themeColor_Foreground = _c.CreateColorBrush();
                BindProperty(_themeColor_Foreground, "Color", "ColorRGB(_theme.Foreground.W,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            // Shape tree root for layer: 1
            CompositionContainerShape ContainerShape_0()
            {
                if (_containerShape_0 != null) { return _containerShape_0; }
                var result = _containerShape_0 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(-0.917999983F, 5F);
                result.Scale = new Vector2(0.46875F, 0.46875F);
                // Transforms: 1 Scale:2.13333,2.13333, Offset:<-0.006, 162.659>
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // Shape tree root for layer: 2
            CompositionContainerShape ContainerShape_1()
            {
                if (_containerShape_1 != null) { return _containerShape_1; }
                var result = _containerShape_1 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(-0.917999983F, 5F);
                result.Scale = new Vector2(0.46875F, 0.46875F);
                // Transforms: 2 Scale:2.13333,2.13333, Offset:<-0.006, -37.341>
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // Masks
            // Layer: 2
            CompositionContainerShape ContainerShape_2()
            {
                if (_containerShape_2 != null) { return _containerShape_2; }
                var result = _containerShape_2 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(-0.917999983F, 5F);
                result.Scale = new Vector2(0.46875F, 0.46875F);
                // Transforms: 2 Scale:2.13333,2.13333, Offset:<-0.006, -37.341>
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // Layer aggregator
            // Layer: 3
            CompositionContainerShape ContainerShape_3()
            {
                if (_containerShape_3 != null) { return _containerShape_3; }
                var result = _containerShape_3 = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                result.Shapes.Add(ContainerShape_4());
                return result;
            }

            // - Layer aggregator
            // Layer: 3
            CompositionContainerShape ContainerShape_4()
            {
                if (_containerShape_4 != null) { return _containerShape_4; }
                var result = _containerShape_4 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(-0.917999983F, 5F);
                result.Scale = new Vector2(0.46875F, 0.46875F);
                // Transforms: 3 Scale:2.13333,2.13333, Offset:<-0.006, -0.008>
                result.Shapes.Add(SpriteShape_3());
                return result;
            }

            // Layer aggregator
            // Layer: 4
            CompositionContainerShape ContainerShape_5()
            {
                if (_containerShape_5 != null) { return _containerShape_5; }
                var result = _containerShape_5 = _c.CreateContainerShape();
                result.Shapes.Add(ContainerShape_6());
                return result;
            }

            // - Layer aggregator
            // Layer: 4
            CompositionContainerShape ContainerShape_6()
            {
                if (_containerShape_6 != null) { return _containerShape_6; }
                var result = _containerShape_6 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(-0.917999983F, 5F);
                result.Scale = new Vector2(0.46875F, 0.46875F);
                // Transforms: 4 Scale:2.13333,2.13333, Offset:<-0.006, 162.659>
                result.Shapes.Add(SpriteShape_4());
                return result;
            }

            // Shape tree root for layer: 5
            CompositionContainerShape ContainerShape_7()
            {
                if (_containerShape_7 != null) { return _containerShape_7; }
                var result = _containerShape_7 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(-0.917999983F, 5F);
                result.Scale = new Vector2(0.46875F, 0.46875F);
                // Transforms: 5 Scale:2.13333,2.13333, Offset:<-0.006, -37.341>
                result.Shapes.Add(SpriteShape_5());
                return result;
            }

            // Masks
            // Layer: 5
            CompositionContainerShape ContainerShape_8()
            {
                if (_containerShape_8 != null) { return _containerShape_8; }
                var result = _containerShape_8 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(-0.917999983F, 5F);
                result.Scale = new Vector2(0.46875F, 0.46875F);
                // Transforms: 5 Scale:2.13333,2.13333, Offset:<-0.006, -37.341>
                result.Shapes.Add(SpriteShape_6());
                return result;
            }

            // Shape tree root for layer: 6
            CompositionContainerShape ContainerShape_9()
            {
                if (_containerShape_9 != null) { return _containerShape_9; }
                var result = _containerShape_9 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(-0.917999983F, 5F);
                result.Scale = new Vector2(0.46875F, 0.46875F);
                // Transforms: 6 Scale:2.13333,2.13333, Offset:<-0.006, -0.008>
                result.Shapes.Add(SpriteShape_7());
                return result;
            }

            CompositionEffectBrush EffectBrush_0()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectBrush EffectBrush_1()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_2());
                result.SetSourceParameter("source", SurfaceBrush_3());
                return result;
            }

            CompositionEffectFactory EffectFactory()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                if (_effectFactory != null) { return _effectFactory; }
                var result = _effectFactory = _c.CreateEffectFactory(compositeEffect);
                return result;
            }

            CompositionPath Path_0()
            {
                if (_path_0 != null) { return _path_0; }
                var result = _path_0 = new CompositionPath(Geometry_2());
                return result;
            }

            CompositionPath Path_1()
            {
                if (_path_1 != null) { return _path_1; }
                var result = _path_1 = new CompositionPath(Geometry_3());
                return result;
            }

            CompositionPath Path_2()
            {
                if (_path_2 != null) { return _path_2; }
                var result = _path_2 = new CompositionPath(Geometry_4());
                return result;
            }

            CompositionPathGeometry PathGeometry_0()
            {
                return (_pathGeometry_0 == null)
                    ? _pathGeometry_0 = _c.CreatePathGeometry(new CompositionPath(Geometry_0()))
                    : _pathGeometry_0;
            }

            CompositionPathGeometry PathGeometry_1()
            {
                return (_pathGeometry_1 == null)
                    ? _pathGeometry_1 = _c.CreatePathGeometry(new CompositionPath(Geometry_1()))
                    : _pathGeometry_1;
            }

            // - - Masks
            // - Layer: 2
            // Transforms: 2 Scale:2.13333,2.13333, Offset:<-0.006, -37.341>
            CompositionPathGeometry PathGeometry_2()
            {
                if (_pathGeometry_2 != null) { return _pathGeometry_2; }
                var result = _pathGeometry_2 = _c.CreatePathGeometry();
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: 3
            // Transforms: 3 Scale:2.13333,2.13333, Offset:<-0.006, -0.008>
            CompositionPathGeometry PathGeometry_3()
            {
                if (_pathGeometry_3 != null) { return _pathGeometry_3; }
                var result = _pathGeometry_3 = _c.CreatePathGeometry(Path_2());
                return result;
            }

            // - - Masks
            // - Layer: 5
            // Transforms: 5 Scale:2.13333,2.13333, Offset:<-0.006, -37.341>
            CompositionPathGeometry PathGeometry_4()
            {
                if (_pathGeometry_4 != null) { return _pathGeometry_4; }
                var result = _pathGeometry_4 = _c.CreatePathGeometry();
                return result;
            }

            // - - Shape tree root for layer: 6
            // Transforms: 6 Scale:2.13333,2.13333, Offset:<-0.006, -0.008>
            CompositionPathGeometry PathGeometry_5()
            {
                if (_pathGeometry_5 != null) { return _pathGeometry_5; }
                var result = _pathGeometry_5 = _c.CreatePathGeometry(Path_2());
                return result;
            }

            // - Shape tree root for layer: 1
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<-0.006, 162.659>, Scale:<21.333302, 21.333302>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(21.3333015F, 0F, 0F, 21.3333015F, -0.00600000005F, 162.658997F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            // - Shape tree root for layer: 2
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<-0.006, -37.341>, Scale:<21.333302, 21.333302>
                var result = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(21.3333015F, 0F, 0F, 21.3333015F, -0.00600000005F, -37.3409996F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            // - Masks
            // Layer: 2
            // Transforms for 2 Scale:2.13333,2.13333, Offset:<-0.006, -37.341>
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<-0.006, -37.341>, Rotation:-0.0059289241127998705 degrees,
                // Scale:<2.13333, 2.13333>
                var geometry = PathGeometry_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(2.13333011F, 0F, 0F, 2.13333011F, -0.00600000005F, -37.3409996F), ColorBrush_Black()); ;
                return result;
            }

            // - - Layer aggregator
            // - Layer: 3
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<-0.006, -0.008>, Scale:<21.333302, 21.333302>
                var result = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(21.3333015F, 0F, 0F, 21.3333015F, -0.00600000005F, -0.00800000038F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            // - - Layer aggregator
            // - Layer: 4
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<-0.006, 162.659>, Scale:<21.333302, 21.333302>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(21.3333015F, 0F, 0F, 21.3333015F, -0.00600000005F, 162.658997F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            // - Shape tree root for layer: 5
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<-0.006, -37.341>, Scale:<21.333302, 21.333302>
                var result = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(21.3333015F, 0F, 0F, 21.3333015F, -0.00600000005F, -37.3409996F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            // - Masks
            // Layer: 5
            // Transforms for 5 Scale:2.13333,2.13333, Offset:<-0.006, -37.341>
            CompositionSpriteShape SpriteShape_6()
            {
                // Offset:<-0.006, -37.341>, Rotation:-0.0059289241127998705 degrees,
                // Scale:<2.13333, 2.13333>
                var geometry = PathGeometry_4();
                var result = CreateSpriteShape(geometry, new Matrix3x2(2.13333011F, 0F, 0F, 2.13333011F, -0.00600000005F, -37.3409996F), ColorBrush_Black()); ;
                return result;
            }

            // - Shape tree root for layer: 6
            // Path 1
            CompositionSpriteShape SpriteShape_7()
            {
                // Offset:<-0.006, -0.008>, Scale:<21.333302, 21.333302>
                var result = CreateSpriteShape(PathGeometry_5(), new Matrix3x2(21.3333015F, 0F, 0F, 21.3333015F, -0.00600000005F, -0.00800000038F)); ;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 1.5F;
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionSurfaceBrush SurfaceBrush_2()
            {
                return _c.CreateSurfaceBrush(VisualSurface_2());
            }

            CompositionSurfaceBrush SurfaceBrush_3()
            {
                return _c.CreateSurfaceBrush(VisualSurface_3());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_1();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            CompositionVisualSurface VisualSurface_2()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_2();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            CompositionVisualSurface VisualSurface_3()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_3();
                result.SourceSize = new Vector2(240F, 240F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: 2
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            ContainerVisual ContainerVisual_2()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: 5
                result.Children.InsertAtTop(ShapeVisual_4());
                return result;
            }

            ContainerVisual ContainerVisual_3()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_5());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Shape tree root for layer: 1
                children.InsertAtTop(ShapeVisual_0());
                children.InsertAtTop(SpriteVisual_0());
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_3());
                children.InsertAtTop(SpriteVisual_1());
                // Shape tree root for layer: 6
                children.InsertAtTop(ShapeVisual_6());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.300000012F, 1F))
                    : _cubicBezierEasingFunction_1;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return (_cubicBezierEasingFunction_2 == null)
                    ? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.699999988F, 1F))
                    : _cubicBezierEasingFunction_2;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_3()
            {
                return (_cubicBezierEasingFunction_3 == null)
                    ? _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.833000004F, 1F))
                    : _cubicBezierEasingFunction_3;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_4()
            {
                return (_cubicBezierEasingFunction_4 == null)
                    ? _cubicBezierEasingFunction_4 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_4;
            }

            ExpressionAnimation RootProgress()
            {
                if (_rootProgress != null) { return _rootProgress; }
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - - Masks
            // - - Layer: 2
            // - Transforms: 2 Scale:2.13333,2.13333, Offset:<-0.006, -37.341>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), StepThenHoldEasingFunction());
                // Frame 43.
                result.InsertKeyFrame(0.537500024F, Path_0(), HoldThenStepEasingFunction());
                // Frame 57.
                result.InsertKeyFrame(0.712499976F, Path_1(), CubicBezierEasingFunction_3());
                return result;
            }

            // - - - Masks
            // - - Layer: 5
            // - Transforms: 5 Scale:2.13333,2.13333, Offset:<-0.006, -37.341>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_1(), StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.0375000015F, Path_1(), HoldThenStepEasingFunction());
                // Frame 16.
                result.InsertKeyFrame(0.200000003F, Path_0(), CubicBezierEasingFunction_4());
                return result;
            }

            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0_0()
            {
                // Frame 0.
                if (_rotationAngleInDegreesScalarAnimation_0_to_0_0 != null) { return _rotationAngleInDegreesScalarAnimation_0_to_0_0; }
                var result = _rotationAngleInDegreesScalarAnimation_0_to_0_0 = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 41.
                result.InsertKeyFrame(0.512499988F, 0F, HoldThenStepEasingFunction());
                // Frame 47.
                result.InsertKeyFrame(0.587499976F, 3F, CubicBezierEasingFunction_0());
                // Frame 60.
                result.InsertKeyFrame(0.75F, -5F, CubicBezierEasingFunction_1());
                // Frame 69.
                result.InsertKeyFrame(0.862500012F, 3F, CubicBezierEasingFunction_0());
                // Frame 76.
                result.InsertKeyFrame(0.949999988F, 0F, CubicBezierEasingFunction_2());
                return result;
            }

            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0_1()
            {
                // Frame 0.
                if (_rotationAngleInDegreesScalarAnimation_0_to_0_1 != null) { return _rotationAngleInDegreesScalarAnimation_0_to_0_1; }
                var result = _rotationAngleInDegreesScalarAnimation_0_to_0_1 = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 2.
                result.InsertKeyFrame(0.0250000004F, 0F, HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.100000001F, -3F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.5F, 1F)));
                // Frame 19.
                result.InsertKeyFrame(0.237499997F, 5F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.301999986F, 1F)));
                // Frame 28.
                result.InsertKeyFrame(0.349999994F, -3F, CubicBezierEasingFunction_2());
                // Frame 36.
                result.InsertKeyFrame(0.449999988F, 0F, CubicBezierEasingFunction_2());
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: 3
            // - Transforms: 3 Scale:2.13333,2.13333, Offset:<-0.006, -0.008>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 43.
                result.InsertKeyFrame(0.537500024F, 0F, HoldThenStepEasingFunction());
                // Frame 57.
                result.InsertKeyFrame(0.712499976F, 1F, CubicBezierEasingFunction_3());
                return result;
            }

            // - - - Shape tree root for layer: 6
            // - Transforms: 6 Scale:2.13333,2.13333, Offset:<-0.006, -0.008>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_1_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, StepThenHoldEasingFunction());
                // Frame 3.
                result.InsertKeyFrame(0.0375000015F, 1F, HoldThenStepEasingFunction());
                // Frame 16.
                result.InsertKeyFrame(0.200000003F, 0F, CubicBezierEasingFunction_4());
                return result;
            }

            // Shape tree root for layer: 1
            ShapeVisual ShapeVisual_0()
            {
                if (_shapeVisual_0 != null) { return _shapeVisual_0; }
                var result = _shapeVisual_0 = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(240F, 240F);
                result.Shapes.Add(ContainerShape_0());
                return result;
            }

            // Shape tree root for layer: 2
            ShapeVisual ShapeVisual_1()
            {
                if (_shapeVisual_1 != null) { return _shapeVisual_1; }
                var result = _shapeVisual_1 = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(240F, 240F);
                result.Shapes.Add(ContainerShape_1());
                return result;
            }

            // Masks
            ShapeVisual ShapeVisual_2()
            {
                if (_shapeVisual_2 != null) { return _shapeVisual_2; }
                var result = _shapeVisual_2 = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(240F, 240F);
                // Layer: 2
                result.Shapes.Add(ContainerShape_2());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_3()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(240F, 240F);
                var shapes = result.Shapes;
                // Layer: 3
                shapes.Add(ContainerShape_3());
                // Layer: 4
                shapes.Add(ContainerShape_5());
                return result;
            }

            // Shape tree root for layer: 5
            ShapeVisual ShapeVisual_4()
            {
                if (_shapeVisual_4 != null) { return _shapeVisual_4; }
                var result = _shapeVisual_4 = _c.CreateShapeVisual();
                result.Size = new Vector2(240F, 240F);
                result.Shapes.Add(ContainerShape_7());
                return result;
            }

            // Masks
            ShapeVisual ShapeVisual_5()
            {
                if (_shapeVisual_5 != null) { return _shapeVisual_5; }
                var result = _shapeVisual_5 = _c.CreateShapeVisual();
                result.Size = new Vector2(240F, 240F);
                // Layer: 5
                result.Shapes.Add(ContainerShape_8());
                return result;
            }

            // Shape tree root for layer: 6
            ShapeVisual ShapeVisual_6()
            {
                if (_shapeVisual_6 != null) { return _shapeVisual_6; }
                var result = _shapeVisual_6 = _c.CreateShapeVisual();
                result.Size = new Vector2(240F, 240F);
                result.Shapes.Add(ContainerShape_9());
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(240F, 240F);
                result.Brush = EffectBrush_0();
                return result;
            }

            SpriteVisual SpriteVisual_1()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(240F, 240F);
                result.Brush = EffectBrush_1();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                if (_offsetVector2Animation_0 != null) { return _offsetVector2Animation_0; }
                var result = _offsetVector2Animation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(120.489998F, 117.347F), StepThenHoldEasingFunction());
                // Frame 40.
                result.InsertKeyFrame(0.5F, new Vector2(120.489998F, 117.347F), HoldThenStepEasingFunction());
                // Frame 45.
                result.InsertKeyFrame(0.5625F, new Vector2(120.489998F, 126.722F), CubicBezierEasingFunction_0());
                // Frame 58.
                result.InsertKeyFrame(0.725000024F, new Vector2(120.489998F, 106.097F), CubicBezierEasingFunction_1());
                // Frame 67.
                result.InsertKeyFrame(0.837499976F, new Vector2(120.489998F, 127.660004F), CubicBezierEasingFunction_0());
                // Frame 74.
                result.InsertKeyFrame(0.925000012F, new Vector2(120.489998F, 117.347F), CubicBezierEasingFunction_2());
                return result;
            }

            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                if (_offsetVector2Animation_1 != null) { return _offsetVector2Animation_1; }
                var result = _offsetVector2Animation_1 = CreateVector2KeyFrameAnimation(0F, new Vector2(120.489998F, 117.347F), HoldThenStepEasingFunction());
                // Frame 6.
                result.InsertKeyFrame(0.075000003F, new Vector2(120.489998F, 107.972F), CubicBezierEasingFunction_0());
                // Frame 17.
                result.InsertKeyFrame(0.212500006F, new Vector2(120.489998F, 126.722F), CubicBezierEasingFunction_0());
                // Frame 26.
                result.InsertKeyFrame(0.324999988F, new Vector2(120.489998F, 110.785004F), CubicBezierEasingFunction_2());
                // Frame 34.
                result.InsertKeyFrame(0.425000012F, new Vector2(120.489998F, 117.347F), CubicBezierEasingFunction_2());
                return result;
            }

            // - Layer aggregator
            // Layer: 3
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 40.
                result.InsertKeyFrame(0.5F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            // - Layer aggregator
            // Layer: 4
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 40.
                result.InsertKeyFrame(0.5F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                return result;
            }

            internal MuteUnmute_AnimatedVisual_UAPv11(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(240F, 240F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                StartProgressBoundAnimation(_containerShape_0, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_0, "Offset", OffsetVector2Animation_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "Offset", OffsetVector2Animation_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_2, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_2, "Offset", OffsetVector2Animation_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_3, "Scale", ShapeVisibilityAnimation_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_4, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_4, "Offset", OffsetVector2Animation_0(), RootProgress());
                StartProgressBoundAnimation(_containerShape_5, "Scale", ShapeVisibilityAnimation_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_6, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_6, "Offset", OffsetVector2Animation_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_7, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_7, "Offset", OffsetVector2Animation_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_8, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_8, "Offset", OffsetVector2Animation_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_9, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_9, "Offset", OffsetVector2Animation_1(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_2, "Path", PathKeyFrameAnimation_0(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_3, "TrimStart", TrimStartScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_4, "Path", PathKeyFrameAnimation_1(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_5, "TrimStart", TrimStartScalarAnimation_1_to_0(), RootProgress());
                StartProgressBoundAnimation(_shapeVisual_0, "IsVisible", IsVisibleBooleanAnimation_0(), RootProgress());
                StartProgressBoundAnimation(_shapeVisual_1, "IsVisible", IsVisibleBooleanAnimation_0(), RootProgress());
                StartProgressBoundAnimation(_shapeVisual_2, "IsVisible", IsVisibleBooleanAnimation_0(), RootProgress());
                StartProgressBoundAnimation(_shapeVisual_4, "IsVisible", IsVisibleBooleanAnimation_1(), RootProgress());
                StartProgressBoundAnimation(_shapeVisual_5, "IsVisible", IsVisibleBooleanAnimation_1(), RootProgress());
                StartProgressBoundAnimation(_shapeVisual_6, "IsVisible", IsVisibleBooleanAnimation_1(), RootProgress());
            }

            public void DestroyAnimations()
            {
                _containerShape_0.StopAnimation("RotationAngleInDegrees");
                _containerShape_0.StopAnimation("Offset");
                _containerShape_1.StopAnimation("RotationAngleInDegrees");
                _containerShape_1.StopAnimation("Offset");
                _containerShape_2.StopAnimation("RotationAngleInDegrees");
                _containerShape_2.StopAnimation("Offset");
                _containerShape_3.StopAnimation("Scale");
                _containerShape_4.StopAnimation("RotationAngleInDegrees");
                _containerShape_4.StopAnimation("Offset");
                _containerShape_5.StopAnimation("Scale");
                _containerShape_6.StopAnimation("RotationAngleInDegrees");
                _containerShape_6.StopAnimation("Offset");
                _containerShape_7.StopAnimation("RotationAngleInDegrees");
                _containerShape_7.StopAnimation("Offset");
                _containerShape_8.StopAnimation("RotationAngleInDegrees");
                _containerShape_8.StopAnimation("Offset");
                _containerShape_9.StopAnimation("RotationAngleInDegrees");
                _containerShape_9.StopAnimation("Offset");
                _pathGeometry_2.StopAnimation("Path");
                _pathGeometry_3.StopAnimation("TrimStart");
                _pathGeometry_4.StopAnimation("Path");
                _pathGeometry_5.StopAnimation("TrimStart");
                _shapeVisual_0.StopAnimation("IsVisible");
                _shapeVisual_1.StopAnimation("IsVisible");
                _shapeVisual_2.StopAnimation("IsVisible");
                _shapeVisual_4.StopAnimation("IsVisible");
                _shapeVisual_5.StopAnimation("IsVisible");
                _shapeVisual_6.StopAnimation("IsVisible");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }
    }
}
